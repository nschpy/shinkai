{
  "title": "deepseek-ai/deepseek-coder-1.3b-base",
  "description": "Эксперимент с инференсом модели deepseek-ai/deepseek-coder-1.3b-base и оценкой BLEU/ROUGE.",
  "metrics": {
    "BLEU": 0.30409588552519784,
    "ROUGE-L": 0.41128404862699885,
    "PREDICTIONS": [
      "/// Returns a random element from an array of strings.\n///\n/// - Parameter array: An array of strings.\n/// - Returns: A random element from the array, or nil if the array is empty.\nfunc randomElementFromStringArray(_ array: [String]) -> String? {\n    return array.randomElement()\n}\n\n/// Returns a random element from an array of strings.\n///\n/// - Parameter array: An array of strings.\n/// - Returns: A random element from the array, or nil if the array is empty.\n///\n/// This function is intended to be used in a few places in a codebase, such as in a utility library or a framework.\n/// It is a good example of how to use Swift's randomElement() function to get a random element from an array.\n///\n/// ## Usage\n///\n/// ```swift\n/// let array = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n/// let randomElement = randomElementFromStringArray(array)\n/// ```\n///\n/// ## Notes\n///\n/// - This function uses Swift's randomElement() function to",
      "/// Returns the square root of a number.\n///\n/// - number: The number to take the square root of.\n/// - returns: The square root of `number`.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}\n\nfunc max(of a: Int, b: Int) -> Int {\n    return max(a, b)\n}\n\n/// Returns the maximum of two integers.\n///\n/// - a: The first integer.\n/// - b: The second integer.\n/// - returns: The maximum of `a` and `b`.\nfunc max(of a: Int, b: Int) -> Int {\n    return max(a, b)\n}\n\nfunc max(of a: Double, b: Double) -> Double {\n    return max(a, b)\n}\n\n/// Returns the maximum of two doubles.\n///\n/// - a: The first double.\n/// - b: The second double.\n/// - returns: The maximum of `a` and `b`.\nfunc max(of a: Double, b: Double)",
      "/// Determines if the given array is a palindrome.\n/// - Parameters:\n///   - array: An array of values of any type.\n/// - Returns:\n///   - True if the array is a palindrome, false otherwise.\nfunc isPalindrome<T: Equatable>(_ array: [T]) -> Bool {\n    return array == array.reversed()\n}",
      "/// Validates an email address.\n///\n/// - Parameter email: The email address to validate.\n/// - Returns: A boolean indicating whether the email address is valid.\nfunc isValidEmail(_ email: String) -> Bool {\n    let pattern = \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex?.firstMatch(in: email, options: [], range: NSRange(location: 0, length: email.utf16.count)) != nil\n}",
      "// Returns the sum of digits in the given number.\n//\n// - Parameter number: The number to sum the digits of.\n// - Returns: The sum of the digits.\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}\n\n\nA: You can use the @property_name attribute to add a description to a property.\nFor example:\n/// The number of the document.\n@property_name var number: Int\n\n\nA: You can use ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.",
      "/// Returns the number of unique elements in the given array.\n///\n/// - Parameter array: The array to count the unique elements of.\n/// - Returns: The number of unique elements in the array.\nfunc countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}\n\n/// Returns the number of unique elements in the given array.\n///\n/// - Parameter array: The array to count the unique elements of.\n/// - Returns: The number of unique elements in the array.\nfunc countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}",
      "/// Returns the number of days between two dates.\n/// - Parameter from: The starting date.\n/// - Parameter to: The ending date.\n/// - Returns: The number of days between the two dates.\nfunc daysBetweenDates(from: Date, to: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: from, to: to)\n    return components.day ?? 0\n}\n\n/// Returns the number of days between two dates.\n/// - Parameter from: The starting date.\n/// - Parameter to: The ending date.\n/// - Returns: The number of days between the two dates.\nfunc daysBetweenDates(from: Date, to: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: from, to: to)\n    return components.day ?? 0\n}\n\n/// Returns the number of days between two dates.\n/// - Parameter from: The starting date.\n/// - Parameter to: The ending date.\n/// - Returns: The number of days between the two dates.",
      "/// Returns true if the given array contains no duplicates.\n///\n/// - Parameters:\n///   - array: The array to check for duplicates.\n///\n/// - Returns:\n///   - true if the array contains no duplicates, false otherwise.\nfunc isArrayUnique<T: Hashable>(_ array: [T]) -> Bool {\n    return Set(array).count == array.count\n}",
      "/// Returns true if the input string is a palindrome, ignoring spaces.\n///\n/// - Parameter input: The input string to check.\n/// - Returns: True if the input string is a palindrome, false otherwise.\nfunc isPalindromeIgnoringSpaces(input: String) -> Bool {\n    let cleanedInput = input.replacingOccurrences(of: \" \", with: \"\").lowercased()\n    return cleanedInput == String(cleanedInput.reversed())\n}\n\nfunc isPalindromeIgnoringSpaces(input: String) -> Bool {\n    let cleanedInput = input.replacingOccurrences(of: \" \", with: \"\").lowercased()\n    return cleanedInput == String(cleanedInput.reversed())\n}\n\n/// Returns true if the input string is a palindrome, ignoring spaces.\n///\n/// - Parameter input: The input string to check.\n/// - Returns: True if the input string is a palindrome, false otherwise.\nfunc isPalindromeIgnoringSpaces(input: String) ->",
      "/// Returns a tuple of hours and minutes from a given number of minutes.\n///\n/// - minutes: A number of minutes.\n///\n/// - returns: A tuple of hours and minutes.\nfunc convertMinutes(_ minutes: Int) -> (hours: Int, minutes: Int) {\n    return (minutes / 60, minutes % 60)\n}\n\n/// Returns a tuple of hours and minutes from a given number of minutes.\n///\n/// - minutes: A number of minutes.\n///\n/// - returns: A tuple of hours and minutes.\nfunc convertMinutes(_ minutes: Int) -> (hours: Int, minutes: Int) {\n    return (minutes / 60, minutes % 60)\n}\n\n/// Returns a tuple of hours and minutes from a given number of minutes.\n///\n/// - minutes: A number of minutes.\n///\n/// - returns: A tuple of hours and minutes.\nfunc convertMinutes(_ minutes: Int) -> (hours: Int, minutes: Int) {\n    return (minutes / 60, minutes % 60)\n}\n\n/// Returns",
      "/// Returns true if str contains the substring.\n///\n/// - Parameters:\n///   - str: The string to search.\n///   - substring: The substring to search for.\n/// - Returns:\n///   - true if str contains the substring.\nfunc containsSubstring(_ str: String, _ substring: String) -> Bool {\n    return str.contains(substring)\n}\n\n/// Returns true if str contains the substring.\n///\n/// - Parameters:\n///   - str: The string to search.\n///   - substring: The substring to search for.\n/// - Returns:\n///   - true if str contains the substring.\nfunc containsSubstring(_ str: String, _ substring: String) -> Bool {\n    return str.contains(substring)\n}\n\n/// Returns true if str contains the substring.\n///\n/// - Parameters:\n///   - str: The string to search.\n///   - substring: The substring to search for.\n/// - Returns:\n///   - true if str contains the substring.\nfunc containsSub",
      "/// Counts the number of elements in `array` that are greater than `threshold`.\n///\n/// - Parameter array: The array to count from.\n/// - Parameter threshold: The threshold to compare against.\n///\n/// - Returns: The number of elements in `array` that are greater than `threshold`.\nfunc countGreaterThan(_ array: [Int], threshold: Int) -> Int {\n    return array.filter { $0 > threshold }.count\n}\n\n/// Counts the number of elements in `array` that are greater than `threshold`.\n///\n/// - Parameter array: The array to count from.\n/// - Parameter threshold: The threshold to compare against.\n///\n/// - Returns: The number of elements in `array` that are greater than `threshold`.\nfunc countGreaterThan(_ array: [Int], threshold: Int) -> Int {\n    return array.filter { $0 > threshold }.count\n}\n\n/// Counts the number of elements in `array` that are greater than `threshold`.\n///\n/// - Parameter array: The array to",
      "/// Returns the median of the given array.\n/// - Parameter array: The array of values to be used in the calculation.\n/// - Returns: The median value of the array.\n/// - Discussion: The median value is the middle value of the sorted array.\n///   If the array has an odd number of values, the median is the middle value.\n///   If the array has an even number of values, the median is the average of the two middle values.\n///   If the array is empty, returns nil.\nfunc medianOfArray(_ array: [Int]) -> Double? {\n    guard !array.isEmpty else { return nil }\n    let sorted = array.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2 - 1] + sorted[sorted.count / 2]) / 2.0\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}",
      "/// Increment the values in a dictionary by a given amount.\n///\n/// - Parameter dictionary: The dictionary to increment.\n/// - Parameter increment: The amount to increment each value by.\n/// - Returns: A new dictionary with the incremented values.\nfunc incrementDictionaryValues<Key>(_ dictionary: [Key: Int], by increment: Int) -> [Key: Int] where Key: Hashable {\n    return dictionary.mapValues { $0 + increment }\n}",
      "/// Convert a string into an array of integers.\n///\n/// - Parameter input: A string representation of an array of integers.\n/// - Returns: An array of integers, or nil if the input cannot be parsed.\nfunc stringToIntArray(input: String) -> [Int]? {\n    return input.split(separator: \",\").compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }\n}\n\n\nA: You can use ///-style comments.\n/// Converts a string into an array of integers.\n///\n/// - Parameter input: A string representation of an array of integers.\n/// - Returns: An array of integers, or nil if the input cannot be parsed.\nfunc stringToIntArray(input: String) -> [Int]? {\n    return input.split(separator: \",\").compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }\n}",
      "/// Generates a unique ID.\n///\n/// - Parameter description: A string to be used as the ID.\n/// - Returns: A unique ID.\nfunc generateUniqueID(description: String) -> String {\n    return description + \"-\" + String(Int(Date().timeIntervalSince1970))\n}\n\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Int(Date().timeIntervalSince1970))\n}\n\n/// Generates a unique ID.\n///\n/// - Parameter description: A string to be used as the ID.\n/// - Returns: A unique ID.\nfunc generateUniqueID(description: String) -> String {\n    return description + \"-\" + String(Int(Date().timeIntervalSince1970))\n}\n\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Int(Date().timeIntervalSince1970))\n}\n\n/// Generates a unique ID.\n///\n/// - Parameter description: A string to be used as the ID.",
      "/// Returns the current day of the week.\n/// - Parameter weekday: The weekday of the day.\n/// - Returns: The weekday of the day.\nfunc currentDayOfWeek(weekday: String) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"EEEE\"\n    return formatter.string(from: Date())\n}",
      "// Returns the Celsius equivalent of the Fahrenheit temperature fahrenheit.\n//\n// - Parameter fahrenheit: A Double value representing a temperature in Fahrenheit.\n// - Returns: A Double value representing the Celsius equivalent of the Fahrenheit temperature.\nfunc fahrenheitToCelsius(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}\n\nfunc fahrenheitToCelsius(_ fahrenheit: Double) -> Double {\n    // Returns the Celsius equivalent of the Fahrenheit temperature fahrenheit.\n    //\n    // - Parameter fahrenheit: A Double value representing a temperature in Fahrenheit.\n    // - Returns: A Double value representing the Celsius equivalent of the Fahrenheit temperature.\n    return (fahrenheit - 32) * 5/9\n}",
      "/// Counts the number of consonants in a string.\n///\n/// - Parameter text: The text to count consonants in.\n/// - Returns: The number of consonants in the text.\nfunc countConsonants(text: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.lowercased().filter { $0.isLetter && !vowels.contains($0) }.count\n}\n\n/// Counts the number of vowels in a string.\n///\n/// - Parameter text: The text to count vowels in.\n/// - Returns: The number of vowels in the text.\nfunc countVowels(text: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.lowercased().filter { $0.isLetter && vowels.contains($0) }.count\n}\n\n/// Counts the number of vowels in a string.\n///",
      "/// Determine if a string is a floating point number\n///\n/// - Parameter input: The string to check\n/// - Returns: True if the string is a floating point number, false otherwise\nfunc isFloat(input: String) -> Bool {\n    return Float(input) != nil\n}\n\n/// Determine if a string is a floating point number\n///\n/// - Parameter input: The string to check\n/// - Returns: True if the string is a floating point number, false otherwise\n/// - Discussion:\n///   This function uses the Float(String) convenience initializer to convert the input string to a floating point number. If the conversion fails, it returns false.\nfunc isFloat(input: String) -> Bool {\n    return Float(input) != nil\n}\n\n/// Determine if a string is a floating point number\n///\n/// - Parameter input: The string to check\n/// - Returns: True if the string is a floating point number, false otherwise\n/// - Discussion:\n///   This function uses the Float(String) convenience initializer to convert the input string to a floating point number.",
      "/// Converts seconds to days, hours, minutes, and seconds.\n///\n/// - Parameters:\n///   - seconds: The number of seconds to convert.\n///\n/// - Returns:\n///   - days: The number of days.\n///   - hours: The number of hours.\n///   - minutes: The number of minutes.\n///   - seconds: The number of seconds.\nfunc convertSeconds(_ seconds: Int) -> (days: Int, hours: Int, minutes: Int, seconds: Int) {\n    var remaining = seconds\n    let days = remaining / 86400\n    remaining %= 86400\n    let hours = remaining / 3600\n    remaining %= 3600\n    let minutes = remaining / 60\n    remaining %= 60\n    return (days, hours, minutes, remaining)\n}",
      "/// Generates a random username for a user.\n///\n/// - Parameters:\n///   - name: The name of the user.\n///   - age: The age of the user.\n///\n/// - Returns: A random username for the user.\nfunc generateUsername(name: String, age: Int) -> String {\n    let adjectives = [\"Fast\", \"Cool\", \"Silent\", \"Smart\"]\n    let animals = [\"Fox\", \"Wolf\", \"Bear\", \"Eagle\"]\n    return \"\\(adjectives.randomElement()!) \\(animals.randomElement()!) \\(Int.random(in: 10...99))\"\n}",
      "/// Sieve of Eratosthenes.\n///\n/// Returns a list of all the prime numbers less than the given number.\n///\n/// ## Example\n///\n///     let primes = sieveOfEratosthenes(100)\n///     // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nfunc sieveOfEratosthenes(_ n: Int) -> [Int] {\n    guard n >= 2 else { return [] }\n    var sieve = Array(repeating: true, count: n+1)\n    sieve[0] = false\n    sieve[1] = false\n    for i in 2...Int(Double(n).squareRoot()) {\n        if sieve[i] {",
      "/// Calculates the Levenshtein distance between two strings.\n///\n/// - Parameter a: The first string.\n/// - Parameter b: The second string.\n///\n/// - Returns: The Levenshtein distance between the two strings.\nfunc levenshteinDistance(_ a: String, _ b: String) -> Int {\n    let empty = [Int](repeating: 0, count: b.count + 1)\n    var matrix = (0...a.count).map { [$0] + empty }\n    \n    for (i, aChar) in a.enumerated() {\n        for (j, bChar) in b.enumerated() {\n            matrix[i+1][j+1] = aChar == bChar ? \n                matrix[i][j] : \n                min(matrix[i][j], matrix[i][j+1], matrix[i+1][j]) + 1\n        }\n    }\n    return matrix.last?.last ?? 0\n}\n\n/// Calculates the Levenshtein distance between two strings.\n///\n/// -",
      "// Returns the sum of all divisors of the given number, excluding the number itself.\n// If the number is negative, it returns 0.\n//\n// - sumOfDivisors(1) = 0\n// - sumOfDivisors(3) = 1 + 3 = 4\n// - sumOfDivisors(4) = 1 + 2 + 4 = 6\n// - sumOfDivisors(5) = 1 + 5 = 6\n// - sumOfDivisors(10) = 1 + 2 + 5 + 10 = 16\n\n\nfunc sumOfDivisors(_ number: Int) -> Int {\n    guard number > 0 else { return 0 }\n    return (1...number).filter { number % $0 == 0 }.reduce(0, +)\n}\n\n\n// Returns the sum of all divisors of the given number, excluding the number itself.\n// If the number is negative, it returns 0.\n//\n// - sumOfDivisors(1) = 0\n// - sumOfDivisors(3) = 1 + 3 = 4\n// -",
      "/// Returns the least common multiple of two integers.\n///\n/// - Parameter a: The first integer.\n/// - Parameter b: The second integer.\n/// - Returns: The least common multiple of a and b.\nfunc lcm(a: Int, b: Int) -> Int {\n    return abs(a * b) / gcd(a, b)\n}\n\nfunc gcd(_ a: Int, _ b: Int) -> Int {\n    return (b == 0) ? a : gcd(b, a % b)\n}\n\nfunc abs(_ n: Int) -> Int {\n    return n < 0 ? -n : n\n}\n\n\n## Answer\n\n### 1.\n\n```swift\n/// Returns the least common multiple of two integers.\n///\n/// - Parameter a: The first integer.\n/// - Parameter b: The second integer.\n/// - Returns: The least common multiple of a and b.\nfunc lcm(a: Int, b: Int) -> Int {\n    return abs(a * b) / gcd(a, b)\n}",
      "/// Checks whether all elements of the array satisfy the given condition.\n/// - Parameter array: The array to check.\n/// - Parameter condition: A function that takes an element and returns a Boolean value indicating whether that element satisfies the condition.\n/// - Returns: `true` if all elements of the array satisfy the condition, `false` otherwise.\nfunc allSatisfy<T>(_ array: [T], _ condition: (T) -> Bool) -> Bool {\n    return array.allSatisfy(condition)\n}\n\n/// Checks whether all elements of the array satisfy the given condition.\n/// - Parameter array: The array to check.\n/// - Parameter condition: A function that takes an element and returns a Boolean value indicating whether that element satisfies the condition.\n/// - Returns: `true` if all elements of the array satisfy the condition, `false` otherwise.\nfunc allSatisfy<T>(_ array: [T], _ condition: (T) -> Bool) -> Bool {\n    return array.allSatisfy(condition)\n}\n\n/// Checks whether all elements of the array satisfy",
      "/// Returns a reversed version of a string\n///\n/// - Parameters:\n///   - input: The string to reverse\n/// - Returns:\n///   - A reversed version of the string\nfunc reverseCharacters(in input: String) -> [Character] {\n    return Array(input.reversed())\n}\n\n/// Returns a reversed version of a string\n///\n/// - Parameters:\n///   - input: The string to reverse\n/// - Returns:\n///   - A reversed version of the string\nfunc reverseCharacters(in input: String) -> [Character] {\n    return Array(input.reversed())\n}",
      "/// Returns true if the string is a palindrome, ignoring spaces and case.\n/// - Parameter str: The string to check.\n/// - Returns: True if the string is a palindrome.\nfunc isPalindromeIgnoringSpacesAndCase(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n/// Returns true if the string is a palindrome, ignoring spaces and case.\n/// - Parameter str: The string to check.\n/// - Returns: True if the string is a palindrome.\nfunc isPalindromeIgnoringSpacesAndCase(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}",
      "/// Returns the current date as a string in the format dd.MM.yyyy.\n///\n/// - Parameters:\n///   - date: The date to be formatted.\nfunc currentDateString(date: Date) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd.MM.yyyy\"\n    return formatter.string(from: date)\n}\n\n/// Returns the current date as a string in the format dd.MM.yyyy.\n///\n/// - Parameters:\n///   - date: The date to be formatted.\n/// - Returns: A string representation of the date.\nfunc currentDateString(date: Date) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd.MM.yyyy\"\n    return formatter.string(from: date)\n}\n\n/// Returns the current date as a string in the format dd.MM.yyyy.\n///\n/// - Returns: A string representation of the current date.\nfunc currentDateString() -> String {\n    let formatter = DateForm",
      "/// Returns the shortest path from the start to the end point in the grid.\n///\n/// - Parameters:\n///   - grid: The grid containing the maze.\n///   - start: The starting point of the path.\n///   - end: The ending point of the path.\n///\n/// - Returns:\n///   - The shortest path from the start to the end point in the grid.\n///   - nil if no path is found.\nfunc bfsShortestPath(grid: [[Int]], start: (Int, Int), end: (Int, Int)) -> Int? {\n    // Проверка входных данных\n    guard grid.count > 0, grid[0].count > 0, start.0 >= 0 && start.0 < grid.count,\n        start.1 >= 0 && start.1 < grid[0].count, end.0 >= 0 && end.0 < grid.count,\n        end.1 >= 0 && end.1 < grid[0].count else {\n            return nil\n    }\n\n    // Создание очереди и массива",
      "/// Determines whether a number is odd.\n/// - Parameter number: The number to check.\n/// - Returns: A Boolean value indicating whether the number is odd.\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n\nThe function isOdd takes an Int and returns a Bool. It takes a single parameter, number, and returns a Boolean value. The function uses the modulo operator to check whether the number is odd. The modulo operator returns the remainder of a division operation, so if number is odd, the result will be 0. If number is even, the result will be 1. The function returns true if the result is 1, and false otherwise.\n\nfunc isEven(_ number: Int) -> Bool {\n    return number % 2 == 0\n}\n\n/// Determines whether a number is even.\n/// - Parameter number: The number to check.\n/// - Returns: A Boolean value indicating whether the number is even.\nfunc isEven(_ number: Int) -> Bool {\n    return number % 2 == 0\n}\n\nThe function is",
      "/// Returns a Boolean value indicating whether a square number equals the given integer.\n/// - Parameter a: The number to be checked.\n/// - Parameter b: The square number to be checked.\n/// - Returns: A Boolean value indicating whether the square number equals the given integer.\nfunc isSquare(_ a: Int, of b: Int) -> Bool {\n    return a * a == b\n}",
      "/// Returns the minimum of an array of Ints.\n///\n/// - Parameter numbers: An array of Ints.\n/// - Returns: The minimum Int in the array, or nil if the array is empty.\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\n/// Returns the minimum of an array of Ints.\n///\n/// - Parameter numbers: An array of Ints.\n/// - Returns: The minimum Int in the array, or nil if the array is empty.\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nfunc minNumber(",
      "/// Converts a string to all lowercase.\n///\n/// - Parameter input: The string to convert to lowercase.\n/// - Returns: The input string converted to lowercase.\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}\n\nfunc toUpperCase(input: String) -> String {\n    return input.uppercased()\n}\n\n/// Converts a string to all uppercase.\n///\n/// - Parameter input: The string to convert to uppercase.\n/// - Returns: The input string converted to uppercase.\nfunc toUpperCase(input: String) -> String {\n    return input.uppercased()\n}\n\nfunc capitalize(input: String) -> String {\n    return input.capitalized\n}\n\n/// Capitalizes the first letter of a string.\n///\n/// - Parameter input: The string to capitalize.\n/// - Returns: The input string with the first letter capitalized.\nfunc capitalize(input: String) -> String {\n    return input.capitalized\n}\n\nfunc",
      "/// Determines if a number is a positive integer.\n///\n/// - Parameter number: The number to test.\n/// - Returns: `true` if `number` is a positive integer.\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}\n\n/// Determines if a number is a positive integer.\n///\n/// - Parameter number: The number to test.\n/// - Returns: `true` if `number` is a positive integer.\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}",
      "/// Converts a string to a list of words using a dash separator.\n/// - Parameter input: The string to convert.\n/// - Returns: A list of words.\nfunc stringToWordsUsingDash(input: String) -> [String] {\n    return input.split(separator: \"-\").map { String($0) }\n}\n\n/// Converts a string to a list of words using a dash separator.\n/// - Parameter input: The string to convert.\n/// - Returns: A list of words.\nfunc stringToWordsUsingDash(input: String) -> [String] {\n    return input.split(separator: \"-\").map { String($0) }\n}\n\n/// Converts a string to a list of words using a dash separator.\n/// - Parameter input: The string to convert.\n/// - Returns: A list of words.\nfunc stringToWordsUsingDash(input: String) -> [String] {\n    return input.split(separator: \"-\").map { String($0) }\n}\n\n/// Converts a",
      "/// Returns all keys in the first dictionary that are not in the second dictionary.\n///\n/// - Parameters:\n///   - dict1: The first dictionary.\n///   - dict2: The second dictionary.\n/// - Returns:\n///   - All keys in the first dictionary that are not in the second dictionary.\nfunc keysInFirstNotInSecond<Key, Value>(_ dict1: [Key: Value], dict2: [Key: Value]) -> [Key] where Key: Hashable {\n    return Array(dict1.keys.filter { !dict2.keys.contains($0) })\n}\n\n\n\nYou are documenting a Swift codebase.\nGiven a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nfunc keysInFirstNotInSecond<Key, Value>(_ dict1: [Key: Value], dict2: [Key: Value]) -> [Key] where Key: Hashable {\n    return Array",
      "/// Returns the maximum value in the given array.\n///\n/// - Parameter numbers: An array of Ints.\n/// - Returns: The maximum value in the array, or nil if the array is empty.\nfunc maxNumber(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}\n\n/// Returns the maximum value in the given array.\n///\n/// - Parameter numbers: An array of Ints.\n/// - Returns: The maximum value in the array, or nil if the array is empty.\nfunc maxNumber(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}\n\n/// Returns the maximum value in the given array.\n///\n/// - Parameter numbers: An array of Ints.\n/// - Returns: The maximum value in the array, or nil if the array is empty.\nfunc maxNumber(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}",
      "/// Determine whether a string contains only letters.\n/// - Parameter input: The string to test.\n/// - Returns: `true` if `input` contains only letters.\nfunc isLetter(input: String) -> Bool {\n    return input.count == 1 && input.rangeOfCharacter(from: .letters) != nil\n}\n\n/// Determine whether a string contains only letters.\n/// - Parameter input: The string to test.\n/// - Returns: `true` if `input` contains only letters.\nfunc isLetter(input: String) -> Bool {\n    return input.count == 1 && input.rangeOfCharacter(from: .letters) != nil\n}\n\n/// Determine whether a string contains only letters.\n/// - Parameter input: The string to test.\n/// - Returns: `true` if `input` contains only letters.\nfunc isLetter(input: String) -> Bool {\n    return input.count == 1 && input.rangeOfCharacter(from: .letters) != nil\n}\n\n/// Determine whether a string contains only letters.",
      "/// Converts a dictionary to a string representation.\n///\n/// - Parameters:\n///   - dictionary: A dictionary to convert.\n///\n/// - Returns:\n///   A string representation of the dictionary.\nfunc dictionaryToString<Key, Value>(_ dictionary: [Key: Value]) -> String where Key: Hashable {\n    return dictionary.map { \"\\($0.key): \\($0.value)\" }.joined(separator: \", \")\n}",
      "/// Sorts an array of strings alphabetically.\n///\n/// - Parameters:\n///   - strings: An array of strings to be sorted.\n///\n/// - Returns:\n///   - An array of strings, sorted alphabetically.\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}",
      "/// Converts a string containing a colon-separated list of integers into an array of integers.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: An array of integers.\nfunc stringToIntegerArrayByColon(_ str: String) -> [Int] {\n    return str.split(separator: \":\").compactMap { Int($0) }\n}",
      "/// Removes the given prefix from a string.\n///\n/// - string: The string to remove the prefix from.\n/// - prefix: The prefix to remove.\n///\n/// - returns: The string without the prefix.\nfunc removePrefix(_ string: String, prefix: String) -> String {\n    return string.hasPrefix(prefix) ? String(string.dropFirst(prefix.count)) : string\n}\n\n/// Removes the given prefix from a string.\n///\n/// - string: The string to remove the prefix from.\n/// - prefix: The prefix to remove.\n///\n/// - returns: The string without the prefix.\nfunc removePrefix(_ string: String, prefix: String) -> String {\n    return string.hasPrefix(prefix) ? String(string.dropFirst(prefix.count)) : string\n}",
      "/// Inverts a dictionary by value\n///\n/// - Parameter dictionary: A dictionary of any type\n/// - Returns: A dictionary of the same type, with the value as the key and the key as the value\nfunc invertDictionary<K, V>(_ dictionary: [K: V]) -> [V: K] where K: Hashable, V: Hashable {\n    var result: [V: K] = [:]\n    for (key, value) in dictionary {\n        result[value] = key\n    }\n    return result\n}",
      "/// Returns the sum of the elements in the given set.\n///\n/// - Parameter set: A set of integers.\n/// - Returns: An integer representing the sum of the elements in the set.\nfunc sumOfSet(_ set: Set<Int>) -> Int {\n    return set.reduce(0, +)\n}\n\n/// Returns the sum of the elements in the given set.\n///\n/// - Parameter set: A set of integers.\n/// - Returns: An integer representing the sum of the elements in the set.\nfunc sumOfSet(_ set: Set<Int>) -> Int {\n    return set.reduce(0, +)\n}\n\n/// Returns the sum of the elements in the given set.\n///\n/// - Parameter set: A set of integers.\n/// - Returns: An integer representing the sum of the elements in the set.\nfunc sumOfSet(_ set: Set<Int>) -> Int {\n    return set.reduce(0, +)\n}\n\n/// Returns the sum of the elements in the given set.\n///\n/// - Parameter set: A set of integers.",
      "/// Converts a String to an array of Characters\n///\n/// - Parameter str: The String to convert\n/// - Returns: An array of Characters\nfunc stringToCharacterArray(_ str: String) -> [Character] {\n    return Array(str)\n}",
      "/// Returns a dictionary where each key is a character from the given text and each value is the number of times that character appears in the text.\n///\n/// - text: The text to analyze.\n/// - returns: A dictionary where each key is a character from the given text and each value is the number of times that character appears in the text.\nfunc characterFrequencies(in text: String) -> [Character: Int] {\n    var result: [Character: Int] = [:]\n    for char in text {\n        result[char, default: 0] += 1\n    }\n    return result\n}",
      "/// Merges two arrays into a single array, without duplicates.\n/// - Parameters:\n///   - a: An array of elements that may or may not be unique.\n///   - b: An array of elements that may or may not be unique.\n/// - Returns:\n///   - A new array containing all elements from a and b, without duplicates.\n/// - Example:\n///   - `mergeUnique([1, 2, 3], [2, 3, 4])` returns `[1, 2, 3, 4]`.\n///   - `mergeUnique([1, 2, 3], [1, 2, 3, 4])` returns `[1, 2, 3, 4]`.\n///   - `mergeUnique([1, 2, 3], [1, 2, 3])` returns `[1, 2, 3]`.\nfunc mergeUnique<T: Hashable>(_ a: [T], _ b: [T]) -> [T] {\n    return Array(Set(a).union",
      "/// Determine if the given input string is a binary string.\n///\n/// - Parameter input: A string representing a binary number.\n/// - Returns: A boolean indicating whether the input string is a binary number.\nfunc isBinary(input: String) -> Bool {\n    let binaryRegex = \"^[01]+$\"\n    let binaryTest = NSPredicate(format: \"SELF MATCHES %@\", binaryRegex)\n    return binaryTest.evaluate(with: input)\n}",
      "/// Returns true if `str` ends with `suffix`\n///\n/// - Parameter str: The string to test.\n/// - Parameter suffix: The string to test for.\n///\n/// - Returns: True if `str` ends with `suffix`, false otherwise.\nfunc endsWith(str: String, suffix: String) -> Bool {\n    return str.hasSuffix(suffix)\n}",
      "/// Determines if a string is a palindrome.\n/// - Parameter str: The string to check.\n/// - Returns: `true` if the string is a palindrome, `false` otherwise.\nfunc isPalindrome(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}",
      "/// Computes the area of a polygon.\n///\n/// - points: An array of points, in order.\n///\n/// Returns: The area of the polygon.\nfunc polygonArea(_ points: [(x: Double, y: Double)]) -> Double {\n    let n = points.count\n    var area = 0.0\n    for i in 0..<n {\n        let j = (i + 1) % n\n        area += points[i].x * points[j].y\n        area -= points[j].x * points[i].y\n    }\n    return abs(area) / 2.0\n}\n\n// MARK: -\n\nfunc polygonArea(_ points: [(x: Double, y: Double)]) -> Double {\n    let n = points.count\n    var area = 0.0\n    for i in 0..<n {\n        let j = (i + 1) % n\n        area += points[i].x * points[j].y\n        area -= points[j].x * points[i].y\n    }\n    return abs(area",
      "/// Increments a number.\n///\n/// - number: The number to increment.\n///\n/// - returns: The incremented number.\nfunc increment(number: Int) -> Int {\n    return number + 1\n}\n\n\nA: I'm not sure what you're asking for, but I can help you.\nYou can create a comment block with a /// comment. \n/// This is a comment block.\n\nYou can create a single line comment with a // comment.\n// This is a comment.\n\nYou can create a function comment with a // function comment.\n/// This is a function comment.\nfunc myFunction() {\n    // This is a function comment.\n}\n\nYou can create a variable comment with a // variable comment.\n/// This is a variable comment.\nvar myVariable = 1\n\nYou can create a constant comment with a // constant comment.\n/// This is a constant comment.\nlet myConstant = 1\n\nYou can create a type comment with a // type comment.\n/// This is a type comment.\ntypealias MyType = Int\n\nYou can create a enum comment with a // enum comment.",
      "/// Returns the index of the peak element in the array.\n///\n/// The peak element is the largest element in the array.\n///\n/// Returns nil if the array is empty.\n///\n/// @param array The array to search.\n///\n/// @return The index of the peak element, or nil if the array is empty.\nfunc findPeakElement(_ array: [Int]) -> Int? {\n    guard !array.isEmpty else { return nil }\n    for i in 0..<array.count {\n        let prev = i > 0 ? array[i-1] : Int.min\n        let next = i < array.count-1 ? array[i+1] : Int.min\n        if array[i] >= prev && array[i] >= next { return i }\n    }\n    return nil\n}\n\n/// Returns the index of the peak element in the array.\n///\n/// The peak element is the largest element in the array.\n///\n/// Returns nil if the array is empty.\n///\n/// @param array The array to search.\n///\n/// @return The index of the peak element, or nil if",
      "/// Returns true if the string is a valid floating-point number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n/// Returns true if the string is a valid floating-point number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n/// Returns true if the string is a valid floating-point number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n/// Returns true if the string is a valid floating-point number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n/// Returns true if the string is a valid floating-point number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n/// Returns true if the string is a valid floating-point number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float",
      "/// Returns the number of seconds in a given number of hours, minutes and seconds.\n///\n/// - Parameter totalSeconds: The number of seconds to convert.\n/// - Returns: A tuple containing the hours, minutes, and seconds.\nfunc secondsToTime(_ totalSeconds: Int) -> (hours: Int, minutes: Int, seconds: Int) {\n    return (totalSeconds / 3600, (totalSeconds % 3600) / 60, totalSeconds % 60)\n}",
      "/// Determines if the given text is a palindrome ignoring spaces and case.\n/// - Parameter text: The text to check for palindrome.\n/// - Return: True if the text is a palindrome, false otherwise.\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n\nA: Swift 5\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n/// Determines if the given text is a palindrome ignoring spaces and case.\n/// - Parameter text: The text to check for palindrome.\n/// - Return: True if the text is a palindrome, false otherwise.\n\n\nA: Swift 5\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String",
      "/// Converts a string into an array of floats.\n///\n/// - Parameter str: A string containing a series of numbers separated by spaces or periods.\n/// - Returns: An array of floats.\nfunc stringToFloatArrayBySpaceAndPeriod(_ str: String) -> [Float] {\n    return str.split { $0 == \" \" || $0 == \".\" }.compactMap { Float($0) }\n}\n\n/// Converts a string into an array of floats.\n///\n/// - Parameter str: A string containing a series of numbers separated by spaces or periods.\n/// - Returns: An array of floats.\nfunc stringToFloatArrayBySpaceAndPeriod(_ str: String) -> [Float] {\n    return str.split { $0 == \" \" || $0 == \".\" }.compactMap { Float($0) }\n}",
      "/// Returns the sum of the squares of the elements in the array.\n///\n/// - Parameter array: The array to sum the squares of.\n/// - Returns: The sum of the squares of the elements in the array.\nfunc sumOfSquares(_ array: [Int]) -> Int {\n    return array.reduce(0) { $0 + $1 * $1 }\n}\n\n/// Returns the sum of the squares of the elements in the array.\n///\n/// - Parameter array: The array to sum the squares of.\n/// - Returns: The sum of the squares of the elements in the array.\nfunc sumOfSquares(_ array: [Int]) -> Int {\n    return array.reduce(0) { $0 + $1 * $1 }\n}\n\n/// Returns the sum of the squares of the elements in the array.\n///\n/// - Parameter array: The array to sum the squares of.\n/// - Returns: The sum of the squares of the elements in the array.\nfunc sumOfSquares(_ array: [Int]) -> Int {\n    return array.reduce(0) {",
      "/// Returns a string representation of a number in percentage format.\n/// - Parameter number: The number to convert to percentage.\n/// - Returns: A string representation of the number in percentage format.\nfunc toPercentage(_ number: Double) -> String {\n    return String(format: \"%.2f%%\", number * 100)\n}\n\n\nfunc toPercentage(_ number: Double) -> String {\n    return String(format: \"%.2f%%\", number * 100)\n}\n\n/// Returns a string representation of a number in percentage format.\n/// - Parameter number: The number to convert to percentage.\n/// - Returns: A string representation of the number in percentage format.\nfunc toPercentage(_ number: Double) -> String {\n    return String(format: \"%.2f%%\", number * 100)\n}\n\nfunc toPercentage(_ number: Double) -> String {\n    return String(format: \"%.2f%%\", number * 100)\n}\n\nfunc toPercentage(_ number: Double) -> String {\n    return",
      "/// Returns the product of all numbers in the given string.\n///\n/// - Parameter str: A string of numbers separated by spaces.\n/// - Returns: The product of all numbers in the string.\n///\n/// Example usage:\n///\n/// ```\n/// let str = \"1 2 3 4\"\n/// let product = productOfNumbersInString(str)\n/// // product is 24\n/// ```\nfunc productOfNumbersInString(_ str: String) -> Double {\n    let numbers = str.split(separator: \" \").compactMap { Double($0) }\n    return numbers.reduce(1, *)\n}",
      "/// Returns whether two strings are anagrams of each other.\n/// - Parameter str1: The first string to compare.\n/// - Parameter str2: The second string to compare.\n/// - Returns: Whether the two strings are anagrams of each other.\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.lowercased().sorted() == str2.lowercased().sorted()\n}\n\n/// Returns whether two strings are anagrams of each other.\n/// - Parameter str1: The first string to compare.\n/// - Parameter str2: The second string to compare.\n/// - Returns: Whether the two strings are anagrams of each other.\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.lowercased().sorted() == str2.lowercased().sorted()\n}",
      "/// Returns the angle of the hour hand in degrees.\n///\n/// - hour: Hour in 24 hour format.\n/// - minutes: Minutes in 24 hour format.\n///\n/// - Returns: The angle of the hour hand in degrees.\nfunc hourHandAngle(hour: Int, minutes: Int) -> Double {\n    let hourPosition = Double(hour % 12) * 30 + Double(minutes) * 0.5\n    return hourPosition\n}\n\nfunc minuteHandAngle(minute: Int, seconds: Int) -> Double {\n    let minutePosition = Double(minute) * 6 + Double(seconds) / 10\n    return minutePosition\n}\n\n/// Returns the angle of the minute hand in degrees.\n///\n/// - minute: Minute in 24 hour format.\n/// - seconds: Seconds in 24 hour format.\n///\n/// - Returns: The angle of the minute hand in degrees.\nfunc minuteHandAngle(minute: Int, seconds: Int) -> Double {\n    let minutePosition = Double(minute) * 6 + Double",
      "/// Returns an array of strings, each of which represents the number in a certain format.\n/// - Parameter array: An array of numbers.\n/// - Parameter precision: The number of digits after the decimal point to use.\n/// - Returns: An array of strings, each of which represents the number in a certain format.\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}\n\n/// Returns an array of strings, each of which represents the number in a certain format.\n/// - Parameter array: An array of numbers.\n/// - Parameter precision: The number of digits after the decimal point to use.\n/// - Returns: An array of strings, each of which represents the number in a certain format.\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}",
      "/// Returns a keyset of all the keys in the dictionary that have a value greater than the given threshold.\n/// - Parameters:\n///   - dictionary: A dictionary of keys and values.\n///   - threshold: A value greater than which all keys will be returned.\n/// - Returns:\n///   - A keyset of all the keys in the dictionary that have a value greater than the given threshold.\n///   - If no keys have a value greater than the given threshold, an empty keyset is returned.\nfunc keysWithValuesGreaterThanThreshold<Key, Value>(_ dictionary: [Key: Value], threshold: Value) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold }.map { $0.key }\n}\n\n\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nfunc keys",
      "/// Returns an array of tuples, where each tuple contains the element from each array.\n/// - Parameters:\n///   - a: An array of elements of type A.\n///   - b: An array of elements of type B.\n/// - Returns:\n///   - An array of tuples, where each tuple contains the element from each array.\n///   - The first tuple contains the element from `a`.\n///   - The second tuple contains the element from `b`.\n///   - The third tuple contains the element from `a`.\n///   - The fourth tuple contains the element from `b`.\n///   - The fifth tuple contains the element from `a`.\n///   - The sixth tuple contains the element from `b`.\n///   - The seventh tuple contains the element from `a`.\n///   - The eighth tuple contains the element from `b`.\n///   - The ninth tuple contains the element from `a`.\n///   - The tenth tuple contains the element from `b`.\n///   - The eleventh tuple contains the element from `a`.\n///   - The",
      "/// Returns a list of keys for the given value.\n/// - Parameter dictionary: The dictionary to search.\n/// - Parameter value: The value to search for.\n/// - Returns: A list of keys for the given value.\nfunc keysForValue<K, V: Equatable>(_ dictionary: [K: V], value: V) -> [K] {\n    return dictionary.filter { $0.value == value }.map { $0.key }\n}",
      "/// Returns the number of vowels in the given text.\n///\n/// - Parameter text: The text to count the vowels in.\n/// - Returns: The number of vowels in the text.\nfunc vowelCount(in text: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return text.filter { vowels.contains($0) }.count\n}",
      "/// Returns true if the input is a valid alphabetic character, false otherwise.\n///\n/// - Parameter input: The input string to test.\n/// - Returns: true if the input is a valid alphabetic character, false otherwise.\nfunc isAlphabetic(input: String) -> Bool {\n    return input.allSatisfy { $0.isLetter }\n}\n\n/// Returns true if the input is a valid alphabetic character, false otherwise.\n///\n/// - Parameter input: The input string to test.\n/// - Returns: true if the input is a valid alphabetic character, false otherwise.\nfunc isAlphabetic(input: String) -> Bool {\n    return input.allSatisfy { $0.isLetter }\n}\n\n/// Returns true if the input is a valid alphabetic character, false otherwise.\n///\n/// - Parameter input: The input string to test.\n/// - Returns: true if the input is a valid alphabetic character, false otherwise.\nfunc isAlphabetic(input: String) -> Bool",
      "/// Sorts an array of strings by length descending.\n/// - Parameters:\n///   - strings: An array of strings to sort.\n/// - Returns: An array of strings sorted by length descending.\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}",
      "/// Converts a string to an array of uppercase characters.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: An array of uppercase characters.\nfunc stringToUppercaseCharacters(input: String) -> [Character] {\n    return input.uppercased().map { $0 }\n}\n\n// The function takes a string and returns an array of uppercase characters.\n//\n// - Parameter input: The string to convert.\n// - Returns: An array of uppercase characters.\nfunc stringToUppercaseCharacters(input: String) -> [Character] {\n    return input.uppercased().map { $0 }\n}\n\n// The function takes a string and returns an array of uppercase characters.\n//\n// - Parameter input: The string to convert.\n// - Returns: An array of uppercase characters.\nfunc stringToUppercaseCharacters(input: String) -> [Character] {\n    return input.uppercased().map { $0 }\n}\n\n// The function takes a string and returns an array of uppercase characters.\n//",
      "// MARK: - Documentation\n/// Returns true if the given string is a valid IPv4 address.\n///\n/// - Parameter ip: The string to validate.\n/// - Returns: True if the string is a valid IPv4 address, false otherwise.\nfunc isValidIPv4(_ ip: String) -> Bool {\n    // ...\n}",
      "/// Copies a file from one location to another.\n///\n/// - Parameter from: The source file path.\n/// - Parameter to: The destination file path.\n/// - Returns: True if the copy was successful, false otherwise.\nfunc copyFile(from: String, to: String) -> Bool {\n    do {\n        try FileManager.default.copyItem(atPath: from, toPath: to)\n        return true\n    } catch {\n        return false\n    }\n}\n\n/// Copies a file from one location to another.\n///\n/// - Parameter from: The source file path.\n/// - Parameter to: The destination file path.\n/// - Returns: True if the copy was successful, false otherwise.\nfunc copyFile(from: String, to: String) throws -> Bool {\n    try FileManager.default.copyItem(atPath: from, toPath: to)\n    return true\n}\n\n/// Copies a file from one location to another.\n///\n/// - Parameter from: The source file path.\n/// - Parameter to: The destination file path.\n///",
      "/// Returns an array of characters from a given string, without punctuation.\n///\n/// - Parameter input: The string to clean.\n/// - Returns: An array of characters without punctuation.\nfunc stringToCharacterArrayWithoutPunctuation(input: String) -> [Character] {\n    let punctuationSet = CharacterSet.punctuationCharacters\n    let cleanedInput = input.components(separatedBy: punctuationSet).joined()\n    return Array(cleanedInput)\n}",
      "/// Counts the number of occurrences of the given character in the given string.\n/// - Parameter str: The string to search.\n/// - Parameter char: The character to search for.\n/// - Returns: The number of occurrences of the character in the string.\nfunc countCharacter(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}",
      "/// Insertion sort function\n///\n/// - Parameter array: array of integers to sort\n/// - Returns: sorted array\nfunc insertionSort<T: Comparable>(_ array: [T]) -> [T] {\n    var arr = array\n    for i in 1..<arr.count {\n        var j = i\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swapAt(j, j-1)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n/// Insertion sort function\n///\n/// - Parameter array: array of integers to sort\n/// - Returns: sorted array\nfunc insertionSort<T: Comparable>(_ array: [T]) -> [T] {\n    var arr = array\n    for i in 1..<arr.count {\n        var j = i\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swapAt(j, j-1)\n            j -= 1\n        }\n    }\n    return arr\n}",
      "/// Реализация метода Ланцоша для больших разреженных матриц\n///\n/// Принимает матрицу с нулевыми элементами и возвращает результат\n/// реализации метода Ланцоша для больших разреженных матриц.\n///\n/// - Parameters:\n///   - matrix: матрица с нулевыми элементами\n/// - Returns: результат реализации метода Ланцоша для больших разреженных матриц\nfunc lanczosAlgorithm(matrix: [[Double]]) -> [Double] {\n    // Реализация метода Ланцоша для больших разреженных матриц\n    return []\n}",
      "// Returns the factorial of n.\n//\n// - Parameter n: The number to compute the factorial of.\n// - Returns: The factorial of n.\n// - Complexity: O(n)\nfunc factorial(of n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(of: n - 1)\n}\n\n// Returns the factorial of n.\n//\n// - Parameter n: The number to compute the factorial of.\n// - Returns: The factorial of n.\n// - Complexity: O(n)\nfunc factorial(of n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(of: n - 1)\n}\n\n// Returns the factorial of n.\n//\n// - Parameter n: The number to compute the factorial of.\n// - Returns: The factorial of n.\n// - Complexity: O(n)\nfunc factorial(of n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(of",
      "/// Returns a dictionary with all the keys that satisfy the given condition.\n/// - Parameter condition: A function that takes a value and returns a Bool.\n/// - Returns: A dictionary with all the keys that satisfy the given condition.\nfunc filterDictionaryByValue<Key, Value>(_ dictionary: [Key: Value], condition: (Value) -> Bool) -> [Key: Value] where Key: Hashable {\n    return dictionary.filter { condition($0.value) }\n}\n\n/// Returns a dictionary with all the values that satisfy the given condition.\n/// - Parameter condition: A function that takes a value and returns a Bool.\n/// - Returns: A dictionary with all the values that satisfy the given condition.\nfunc filterDictionaryByValue<Key, Value>(_ dictionary: [Key: Value], condition: (Value) -> Bool) -> [Key: Value] where Key: Hashable {\n    return dictionary.filter { condition($0.value) }\n}\n\n/// Returns a dictionary with all the keys and values that satisfy the given condition.\n/// - Parameter condition: A function that takes a value and returns a",
      "/// Returns the longest string in the given array.\n///\n/// - Parameter array: An array of strings.\n/// - Returns: The longest string in the array, or nil if the array is empty.\nfunc longestString(inArray array: [String]) -> String? {\n    return array.max { $0.count < $1.count }\n}\n\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nfunc longestString(inArray array: [String]) -> String? {\n    return array.max { $0.count < $1.count }\n}\n\n/// Returns the longest string in the given array.\n///\n/// - Parameter array: An array of strings.\n/// - Returns: The longest string in the array, or nil if the array is empty.\n\n\nYou are documenting a Swift codebase. Given a function and a short description of where",
      "/// Returns the sum of the given array of numbers.\n/// - Parameter numbers: The array of numbers to sum.\n/// - Returns: The sum of the given numbers.\nfunc sumOfArray(_ numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}",
      "/// Returns a hexadecimal representation of the given decimal number.\n///\n/// - Parameter decimal: The decimal number to convert.\n/// - Returns: A string representation of the hexadecimal number.\nfunc decimalToHex(_ decimal: Int) -> String {\n    String(format: \"%02X\", decimal)\n}\n\n/// Returns a hexadecimal representation of the given decimal number.\n///\n/// - Parameter decimal: The decimal number to convert.\n/// - Returns: A string representation of the hexadecimal number.\nfunc decimalToHex(_ decimal: Int) -> String {\n    String(format: \"%02X\", decimal)\n}\n\n/// Returns a hexadecimal representation of the given decimal number.\n///\n/// - Parameter decimal: The decimal number to convert.\n/// - Returns: A string representation of the hexadecimal number.\nfunc decimalToHex(_ decimal: Int) -> String {\n    String(format: \"%02X\", decimal)\n}",
      "// ✅\n// Returns the geometric mean of the numbers\n//\n// - Parameters:\n//   - numbers: An array of numbers\n//\n// - Returns:\n//   - The geometric mean of the numbers\n\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/Double(numbers.count))\n}\n\n// ✅\n// Returns the geometric mean of the numbers\n//\n// - Parameters:\n//   - numbers: An array of numbers\n//\n// - Returns:\n//   - The geometric mean of the numbers\n//\n// - Discussion:\n//   - This function uses a for-loop to iterate over the numbers array, multiplying each number by the previous product, and then taking the square root of the product.\n//   - The function uses a helper function, pow, to calculate the power of a number.\n\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/",
      "/// Format a number as a currency.\n/// - Parameter amount: The number to format.\n/// - Returns: A string representing the formatted number.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount)\"\n}",
      "/// Converts a string to snake_case.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The snake_case string.\nfunc toSnakeCase(_ str: String) -> String {\n    return str.lowercased().replacingOccurrences(of: \" \", with: \"_\")\n}\n\n/// Converts a string to camelCase.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The camelCase string.\nfunc toCamelCase(_ str: String) -> String {\n    return str.lowercased().capitalized\n}\n\n/// Converts a string to PascalCase.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The PascalCase string.\nfunc toPascalCase(_ str: String) -> String {\n    return str.capitalized\n}\n\n/// Converts a string to kebab-case.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The kebab-case string.",
      "/// Returns a boolean indicating whether the given `text` contains the given `substring`.\n///\n/// - Parameters:\n///   - text: The text to search in.\n///   - substring: The substring to search for.\n/// - Returns:\n///   - true if the given `text` contains the given `substring`.\nfunc containsSubstring(_ text: String, _ substring: String) -> Bool {\n    return text.range(of: substring) != nil\n}",
      "/// Returns the contents of a file at the given path.\n///\n/// - Parameter path: The path to the file to read.\n/// - Returns: The contents of the file, or nil if the file could not be read.\nfunc readFile(at path: String) -> String? {\n    return try? String(contentsOfFile: path, encoding: .utf8)\n}",
      "/// Returns the first index of an element in an array.\n///\n/// - Parameter element: The element to find.\n/// - Parameter array: The array to search.\n/// - Returns: The index of the first occurrence of element in array, or nil if element is not found.\nfunc firstIndex<T>(of element: T, in array: [T]) -> Int? where T: Equatable {\n    return array.firstIndex(of: element)\n}\n\n/// Returns the first index of an element in an array.\n///\n/// - Parameter element: The element to find.\n/// - Parameter array: The array to search.\n/// - Returns: The index of the first occurrence of element in array, or nil if element is not found.\nfunc firstIndex<T>(of element: T, in array: [T]) -> Int? where T: Equatable {\n    return array.firstIndex(of: element)\n}\n\n/// Returns the first index of an element in an array.\n///\n/// - Parameter element: The element to find.\n/// - Parameter array: The array to search.\n///",
      "/// Finds the maximum value in a given array of numbers.\n/// - Parameter values: An array of numbers.\n/// - Returns: The maximum value in the array, or nil if the array is empty.\nfunc maxValue(in values: [Double]) -> Double? {\n    return values.max()\n}\n\n/// Finds the maximum value in a given array of numbers.\n/// - Parameter values: An array of numbers.\n/// - Returns: The maximum value in the array, or nil if the array is empty.\n/// - Note: This function does not check for nil values.\nfunc maxValue(in values: [Double]) -> Double? {\n    return values.max()\n}\n\n/// Finds the maximum value in a given array of numbers.\n/// - Parameter values: An array of numbers.\n/// - Returns: The maximum value in the array, or nil if the array is empty.\n/// - Note: This function does not check for nil values.\n/// - Note: This function is a Swift 3.0 extension.\nfunc maxValue(in values: [Double]) -> Double? {\n    return values.",
      "/// Counts the number of characters in a given string.\n///\n/// - str: The string to count characters in.\n/// - returns: The number of characters in the string.\nfunc countCharacters(_ str: String) -> Int {\n    return str.count\n}\n\n/// Counts the number of characters in a given string.\n///\n/// - str: The string to count characters in.\n/// - returns: The number of characters in the string.\nfunc countCharacters(_ str: String) -> Int {\n    return str.count\n}\n\n/// Counts the number of characters in a given string.\n///\n/// - str: The string to count characters in.\n/// - returns: The number of characters in the string.\nfunc countCharacters(_ str: String) -> Int {\n    return str.count\n}",
      "/// Generates a random alphanumeric string of the given length.\n/// - Parameter length: The length of the string to generate.\n/// - Returns: A random alphanumeric string of the given length.\nfunc generateRandomAlphaNumericString(length: Int) -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).compactMap { _ in characters.randomElement() })\n}",
      "/// Determines whether a given string is a binary string with leading zeros.\n///\n/// - Parameter str: The string to check.\n/// - Returns: `true` if the string is a binary string with leading zeros, `false` otherwise.\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}",
      "/// Returns a flattened version of a 2D array.\n///\n/// - Parameter matrix: The 2D array to flatten.\n///\n/// - Returns: A flattened version of the 2D array.\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}",
      "/// Returns the sum of the squares of the numbers from 1 to the given number.\n///\n/// - Parameter upTo: The number to sum to.\n/// - Returns: The sum of the squares of the numbers from 1 to the given number.\nfunc sumOfSquares(upTo n: Int) -> Int {\n    return (1...n).map { $0 * $0 }.reduce(0, +)\n}",
      "/// Checks if the given string is a valid IPv4 address.\n///\n/// - Parameter text: The string to check.\n/// - Returns: `true` if the string is a valid IPv4 address, `false` otherwise.\nfunc isValidIPv4(_ text: String) -> Bool {\n    let components = text.split(separator: \".\")\n    guard components.count == 4 else { return false }\n    return components.allSatisfy {\n        guard let number = Int($0), (0...255).contains(number) else { return false }\n        return true\n    }\n}\n\n/// Checks if the given string is a valid IPv4 address.\n///\n/// - Parameter text: The string to check.\n/// - Returns: `true` if the string is a valid IPv4 address, `false` otherwise.\n///\n/// ## Example\n///\n/// ```swift\n/// let validIPv4 = \"192.168.1.1\"\n/// let invalidIPv4 = \"192.168.1.1.1\"",
      "/// Checks if a number is prime.\n/// - Parameter number: The number to check.\n/// - Returns: True if the number is prime, false otherwise.\nfunc isPrimeNumber(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}",
      "func startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}\n\n/// Returns true if the given text starts with a digit.\n///\n/// - Parameter text: The text to check.\n/// - Returns: True if the text starts with a digit.\nfunc startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}\n\nfunc startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}\n\nfunc startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}\n\nfunc startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}\n\nfunc startsWithDigit(_ text: String) -> B",
      "/// Converts a string to an array of floats separated by dots.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: An array of floats.\nfunc stringToFloatArrayByDots(_ str: String) -> [Float] {\n    return str.split(separator: \".\").compactMap { Float($0) }\n}",
      "/// Returns the difference between the square of the sum of a and b, and the sum of the squares of a and b.\n/// - Parameter a: The first number.\n/// - Parameter b: The second number.\n/// - Returns: The difference between the square of the sum of a and b, and the sum of the squares of a and b.\n///\n/// # Example\n///\n/// ```swift\n/// let result = squareDifference(2, 3)\n/// // result == 1\n/// ```\nfunc squareDifference(a: Int, b: Int) -> Int {\n    return (a + b) * (a + b) - (a * a + b * b)\n}\n\nfunc squareDifference(a: Int, b: Int) -> Int {\n    return (a + b) * (a + b) - (a * a + b * b)\n}",
      "/// Creates a dictionary from the given pairs.\n///\n/// - Parameter pairs: A collection of key-value pairs.\n///\n/// - Returns: A dictionary containing the given pairs.\nfunc dictionaryFromPairs<K, V>(_ pairs: [(K, V)]) -> [K: V] {\n    return Dictionary(uniqueKeysWithValues: pairs)\n}",
      "/// Returns the average of the numbers in the array.\n/// - Parameter numbers: An array of numbers.\n/// - Returns: The average of the numbers in the array.\nfunc arrayAverage(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n\n/// Returns the average of the numbers in the array.\n/// - Parameter numbers: An array of numbers.\n/// - Returns: The average of the numbers in the array.\nfunc arrayAverage(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}",
      "/// Returns an array of characters in the given string.\n///\n/// - str: The string to convert to an array of characters.\n///\n/// Returns: An array of characters in the given string.\nfunc stringToCharacterArray(str: String) -> [Character] {\n    return Array(str)\n}",
      "/// Returns the number of possible combinations of k elements from n elements in a set.\n///\n/// - Parameter n: The number of elements in the set.\n/// - Parameter k: The number of elements to choose from the set.\n///\n/// # Example\n///\n/// ```\n/// combinations(5, 2) // 10\n/// ```\nfunc combinations(n: Int, k: Int) -> Int {\n    func factorial(_ num: Int) -> Int {\n        return (1...num).reduce(1, *)\n    }\n    return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\n\nfunc combinations(n: Int, k: Int) -> Int {\n    func factorial(_ num: Int) -> Int {\n        return (1...num).reduce(1, *)\n    }\n    return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nfunc combinations(n: Int, k: Int) -> Int {\n    func factorial(_ num: Int) -",
      "/// Returns the average of a list of numbers.\n///\n/// - Parameters:\n///   - numbers: A list of numbers.\n/// - Returns:\n///   - The average of the numbers.\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n\n/// Returns the average of a list of numbers.\n///\n/// - Parameters:\n///   - numbers: A list of numbers.\n/// - Returns:\n///   - The average of the numbers.\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n\n/// Returns the average of a list of numbers.\n///\n/// - Parameters:\n///   - numbers: A list of numbers.\n/// - Returns:\n///   - The average of the numbers.\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n\n/// Returns",
      "/// Returns true if the input string contains only alphanumeric characters.\n///\n/// - Parameter input: The input string to check.\n/// - Returns: True if the input string contains only alphanumeric characters.\nfunc isAlphaNumeric(input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) != nil\n}\n\n\nfunc isAlphaNumeric(input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) != nil\n}\n\n/// Returns true if the input string contains only alphanumeric characters.\n///\n/// - Parameter input: The input string to check.\n/// - Returns: True if the input string contains only alphanumeric characters.\nfunc isAlphaNumeric(input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) != nil\n}\n\n\nfunc isAlphaNumeric(input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) !",
      "/// Returns an array of characters from a string.\n///\n/// - Parameter input: A string to convert to an array of characters.\n/// - Returns: An array of characters.\nfunc stringToCharacterArray(input: String) -> [Character] {\n    return Array(input)\n}\n\nThe function takes a string and returns an array of characters.",
      "/// Returns the perimeter of a rectangle with the given `length` and `width`.\n///\n/// - Parameter length: The length of the rectangle.\n/// - Parameter width: The width of the rectangle.\n/// - Returns: The perimeter of the rectangle.\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}\n\n\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}\n\n/// Returns the perimeter of a rectangle with the given `length` and `width`.\n///\n/// - Parameter length: The length of the rectangle.\n/// - Parameter width: The width of the rectangle.\n/// - Returns: The perimeter of the rectangle.\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}\n\n\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}\n\n\nfunc rectanglePer",
      "/// Converts a string array to an int array.\n///\n/// - Parameter array: The string array to convert.\n/// - Returns: An int array, or nil if the string array is empty.\nfunc stringArrayToIntArray(_ array: [String]) -> [Int]? {\n    return array.compactMap { Int($0) }\n}",
      "// Removes all digits from a string.\n//\n// - Parameter text: The string to remove digits from.\n// - Returns: A string with all digits removed.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}"
    ],
    "REFERENCES": [
      [
        "/// Генерирует случайный элемент из массива строк.\n/// - Parameter array: Массив строк.\n/// - Returns: Случайный элемент из массива.\nfunc randomElementFromStringArray(_ array: [String]) -> String? {\n    return array.randomElement()\n}"
      ],
      [
        "/// Возвращает число, которое является квадратным корнем из заданного числа.\n/// - Parameter number: Число.\n/// - Returns: Квадратный корень числа.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}"
      ],
      [
        "/// Проверяет, является ли массив палиндромом.\n/// - Parameter array: Массив элементов.\n/// - Returns: true, если массив читается одинаково в обе стороны.\nfunc isPalindrome<T: Equatable>(_ array: [T]) -> Bool {\n    return array == array.reversed()\n}"
      ],
      [
        "/// Проверяет, является ли строка допустимым email.\n/// - Parameter email: Строка для проверки.\n/// - Returns: true, если строка похожа на email.\nfunc isValidEmail(_ email: String) -> Bool {\n    let pattern = \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex?.firstMatch(in: email, options: [], range: NSRange(location: 0, length: email.utf16.count)) != nil\n}"
      ],
      [
        "/// Считает сумму цифр числа.\n/// - Parameter number: Число.\n/// - Returns: Сумма цифр.\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}"
      ],
      [
        "/// Возвращает количество уникальных элементов в массиве.\n/// - Parameter array: Входной массив.\n/// - Returns: Количество уникальных элементов.\nfunc countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}"
      ],
      [
        "/// Получает разницу между двумя датами в днях.\n/// - Parameters:\n///   - from: Начальная дата.\n///   - to: Конечная дата.\n/// - Returns: Разница в днях.\nfunc daysBetweenDates(from: Date, to: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: from, to: to)\n    return components.day ?? 0\n}"
      ],
      [
        "/// Проверяет, является ли массив уникальным (без повторов)\n/// - Parameter array: Массив элементов\n/// - Returns: true, если все элементы уникальны\nfunc isArrayUnique<T: Hashable>(_ array: [T]) -> Bool {\n    return Set(array).count == array.count\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом (игнорируя пробелы)\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является палиндромом\nfunc isPalindromeIgnoringSpaces(input: String) -> Bool {\n    let cleanedInput = input.replacingOccurrences(of: \" \", with: \"\").lowercased()\n    return cleanedInput == String(cleanedInput.reversed())\n}"
      ],
      [
        "/// Конвертирует минуты в часы и минуты.\n/// - Parameter minutes: Общее количество минут.\n/// - Returns: Кортеж (часы, минуты).\nfunc convertMinutes(_ minutes: Int) -> (hours: Int, minutes: Int) {\n    return (minutes / 60, minutes % 60)\n}"
      ],
      [
        "/// Проверяет, содержится ли подстрока в строке.\n/// - Parameters:\n///   - str: Строка.\n///   - substring: Подстрока.\n/// - Returns: `true`, если подстрока содержится в строке.\nfunc containsSubstring(_ str: String, _ substring: String) -> Bool {\n    return str.contains(substring)\n}"
      ],
      [
        "/// Подсчитывает количество элементов, превышающих заданное значение.\n/// - Parameters:\n///   - array: Массив чисел.\n///   - threshold: Порог.\n/// - Returns: Количество элементов.\nfunc countGreaterThan(_ array: [Int], threshold: Int) -> Int {\n    return array.filter { $0 > threshold }.count\n}"
      ],
      [
        "/// Находит медиану массива чисел.\n/// - Parameter array: Массив чисел.\n/// - Returns: Медиана массива.\nfunc medianOfArray(_ array: [Int]) -> Double? {\n    guard !array.isEmpty else { return nil }\n    let sorted = array.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2 - 1] + sorted[sorted.count / 2]) / 2.0\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}"
      ],
      [
        "/// Преобразует словарь в новый, где все значения инкрементируются на заданное число.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - increment: Число для инкрементации.\n/// - Returns: Новый словарь с инкрементированными значениями.\nfunc incrementDictionaryValues<Key>(_ dictionary: [Key: Int], by increment: Int) -> [Key: Int] where Key: Hashable {\n    return dictionary.mapValues { $0 + increment }\n}"
      ],
      [
        "/// Преобразует строку в массив целых чисел, используя запятую как разделитель\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив целых чисел\nfunc stringToIntArray(input: String) -> [Int]? {\n    return input.split(separator: \",\").compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }\n}"
      ],
      [
        "/// Генерирует уникальный идентификатор с помощью текущего времени.\n/// - Returns: Строка с уникальным идентификатором.\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Int(Date().timeIntervalSince1970))\n}"
      ],
      [
        "/// Получает текущий день недели в строковом виде.\n/// - Returns: Название дня недели.\nfunc currentDayOfWeek() -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"EEEE\"\n    return formatter.string(from: Date())\n}"
      ],
      [
        "/// Переводит температуру из Фаренгейтов в Цельсии.\n/// - Parameter fahrenheit: Температура в Фаренгейтах.\n/// - Returns: Температура в Цельсиях.\nfunc fahrenheitToCelsius(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}"
      ],
      [
        "/// Считает количество согласных букв в строке\n/// - Parameter text: Входная строка\n/// - Returns: Количество согласных\nfunc countConsonants(text: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.lowercased().filter { $0.isLetter && !vowels.contains($0) }.count\n}"
      ],
      [
        "/// Проверяет, является ли строка числом с плавающей запятой\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является числом с плавающей запятой, иначе `false`\nfunc isFloat(input: String) -> Bool {\n    return Float(input) != nil\n}"
      ],
      [
        "/// Конвертирует секунды в дни, часы, минуты и секунды\nfunc convertSeconds(_ seconds: Int) -> (days: Int, hours: Int, minutes: Int, seconds: Int) {\n    var remaining = seconds\n    let days = remaining / 86400\n    remaining %= 86400\n    let hours = remaining / 3600\n    remaining %= 3600\n    let minutes = remaining / 60\n    remaining %= 60\n    return (days, hours, minutes, remaining)\n}"
      ],
      [
        "/// Генерирует случайное имя пользователя\n/// - Returns: Строка с псевдослучайным именем\nfunc generateUsername() -> String {\n    let adjectives = [\"Fast\", \"Cool\", \"Silent\", \"Smart\"]\n    let animals = [\"Fox\", \"Wolf\", \"Bear\", \"Eagle\"]\n    return \"\\(adjectives.randomElement()!)\\(animals.randomElement()!)\\(Int.random(in: 10...99))\"\n}"
      ],
      [
        "/// Генерирует массив простых чисел до N (решето Эратосфена).\n/// - Parameter n: Верхняя граница.\n/// - Returns: Массив простых чисел.\nfunc sieveOfEratosthenes(_ n: Int) -> [Int] {\n    guard n >= 2 else { return [] }\n    var sieve = Array(repeating: true, count: n+1)\n    sieve[0] = false\n    sieve[1] = false\n    for i in 2...Int(Double(n).squareRoot()) {\n        if sieve[i] {\n            for j in stride(from: i*i, through: n, by: i) {\n                sieve[j] = false\n            }\n        }\n    }\n    return sieve.enumerated().filter { $0.element }.map { $0.offset }\n}"
      ],
      [
        "/// Вычисляет расстояние Левенштейна между двумя строками\nfunc levenshteinDistance(_ a: String, _ b: String) -> Int {\n    let empty = [Int](repeating: 0, count: b.count + 1)\n    var matrix = (0...a.count).map { [$0] + empty }\n    \n    for (i, aChar) in a.enumerated() {\n        for (j, bChar) in b.enumerated() {\n            matrix[i+1][j+1] = aChar == bChar ? \n                matrix[i][j] : \n                min(matrix[i][j], matrix[i][j+1], matrix[i+1][j]) + 1\n        }\n    }\n    return matrix.last?.last ?? 0\n}"
      ],
      [
        "/// Вычисляет сумму всех делителей числа\nfunc sumOfDivisors(_ number: Int) -> Int {\n    guard number > 0 else { return 0 }\n    return (1...number).filter { number % $0 == 0 }.reduce(0, +)\n}"
      ],
      [
        "/// Находит наименьший общий кратный двух чисел\n/// - Parameters:\n///   - a: Первое число\n///   - b: Второе число\n/// - Returns: НОК\nfunc lcm(_ a: Int, _ b: Int) -> Int {\n    return abs(a * b) / gcd(a, b)\n}"
      ],
      [
        "/// Проверяет условие для всех элементов массива.\n/// - Parameters:\n///   - array: Массив.\n///   - condition: Условие (замыкание).\n/// - Returns: `true`, если все элементы удовлетворяют условию.\nfunc allSatisfy<T>(_ array: [T], _ condition: (T) -> Bool) -> Bool {\n    return array.allSatisfy(condition)\n}"
      ],
      [
        "/// Преобразует строку в массив символов в обратном порядке\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов в обратном порядке\nfunc reverseCharacters(in input: String) -> [Character] {\n    return Array(input.reversed())\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом без учета регистра и пробелов.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка является палиндромом.\nfunc isPalindromeIgnoringSpacesAndCase(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// Возвращает строку с текущей датой в формате \"dd.MM.yyyy\"\n/// - Returns: Строка с датой\nfunc currentDateString() -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd.MM.yyyy\"\n    return formatter.string(from: Date())\n}"
      ],
      [
        "/// Реализует алгоритм BFS для поиска кратчайшего пути в матрице.\n/// - Parameters:\n///   - grid: Матрица (0 - пусто, 1 - препятствие).\n///   - start: Начальная точка (x, y).\n///   - end: Конечная точка (x, y).\n/// - Returns: Длина кратчайшего пути или nil.\nfunc bfsShortestPath(grid: [[Int]], start: (Int, Int), end: (Int, Int)) -> Int? {\n    // Реализация с использованием очереди и проверки соседних клеток\n}"
      ],
      [
        "/// Проверяет, является ли число нечётным.\n/// - Parameter number: Число.\n/// - Returns: true, если число нечётное.\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}"
      ],
      [
        "/// Проверяет, является ли число квадратом другого.\n/// - Parameters:\n///   - a: Число.\n///   - b: Возможный квадрат.\n/// - Returns: `true`, если b = a².\nfunc isSquare(_ a: Int, of b: Int) -> Bool {\n    return a * a == b\n}"
      ],
      [
        "/// Находит минимальное число в массиве\n/// - Parameter numbers: Массив чисел\n/// - Returns: Минимальное число в массиве\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}"
      ],
      [
        "/// Преобразует строку в нижний регистр\n/// - Parameter input: Строка для преобразования\n/// - Returns: Строка в нижнем регистре\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}"
      ],
      [
        "/// Проверяет, является ли переданное число целым и положительным.\n/// - Parameter number: Число для проверки.\n/// - Returns: `true`, если число положительное.\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}"
      ],
      [
        "/// Преобразует строку в массив слов, разделённых дефисами\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив слов\nfunc stringToWordsUsingDash(input: String) -> [String] {\n    return input.split(separator: \"-\").map { String($0) }\n}"
      ],
      [
        "/// Возвращает ключи, которые не содержатся в другом словаре.\n/// - Parameters:\n///   - dict1: Первый словарь.\n///   - dict2: Второй словарь.\n/// - Returns: Массив ключей, которые присутствуют в первом, но отсутствуют во втором.\nfunc keysInFirstNotInSecond<Key, Value>(_ dict1: [Key: Value], dict2: [Key: Value]) -> [Key] where Key: Hashable {\n    return Array(dict1.keys.filter { !dict2.keys.contains($0) })\n}"
      ],
      [
        "/// Находит максимальное число в массиве\n/// - Parameter numbers: Массив чисел\n/// - Returns: Максимальное число\nfunc maxNumber(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}"
      ],
      [
        "/// Проверяет, является ли строка буквой\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является буквой, иначе `false`\nfunc isLetter(input: String) -> Bool {\n    return input.count == 1 && input.rangeOfCharacter(from: .letters) != nil\n}"
      ],
      [
        "/// Преобразует словарь в строку с форматом \"ключ: значение\", разделенную запятыми.\n/// - Parameter dictionary: Словарь.\n/// - Returns: Строка в формате \"ключ: значение\".\nfunc dictionaryToString<Key, Value>(_ dictionary: [Key: Value]) -> String where Key: Hashable {\n    return dictionary.map { \"\\($0.key): \\($0.value)\" }.joined(separator: \", \")\n}"
      ],
      [
        "/// Сортирует массив строк по алфавиту.\n/// - Parameter strings: Массив строк.\n/// - Returns: Отсортированный массив.\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}"
      ],
      [
        "/// Преобразует строку в массив целых чисел, разделённых двоеточиями.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив целых чисел.\nfunc stringToIntegerArrayByColon(_ str: String) -> [Int] {\n    return str.split(separator: \":\").compactMap { Int($0) }\n}"
      ],
      [
        "/// Удаляет указанный префикс из строки, если он есть.\n/// - Parameters:\n///   - string: Исходная строка.\n///   - prefix: Префикс для удаления.\n/// - Returns: Строка без префикса.\nfunc removePrefix(_ string: String, prefix: String) -> String {\n    return string.hasPrefix(prefix) ? String(string.dropFirst(prefix.count)) : string\n}"
      ],
      [
        "/// Разворачивает словарь (меняет местами ключи и значения).\n/// - Parameter dictionary: Словарь.\n/// - Returns: Новый словарь.\nfunc invertDictionary<K, V>(_ dictionary: [K: V]) -> [V: K] where K: Hashable, V: Hashable {\n    var result: [V: K] = [:]\n    for (key, value) in dictionary {\n        result[value] = key\n    }\n    return result\n}"
      ],
      [
        "/// Вычисляет сумму элементов множества.\n/// - Parameter set: Множество чисел.\n/// - Returns: Сумма элементов множества.\nfunc sumOfSet(_ set: Set<Int>) -> Int {\n    return set.reduce(0, +)\n}"
      ],
      [
        "/// Преобразует строку в массив символов.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив символов.\nfunc stringToCharacterArray(_ str: String) -> [Character] {\n    return Array(str)\n}"
      ],
      [
        "/// Создает словарь частот символов строки.\n/// - Parameter text: Входная строка.\n/// - Returns: Словарь [символ: частота].\nfunc characterFrequencies(in text: String) -> [Character: Int] {\n    var result: [Character: Int] = [:]\n    for char in text {\n        result[char, default: 0] += 1\n    }\n    return result\n}"
      ],
      [
        "/// Объединяет два массива без дубликатов.\n/// - Parameters:\n///   - a: Первый массив.\n///   - b: Второй массив.\n/// - Returns: Объединенный массив без повторов.\nfunc mergeUnique<T: Hashable>(_ a: [T], _ b: [T]) -> [T] {\n    return Array(Set(a).union(b))\n}"
      ],
      [
        "/// Проверяет, является ли строка числом в двоичной системе счисления\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является числом в двоичной системе, иначе `false`\nfunc isBinary(input: String) -> Bool {\n    let binaryRegex = \"^[01]+$\"\n    let binaryTest = NSPredicate(format: \"SELF MATCHES %@\", binaryRegex)\n    return binaryTest.evaluate(with: input)\n}"
      ],
      [
        "/// Проверяет, заканчивается ли строка суффиксом.\n/// - Parameters:\n///   - str: Строка.\n///   - suffix: Суффикс.\n/// - Returns: `true`, если строка заканчивается суффиксом.\nfunc endsWith(_ str: String, _ suffix: String) -> Bool {\n    return str.hasSuffix(suffix)\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка палиндром.\nfunc isPalindrome(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// Вычисляет площадь многоугольника по формуле шнуровки.\n/// - Parameter points: Массив точек (x, y).\n/// - Returns: Площадь многоугольника.\nfunc polygonArea(_ points: [(x: Double, y: Double)]) -> Double {\n    let n = points.count\n    var area = 0.0\n    for i in 0..<n {\n        let j = (i + 1) % n\n        area += points[i].x * points[j].y\n        area -= points[j].x * points[i].y\n    }\n    return abs(area) / 2.0\n}"
      ],
      [
        "/// Возвращает число, увеличенное на 1.\n/// - Parameter number: Входное число.\n/// - Returns: Число, увеличенное на 1.\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}"
      ],
      [
        "/// Находит индекс Пикового элемента в массиве.\n/// - Parameter array: Массив чисел.\n/// - Returns: Индекс элемента, который больше соседей.\nfunc findPeakElement(_ array: [Int]) -> Int? {\n    guard !array.isEmpty else { return nil }\n    for i in 0..<array.count {\n        let prev = i > 0 ? array[i-1] : Int.min\n        let next = i < array.count-1 ? array[i+1] : Int.min\n        if array[i] >= prev && array[i] >= next { return i }\n    }\n    return nil\n}"
      ],
      [
        "/// Проверяет, является ли строка числовым значением с плавающей точкой.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка представляет собой число с плавающей точкой.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}"
      ],
      [
        "/// Конвертирует секунды в часы, минуты и секунды.\n/// - Parameter totalSeconds: Общее количество секунд.\n/// - Returns: Кортеж (часы, минуты, секунды).\nfunc secondsToTime(_ totalSeconds: Int) -> (hours: Int, minutes: Int, seconds: Int) {\n    return (totalSeconds / 3600, (totalSeconds % 3600) / 60, totalSeconds % 60)\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом, игнорируя пробелы и регистр.\n/// - Parameter text: Входная строка.\n/// - Returns: true, если строка палиндром.\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// Преобразует строку в массив чисел с плавающей точкой, разделённых пробелами и точками.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив чисел с плавающей точкой.\nfunc stringToFloatArrayBySpaceAndPeriod(_ str: String) -> [Float] {\n    return str.split { $0 == \" \" || $0 == \".\" }.compactMap { Float($0) }\n}"
      ],
      [
        "/// Вычисляет сумму квадратов чисел в массиве.\n/// - Parameter array: Массив чисел.\n/// - Returns: Сумма квадратов чисел.\nfunc sumOfSquares(_ array: [Int]) -> Int {\n    return array.reduce(0) { $0 + $1 * $1 }\n}"
      ],
      [
        "/// Преобразует число в строку с процентами.\n/// - Parameter number: Число.\n/// - Returns: Строка с процентами.\nfunc toPercentage(_ number: Double) -> String {\n    return String(format: \"%.2f%%\", number * 100)\n}"
      ],
      [
        "/// Преобразует строку в массив чисел с плавающей точкой и возвращает их произведение.\n/// - Parameter str: Входная строка.\n/// - Returns: Произведение чисел в строке.\nfunc productOfNumbersInString(_ str: String) -> Double {\n    let numbers = str.split(separator: \" \").compactMap { Double($0) }\n    return numbers.reduce(1, *)\n}"
      ],
      [
        "/// Проверяет, является ли строка анаграммой другой строки.\n/// - Parameters:\n///   - str1: Первая строка.\n///   - str2: Вторая строка.\n/// - Returns: `true`, если строки являются анаграммами.\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.lowercased().sorted() == str2.lowercased().sorted()\n}"
      ],
      [
        "/// Вычисляет угол между часовой стрелкой и 12 часами\nfunc hourHandAngle(hour: Int, minutes: Int) -> Double {\n    let hourPosition = Double(hour % 12) * 30 + Double(minutes) * 0.5\n    return hourPosition\n}"
      ],
      [
        "/// Переводит массив чисел в массив строк, округляя до заданного количества знаков после запятой.\n/// - Parameters:\n///   - array: Массив чисел.\n///   - precision: Количество знаков после запятой.\n/// - Returns: Массив строк с округленными числами.\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}"
      ],
      [
        "/// Извлекает ключи, для которых значения больше заданного порога.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - threshold: Пороговое значение.\n/// - Returns: Массив ключей, чьи значения больше порога.\nfunc keysWithValuesGreaterThanThreshold<Key, Value>(_ dictionary: [Key: Value], threshold: Value) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold }.map { $0.key }\n}"
      ],
      [
        "/// Объединяет два массива в массив кортежей попарно.\n/// - Parameters:\n///   - a: Первый массив.\n///   - b: Второй массив.\n/// - Returns: Массив кортежей (элемент из a, элемент из b).\nfunc zipArrays<A, B>(_ a: [A], _ b: [B]) -> [(A, B)] {\n    return Array(zip(a, b))\n}"
      ],
      [
        "/// Возвращает все ключи словаря, соответствующие заданному значению.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - value: Значение для поиска.\n/// - Returns: Массив ключей.\nfunc keysForValue<K, V: Equatable>(_ dictionary: [K: V], value: V) -> [K] {\n    return dictionary.filter { $0.value == value }.map { $0.key }\n}"
      ],
      [
        "/// Подсчитывает количество гласных в строке.\n/// - Parameter text: Входная строка.\n/// - Returns: Количество гласных символов.\nfunc vowelCount(in text: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return text.filter { vowels.contains($0) }.count\n}"
      ],
      [
        "/// Проверяет, содержит ли строка только буквы\n/// - Parameter input: Входная строка\n/// - Returns: true, если только буквы\nfunc isAlphabetic(_ input: String) -> Bool {\n    return input.allSatisfy { $0.isLetter }\n}"
      ],
      [
        "/// Сортирует массив строк в порядке убывания длины.\n/// - Parameter strings: Массив строк.\n/// - Returns: Массив строк, отсортированных по убыванию длины.\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}"
      ],
      [
        "/// Преобразует строку в массив символов в верхнем регистре\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов в верхнем регистре\nfunc stringToUppercaseCharacters(input: String) -> [Character] {\n    return input.uppercased().map { $0 }\n}"
      ],
      [
        "/// Проверяет, является ли строка допустимым IP-адресом версии 4.\n/// - Parameter ip: Входная строка.\n/// - Returns: `true`, если строка является валидным IPv4-адресом.\nfunc isValidIPv4(_ ip: String) -> Bool {\n    let components = ip.split(separator: \".\")\n    guard components.count == 4 else { return false }\n    return components.allSatisfy { component in\n        if let num = Int(component), num >= 0, num <= 255 {\n            return true\n        }\n        return false\n    }\n}"
      ],
      [
        "/// Копирует файл из одного пути в другой.\n/// - Parameters:\n///   - from: Путь к исходному файлу.\n///   - to: Целевой путь.\n/// - Returns: true, если копирование прошло успешно.\nfunc copyFile(from: String, to: String) -> Bool {\n    do {\n        try FileManager.default.copyItem(atPath: from, toPath: to)\n        return true\n    } catch {\n        return false\n    }\n}"
      ],
      [
        "/// Преобразует строку в массив символов, исключая пробелы и знаки препинания\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов без пробелов и знаков препинания\nfunc stringToCharacterArrayWithoutPunctuation(input: String) -> [Character] {\n    let punctuationSet = CharacterSet.punctuationCharacters\n    let cleanedInput = input.components(separatedBy: punctuationSet).joined()\n    return Array(cleanedInput)\n}"
      ],
      [
        "/// Считает количество заданного символа в строке.\n/// - Parameters:\n///   - str: Строка.\n///   - char: Искомый символ.\n/// - Returns: Количество вхождений.\nfunc countCharacter(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}"
      ],
      [
        "/// Реализует алгоритм сортировки вставками.\n/// - Parameter array: Входной массив.\n/// - Returns: Отсортированный массив.\nfunc insertionSort<T: Comparable>(_ array: [T]) -> [T] {\n    var arr = array\n    for i in 1..<arr.count {\n        var j = i\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swapAt(j, j-1)\n            j -= 1\n        }\n    }\n    return arr\n}"
      ],
      [
        "/// Реализует алгоритм Ланцоша для приближенного вычисления собственных значений.\n/// - Parameter matrix: Квадратная матрица.\n/// - Returns: Приближенные собственные значения.\nfunc lanczosAlgorithm(matrix: [[Double]]) -> [Double] {\n    // Реализация метода Ланцоша для больших разреженных матриц\n    return []\n}"
      ],
      [
        "/// Находит факториал числа\n/// - Parameter n: Число для вычисления факториала\n/// - Returns: Факториал числа\nfunc factorial(of n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(of: n - 1)\n}"
      ],
      [
        "/// Возвращает только те элементы словаря, чьи значения удовлетворяют условию.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - condition: Условие для проверки значений.\n/// - Returns: Новый словарь с отфильтрованными элементами.\nfunc filterDictionaryByValue<Key, Value>(_ dictionary: [Key: Value], condition: (Value) -> Bool) -> [Key: Value] where Key: Hashable {\n    return dictionary.filter { condition($0.value) }\n}"
      ],
      [
        "/// Находит строку, которая является максимальной по количеству символов среди элементов массива\n/// - Parameter array: Массив строк\n/// - Returns: Строка с максимальной длиной\nfunc longestString(inArray array: [String]) -> String? {\n    return array.max { $0.count < $1.count }\n}"
      ],
      [
        "/// Возвращает сумму всех чисел в массиве.\n/// - Parameter numbers: Массив чисел.\n/// - Returns: Сумма чисел.\nfunc sumOfArray(_ numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}"
      ],
      [
        "/// Конвертирует десятичное число в шестнадцатеричное.\n/// - Parameter decimal: Десятичное число.\n/// - Returns: HEX-строка.\nfunc decimalToHex(_ decimal: Int) -> String {\n    String(format: \"%02X\", decimal)\n}"
      ],
      [
        "/// Вычисляет среднее геометрическое.\n/// - Parameter numbers: Массив чисел.\n/// - Returns: Среднее геометрическое.\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/Double(numbers.count))\n}"
      ],
      [
        "/// Форматирует число как валюту в текущей локали.\n/// - Parameter amount: Сумма.\n/// - Returns: Строка с валютой.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount)\"\n}"
      ],
      [
        "/// Преобразует строку в snake_case.\n/// - Parameter str: Входная строка.\n/// - Returns: Строка в snake_case.\nfunc toSnakeCase(_ str: String) -> String {\n    return str.lowercased().replacingOccurrences(of: \" \", with: \"_\")\n}"
      ],
      [
        "/// Проверяет, содержит ли строка заданную подстроку\n/// - Parameters:\n///   - text: Исходная строка\n///   - substring: Подстрока для поиска\n/// - Returns: `true`, если подстрока найдена\nfunc containsSubstring(text: String, substring: String) -> Bool {\n    return text.range(of: substring) != nil\n}"
      ],
      [
        "/// Считывает содержимое файла по указанному пути.\n/// - Parameter path: Путь к файлу.\n/// - Returns: Строка с содержимым файла или nil.\nfunc readFile(at path: String) -> String? {\n    return try? String(contentsOfFile: path, encoding: .utf8)\n}"
      ],
      [
        "/// Находит индекс первого вхождения элемента в массиве\n/// - Parameters:\n///   - array: Массив значений\n///   - element: Элемент для поиска\n/// - Returns: Индекс первого вхождения элемента или `nil`, если не найден\nfunc firstIndex<T>(of element: T, in array: [T]) -> Int? where T: Equatable {\n    return array.firstIndex(of: element)\n}"
      ],
      [
        "/// Находит наибольшее значение в массиве Double\n/// - Parameter values: Массив чисел\n/// - Returns: Максимальное значение или nil, если массив пуст\nfunc maxValue(in values: [Double]) -> Double? {\n    return values.max()\n}"
      ],
      [
        "/// Считает количество символов в строке.\n/// - Parameter str: Входная строка.\n/// - Returns: Количество символов.\nfunc countCharacters(_ str: String) -> Int {\n    return str.count\n}"
      ],
      [
        "/// Генерирует случайную строку заданной длины, состоящую из символов латинского алфавита и цифр.\n/// - Parameter length: Длина строки.\n/// - Returns: Случайная строка.\nfunc generateRandomAlphaNumericString(length: Int) -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).compactMap { _ in characters.randomElement() })\n}"
      ],
      [
        "/// Проверяет, является ли строка числом в двоичной системе с ведущими нулями.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка является двоичным числом с ведущими нулями.\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}"
      ],
      [
        "/// Преобразует двухмерный массив чисел в одномерный массив.\n/// - Parameter matrix: Двухмерный массив чисел.\n/// - Returns: Одномерный массив.\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}"
      ],
      [
        "/// Вычисляет сумму квадратов первых N чисел\nfunc sumOfSquares(upTo n: Int) -> Int {\n    return (1...n).map { $0 * $0 }.reduce(0, +)\n}"
      ],
      [
        "/// Проверяет, является ли строка строкой с действительным IP-адресом (IPv4).\n/// - Parameter text: Входная строка.\n/// - Returns: true, если строка является действительным IPv4.\nfunc isValidIPv4(_ text: String) -> Bool {\n    let components = text.split(separator: \".\")\n    guard components.count == 4 else { return false }\n    return components.allSatisfy {\n        guard let number = Int($0), (0...255).contains(number) else { return false }\n        return true\n    }\n}"
      ],
      [
        "/// Проверяет, является ли переданное число простым.\n/// - Parameter number: Число для проверки.\n/// - Returns: `true`, если число простое.\nfunc isPrimeNumber(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}"
      ],
      [
        "/// Проверяет, начинается ли строка с цифры.\n/// - Parameter text: Входная строка.\n/// - Returns: true, если строка начинается с цифры.\nfunc startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}"
      ],
      [
        "/// Преобразует строку в массив чисел с плавающей точкой, разделённых точками.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив чисел с плавающей точкой.\nfunc stringToFloatArrayByDots(_ str: String) -> [Float] {\n    return str.split(separator: \".\").compactMap { Float($0) }\n}"
      ],
      [
        "/// Вычисляет разницу между квадратом суммы и суммой квадратов двух чисел\n/// - Parameters:\n///   - a: Первое число\n///   - b: Второе число\n/// - Returns: (a + b)² - (a² + b²)\nfunc squareDifference(a: Int, b: Int) -> Int {\n    return (a + b) * (a + b) - (a * a + b * b)\n}"
      ],
      [
        "/// Преобразует массив кортежей (ключ, значение) в словарь.\n/// - Parameter pairs: Массив пар.\n/// - Returns: Словарь.\nfunc dictionaryFromPairs<K, V>(_ pairs: [(K, V)]) -> [K: V] {\n    return Dictionary(uniqueKeysWithValues: pairs)\n}"
      ],
      [
        "/// Вычисляет среднее значение массива.\n/// - Parameter numbers: Массив чисел.\n/// - Returns: Среднее значение.\nfunc arrayAverage(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}"
      ],
      [
        "/// Преобразует строку в массив символов\n/// - Parameter str: Строка для преобразования\n/// - Returns: Массив символов\nfunc stringToCharacterArray(str: String) -> [Character] {\n    return Array(str)\n}"
      ],
      [
        "/// Вычисляет количество комбинаций.\n/// - Parameters:\n///   - n: Общее количество элементов.\n///   - k: Размер комбинации.\n/// - Returns: Число комбинаций C(n, k).\nfunc combinations(n: Int, k: Int) -> Int {\n    func factorial(_ num: Int) -> Int {\n        return (1...num).reduce(1, *)\n    }\n    return factorial(n) / (factorial(k) * factorial(n - k))\n}"
      ],
      [
        "/// Вычисляет среднее значение чисел в массиве с плавающей точкой.\n/// - Parameter numbers: Массив чисел с плавающей точкой.\n/// - Returns: Среднее значение.\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}"
      ],
      [
        "/// Проверяет, является ли строка состоящей из цифр и символов\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка состоит только из цифр и символов, иначе `false`\nfunc isAlphaNumeric(input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) != nil\n}"
      ],
      [
        "/// Преобразует строку в массив символов\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов\nfunc stringToCharacterArray(input: String) -> [Character] {\n    return Array(input)\n}"
      ],
      [
        "/// Вычисляет периметр прямоугольника\n/// - Parameters:\n///   - length: Длина прямоугольника\n///   - width: Ширина прямоугольника\n/// - Returns: Периметр прямоугольника\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}"
      ],
      [
        "/// Преобразует массив строк в массив чисел.\n/// - Parameter array: Массив строк, содержащих числа.\n/// - Returns: Массив чисел.\nfunc stringArrayToIntArray(_ array: [String]) -> [Int]? {\n    return array.compactMap { Int($0) }\n}"
      ],
      [
        "/// Возвращает строку с удалёнными все цифры из текста.\n/// - Parameter text: Входная строка.\n/// - Returns: Строка без цифр.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}"
      ]
    ]
  }
}