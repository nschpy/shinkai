{
  "title": "deepseek-ai/deepseek-coder-1.3b-base-supervised-lora-tuning",
  "description": "–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä–Ω–æ–µ QLora –¥–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ deepseek-ai/deepseek-coder-1.3b-base —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–æ–º –∏ –æ—Ü–µ–Ω–∫–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º BLEU –∏ ROUGE.",
  "metrics": {
    "BLEU": {
      "bleu": 0.786342505066991,
      "precisions": [
        0.8693390841050361,
        0.8057091423428057,
        0.7592230478425238,
        0.7189689358889624
      ],
      "brevity_penalty": 1.0,
      "length_ratio": 1.0016520523573516,
      "translation_length": 7882,
      "reference_length": 7869
    },
    "ROUGE-L": {
      "rouge1": 0.9721858218181777,
      "rouge2": 0.9520496798206075,
      "rougeL": 0.9696840724677782,
      "rougeLsum": 0.9728198271953121
    },
    "PREDICTIONS": [
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n/// - Returns: `true`, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω\nfunc isUserLoggedIn() -> Bool {\n    guard let token = UserDefaults.standard.string(forKey: \"authToken\") else { return false }\n    // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞\n    return !token.isEmpty\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: –°–æ–æ–±—â–µ–Ω–∏–µ \"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –ò–≤–∞–Ω\"\nfunc generateGreetingMessage(for name: String) -> String {\n    let hour = Calendar.current.component(.hour, from: Date())\n    switch hour {\n    case 6..<12: return \"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, \\(name)\"\n    case 12..<18: return \"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, \\(name)\"\n    case 18..<23: return \"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, \\(name)\"\n    default: return \"–î–æ–±—Ä–æ–π –Ω–æ—á–∏, \\(name)\"\n    }\n}",
      "/// –í—ã–≤–æ–¥–∏—Ç —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∞–ª—é—Ç—ã.\n/// - Parameter amount: –°—É–º–º–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"—Ä—É–±–ª–∏ ‚ÇΩ\".\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    formatter.currencySymbol = \"‚ÇΩ\"\n    formatter.locale = Locale(identifier: \"ru_RU\")\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount) ‚ÇΩ\"\n}",
      "/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º.\n/// - Parameters:\n///   - message: –°—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\nfunc sendLocalPush(message: String) {\n    let content = UNMutableNotificationContent()\n    content.body = message\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    UNUserNotificationCenter.current().add(request)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–∫–∞—á—ã–≤–∞—é—â—É—é –º–æ–¥–∞–ª—å–Ω—É—é –≤—Å–ø–ª—ã–≤–∫—É.\n/// - Returns: true, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å.\nfunc shouldShowOnboarding() -> Bool {\n    return !UserDefaults.standard.bool(forKey: \"onboardingShown\")\n}",
      "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n/// - Parameters:\n///   - productId: ID —Ç–æ–≤–∞—Ä–∞.\nfunc saveLastViewedProduct(_ productId: String) {\n    UserDefaults.standard.set(productId, forKey: \"lastViewedProduct\")\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.\nfunc shouldShowPromoBanner() -> Bool {\n    let lastShown = UserDefaults.standard.object(forKey: \"lastPromoShown\") as? Date ?? .distantPast\n    return Date().timeIntervalSince(lastShown) > 86400\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ \"üìç 40.7143, -74.0059\"\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞\n///   - lon: –î–æ–ª–≥–æ—Ç–∞\n/// - Returns: \"üìç 40.7143, -74.0059\"\nfunc coordinatesToString(lat: Double, lon: Double) -> String {\n    return String(format: \"üìç %.4f, %.4f\", lat, lon)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—å.\n/// - Parameter profile: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.\n/// - Returns: `true`, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω.\nfunc isUserProfileComplete(profile: [String: String]) -> Bool {\n    let requiredKeys = [\"firstName\", \"lastName\", \"email\"]\n    return requiredKeys.allSatisfy { !(profile[$0]?.isEmpty ?? true) }\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –†–æ—Å—Å–∏–∏.\n/// - Parameter phone: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.\nfunc isValidRussianPhoneNumber(_ phone: String) -> Bool {\n    let pattern = \"^\\\\+7\\\\d{10}$\"\n    return phone.range(of: pattern, options: .regularExpression) != nil\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ –∑–Ω–∞–∫–æ–≤ ¬´‚òÜ¬ª.\n/// - Parameter rating: –†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 5.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞–∫–∏ ¬´‚òÜ¬ª.\nfunc starsForRating(_ rating: Double) -> String {\n    let filledStars = Int(rating)\n    let emptyStars = 5 - filledStars\n    return String(repeating: \"‚òÖ\", count: filledStars) + String(repeating: \"‚òÜ\", count: emptyStars)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.\n/// - Returns: `true`, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\nfunc isInternetAvailable() -> Bool {\n    // –£–ø—Ä–æ—â—ë–Ω–Ω–æ, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç Reachability\n    return true\n}",
      "/// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n/// - Parameter deliveryDate: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n/// - Returns: –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏\nfunc deliveryStatus(for deliveryDate: Date) -> String {\n    let calendar = Calendar.current\n    if calendar.isDateInToday(deliveryDate) {\n        return \"–°–µ–≥–æ–¥–Ω—è\"\n    } else if calendar.isDateInTomorrow(deliveryDate) {\n        return \"–ó–∞–≤—Ç—Ä–∞\"\n    } else {\n        return \"–ü–æ–∑–∂–µ\"\n    }\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏.\n/// - Parameter tags: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏.\nfunc hashtags(from tags: [String]) -> String {\n    return tags.map { \"#\\($0.lowercased())\" }.joined(separator: \" \")\n}",
      "/// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ UserDefaults\n/// - Parameters:\n///   - offset: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\nfunc saveScrollOffset(_ offset: Double) {\n    UserDefaults.standard.set(offset, forKey: \"productListScrollOffset\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–¥–ª—è –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤–∞) –≤ —Ä–∞–¥–∏—É—Å–µ 30 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\nfunc isWithinDeliveryZone(lat: Double, lon: Double) -> Bool {\n    let center = (lat: 55.75, lon: 37.61) // –ú–æ—Å–∫–≤–∞\n    let radiusKm = 30.0\n    let distance = sqrt(pow(center.lat - lat, 2) + pow(centerGenerate swift documentation: func isWithinDeliveryZone(lat: Double, lon: Double) -> Bool {\n    let center = (lat: 55.75, lon: 37.61) // –ú–æ—Å–∫–≤–∞\n    let radiusKm = 30.0\n    let distance = sqrt(pow(center.lat - lat, 2) + pow(center.lon - lon, 2)) * 111\n    return distance < radiusKm\n}\nOutput:\n/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–¥–ª—è –≥–æ—Ä–æ–¥–∞ –ú–æ",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–≤–µ–ª–æ–ø–ª–∏–Ω–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞\n/// - Parameter productId: ID —Ç–æ–≤–∞—Ä–∞\n/// - Returns: URL-–∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–≤–µ–ª–æ–ø–ª–∏–Ω–∫–∞\nfunc generateProductDeeplink(productId: String) -> URL? {\n    return URL(string: \"myapp://product/\\(productId)\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º.\n/// - Parameters:\n///   - lastViewedId: ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n///   - newMessageId: ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º.\nfunc hasNewSupportMessage(lastViewedId: String, newMessageId: String) -> Bool {\n    return lastViewedId != newMessageId\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.\n/// - Parameters:\n///   - current: –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n///   - target: –û–±—â–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n/// - Returns: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\nfunc progressPercentage(current: Double, target: Double) -> Int {\n    guard target > 0 else { return 0 }\n    return min(Int((current / target) * 100), 100)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n/// - Returns: `true`, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\nfunc isUserLoggedIn() -> Bool {\n    guard let token = UserDefaults.standard.string(forKey: \"authToken\") else { return false }\n    // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞\n    return !token.isEmpty\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏.\n/// - Parameter name: –ò–º—è.\n/// - Returns: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\nfunc generateGreetingMessage(for name: String) -> String {\n    let hour = Calendar.current.component(.hour, from: Date())\n    switch hour {\n    case 6..<12: return \"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, \\(name)\"\n    case 12..<18: return \"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, \\(name)\"\n    case 18..<23: return \"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, \\(name)\"\n    default: return \"–î–æ–±—Ä–æ–π –Ω–æ—á–∏, \\(name)\"\n    }\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"1234 ‚ÇΩ\"\n/// - Parameter amount: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –≤–∞–ª—é—Ç–æ–π\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    formatter.currencySymbol = \"‚ÇΩ\"\n    formatter.locale = Locale(identifier: \"ru_RU\")\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount) ‚ÇΩ\"\n}",
      "/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n/// - Parameters:\n///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ.\nfunc sendLocalPush(message: String) {\n    let content = UNMutableNotificationContent()\n    content.body = message\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    UNUserNotificationCenter.current().add(request)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.\nfunc shouldShowOnboarding() -> Bool {\n    return !UserDefaults.standard.bool(forKey: \"onboardingShown\")\n}",
      "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n/// - Parameters:\n///   - productId: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.\nfunc saveLastViewedProduct(_ productId: String) {\n    UserDefaults.standard.set(productId, forKey: \"lastViewedProduct\")\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª –∞–∫—Ü–∏—é –ø—Ä–æ–º–æ-–±–ª–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª –∞–∫—Ü–∏—é –ø—Ä–æ–º–æ-–±–ª–æ–∫–∞.\nfunc shouldShowPromoBanner() -> Bool {\n    let lastShown = UserDefaults.standard.object(forKey: \"lastPromoShown\") as? Date ?? .distantPast\n    return Date().timeIntervalSince(lastShown) > 86400\n}",
      "/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ \"üìç X.XXXX, Y.XXXX\"\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞\n///   - lon: –î–æ–ª–≥–æ—Ç–∞\n/// - Returns: \"üìç X.XXXX, Y.XXXX\"\nfunc coordinatesToString(lat: Double, lon: Double) -> String {\n    return String(format: \"üìç %.4f, %.4f\", lat, lon)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter profile: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: `true`, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\nfunc isUserProfileComplete(profile: [String: String]) -> Bool {\n    let requiredKeys = [\"firstName\", \"lastName\", \"email\"]\n    return requiredKeys.allSatisfy { !(profile[$0]?.isEmpty ?? true) }\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (___) ___-__-__.\n/// - Parameter phone: –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É.\nfunc isValidRussianPhoneNumber(_ phone: String) -> Bool {\n    let pattern = \"^\\\\+7\\\\d{10}$\"\n    return phone.range(of: pattern, options: .regularExpression) != nil\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ—Ü–µ–Ω–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (‚òÖ, ‚òÖ, ‚òÖ, ‚òÖ, ‚òÖ)\n/// - Parameters:\n///   - rating: –û—Ü–µ–Ω–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.0, 5.0]\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç–∑—ã–≤–æ–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (‚òÖ, ‚òÖ, ‚òÖ, ‚òÖ, ‚òÖ)\nfunc starsForRating(_ rating: Double) -> String {\n    let filledStars = Int(rating)\n    let emptyStars = 5 - filledStars\n    return String(repeating: \"‚òÖ\", count: filledStars) + String(repeating: \"‚òÜ\", count: emptyStars)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n/// - Returns: true, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω\nfunc isInternetAvailable() -> Bool {\n    // –£–ø—Ä–æ—â—ë–Ω–Ω–æ, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç Reachability\n    return true\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏.\n/// - Parameters:\n///   - deliveryDate: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏.\nfunc deliveryStatus(for deliveryDate: Date) -> String {\n    let calendar = Calendar.current\n    if calendar.isDateInToday(deliveryDate) {\n        return \"–°–µ–≥–æ–¥–Ω—è\"\n    } else if calendar.isDateInTomorrow(deliveryDate) {\n        return \"–ó–∞–≤—Ç—Ä–∞\"\n    } else {\n        return \"–ü–æ–∑–∂–µ\"\n    }\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Ö—ç—à-—Ç–µ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #<tag>\n/// - Parameter tags: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Ö—ç—à-—Ç–µ–≥–æ–≤\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Ö—ç—à-—Ç–µ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #<tag>\nfunc hashtags(from tags: [String]) -> String {\n    return tags.map { \"#\\($0.lowercased())\" }.joined(separator: \" \")\n}",
      "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞.\n/// - Parameters:\n///   - offset: –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞.\nfunc saveScrollOffset(_ offset: Double) {\n    UserDefaults.standard.set(offset, forKey: \"productListScrollOffset\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–¥–∞—á–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ –ú–æ—Å–∫–≤—ã.\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞.\n///   - lon: –î–æ–ª–≥–æ—Ç–∞.\n/// - Returns: true, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–∂–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–≥–∏–æ–Ω–∞.\nfunc isWithinDeliveryZone(lat: Double, lon: Double) -> Bool {\n    let center = (lat: 55.75, lon: 37.61) // –ú–æ—Å–∫–≤–∞\n    let radiusKm = 30.0\n    let distance = sqrt(pow(center.lat - lat, 2) + pow(center.lon - lon, 2)) * 111\n    return distance < radiusKm\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.\n/// - Parameter productId: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.\n/// - Returns: –û–±—ä–µ–∫—Ç URL –∏–ª–∏ nil, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.\nfunc generateProductDeeplink(productId: String) -> URL? {\n    return URL(string: \"myapp://product/\\(productId)\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n/// - Parameters:\n///   - lastViewedId: Id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n///   - newMessageId: Id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ.\nfunc hasNewSupportMessage(lastViewedId: String, newMessageId: String) -> Bool {\n    return lastViewedId != newMessageId\n}",
      "/// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n/// - Parameters:\n///   - current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n///   - target: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n/// - Returns: –ü—Ä–æ—Ü–µ–Ω—Ç.\nfunc progressPercentage(current: Double, target: Double) -> Int {\n    guard target > 0 else { return 0 }\n    return min(Int((current / target) * 100), 100)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL-–∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª–æ–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n/// - Parameter locale: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏.\n/// - Returns: URL-–∞–¥—Ä–µ—Å.\nfunc termsAndConditionsURL() -> URL? {\n    let locale = Locale.current.languageCode ?? \"en\"\n    return URL(string: \"https://example.com/terms_\\(locale).html\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–∞—á–∞–ª–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.\n/// - Parameters:\n///   - date: –î–∞—Ç–∞.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å.\nfunc isEventStarted(at date: Date) -> Bool {\n    return Date() >= date\n}",
      "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UserDefaults\n/// - Parameters:\n///   - theme: –¢–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nfunc saveUserTheme(_ theme: String) {\n    UserDefaults.standard.set(theme, forKey: \"appTheme\")\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞.\nfunc getUserTheme() -> String? {\n    return UserDefaults.standard.string(forKey: \"appTheme\")\n}",
      "/// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ UserDefaults.\nfunc clearUserSession() {\n    let keys = [\"authToken\", \"userProfile\", \"lastViewedProduct\"]\n    keys.forEach { UserDefaults.standard.removeObject(forKey: $0) }\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç–∑—ã–≤–æ–≤.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —à–∞–±–ª–æ–Ω–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.\nfunc generateFeedbackTemplate() -> String {\n    let systemVersion = UIDevice.current.systemVersion\n    let model = UIDevice.current.model\n    return \"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \\(model)\\n–í–µ—Ä—Å–∏—è iOS: \\(systemVersion)\\n–í–∞—à –æ—Ç–∑—ã–≤: \"\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç\nfunc hasReachedFreeLimit(count: Int) -> Bool {\n    let limit = 5\n    return count >= limit\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ \"dd MMM yyyy\"\n/// - Parameter date: –î–∞—Ç–∞\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ \"dd MMM yyyy\"\nfunc formatOrderDate(_ date: Date) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd MMM yyyy\"\n    return formatter.string(from: date)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏.\n/// - Parameters:\n///   - from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞.\n///   - to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.\nfunc daysBetween(_ from: Date, _ to: Date) -> Int {\n    return Calendar.current.dateComponents([.day], from: from, to: to).day ?? 0\n}",
      "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã–π –±–∞–Ω–Ω–µ—Ä.\n/// - Parameters:\n///   - id: ID –±–∞–Ω–Ω–µ—Ä–∞.\nfunc saveLastSeenBannerId(_ id: String) {\n    UserDefaults.standard.set(id, forKey: \"lastSeenBannerId\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ.\n/// - Parameters:\n///   - since: –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–∞—é—Ç—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.\nfunc shouldRefreshCache(since lastUpdate: Date) -> Bool {\n    return Date().timeIntervalSince(lastUpdate) > 6 * 3600\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n/// - Returns: `true`, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω.\nfunc isUserLoggedIn() -> Bool {\n    guard let token = UserDefaults.standard.string(forKey: \"authToken\") else { return false }\n    // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞\n    return !token.isEmpty\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –µ–≥–æ –¥–∞—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n/// - Parameter registrationDate: –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: `true`, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ 7 –¥–Ω–µ–π.\nfunc isNewUser(registrationDate: Date) -> Bool {\n    return Date().timeIntervalSince(registrationDate) < 7 * 86400\n}",
      "/// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\nfunc getAppLaunchCount() -> Int {\n    return UserDefaults.standard.integer(forKey: \"launchCount\")\n}",
      "/// –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\nfunc incrementAppLaunchCount() {\n    let count = getAppLaunchCount() + 1\n    UserDefaults.standard.set(count, forKey: \"launchCount\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ FaceID.\n/// - Returns: `true`, –µ—Å–ª–∏ FaceID –¥–æ—Å—Ç—É–ø–µ–Ω.\nfunc isFaceIDAvailable() -> Bool {\n    let context = LAContext()\n    var error: NSError?\n    return context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) && context.biometryType == .faceID\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –Ω–æ–º–µ—Ä—É.\n/// - Parameter month: –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (1-12).\n/// - Returns: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞.\nfunc monthName(for month: Int) -> String {\n    let formatter = DateFormatter()\n    formatter.locale = Locale(identifier: \"ru_RU\")\n    return formatter.monthSymbols[safe: month - 1] ?? \"\"\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter userId: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: URL –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ nil, –µ—Å–ª–∏ URL –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è.\nfunc ordersHistoryURL(for userId: String) -> URL? {\n    return URL(string: \"https://api.example.com/orders?user=\\(userId)\")\n}",
      "/// –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, —è–≤–ª—è—é—â–µ–µ—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–ª–∞–≥ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω—ã–º\n/// - Returns: true, –µ—Å–ª–∏ —Ç–µ–º–∞ —Å–≤–µ—Ç–ª–∞—è –≤–∫–ª—é—á–µ–Ω–∞\nfunc isDarkModeEnabled() -> Bool {\n    return UserDefaults.standard.bool(forKey: \"darkMode\")\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —É –≤–∞—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.\nfunc isLocationAccessGranted() -> Bool {\n    return CLLocationManager.authorizationStatus() == .authorizedWhenInUse || CLLocationManager.authorizationStatus() == .authorizedAlways\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∏–Ω—É—Ç:—Å–µ–∫—É–Ω–¥—ã\n/// - Parameter seconds: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n/// - Returns: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã\nfunc formatTime(seconds: Int) -> String {\n    return String(format: \"%02d:%02d\", seconds / 60, seconds % 60)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è\n/// - Parameters:\n///   - attempts: –ß–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫\n/// - Returns: `true`, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫\nfunc isPinAttemptsLimitExceeded(_ attempts: Int) -> Bool {\n    return attempts >= 3\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n/// - Parameter status: –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n/// - Returns: \"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\", \"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\" –∏–ª–∏ \"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\".\nfunc deliveryStatusText(for status: String) -> String {\n    switch status {\n    case \"pending\": return \"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\"\n    case \"shipped\": return \"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\"\n    case \"delivered\": return \"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\"\n    default: return \"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\"\n    }\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\nfunc resetAppData() -> Bool {\n    if let appDomain = Bundle.main.bundleIdentifier {\n        UserDefaults.standard.removePersistentDomain(forName: appDomain)\n    }\n    return true\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è `ping`.\n/// - Parameter completion: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç.\nfunc pingServer(completion: @escaping (Bool) -> Void) {\n    let url = URL(string: \"https://api.example.com/ping\")!)\n    URLSession.shared.dataTask(with: url) { _, response, error in\n        let httpResponse = response as? HTTPURLResponse\n        completion(httpResponse?.statusCode == 200 && error == nil)\n    }.resume()\n}",
      "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameters:\n///   - languageCode: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"ru\").\nfunc savePreferredLanguage(_ languageCode: String) {\n    UserDefaults.standard.set(languageCode, forKey: \"preferredLanguage\")\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞\n/// - Returns: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —è–∑—ã–∫\nfunc getPreferredLanguage() -> String {\n    return UserDefaults.standard.string(forKey: \"preferredLanguage\") ?? \"ru\"\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π\nfunc isNonIntegerNumber(_ text: String) -> Bool {\n    if let number = Double(text) {\n        return floor(number) != number\n    }\n    return false\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—É—é —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.\n/// - Parameters:\n///   - character: –°–∏–º–≤–æ–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n///   - count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º.\nfunc repeatCharacter(_ character: Character, count: Int) -> String {\n    return String(repeating: String(character), count: count)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤ –º–∞—Å—Å–∏–≤–µ.\n/// - Parameters:\n///   - text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n///   - array: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è.\nfunc isUniqueString(_ text: String, in array: [String]) -> Bool {\n    return array.filter { $0 == text }.count == 1\n}",
      "/// –û–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ, –æ–∫—Ä—É–≥–ª—è—è –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n/// - Parameters:\n///   - text: –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º.\n///   - decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n/// - Returns: –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.\nfunc roundedNumber(from text: String, decimals: Int) -> Double? {\n    guard let number = Double(text) else { return nil }\n    return round(number * pow(10, Double(decimals))) / pow(10, Double(decimals))\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç—Ä–æ–∫–µ.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç—Ä–æ–∫–µ.\nfunc extractDigitsInOrder(from text: String) -> String {\n    return text.filter { $0.isNumber }\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–ª–±–æ–≤—Å–∫–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞\n/// - Returns: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–ª–±–æ–≤—Å–∫–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ\nfunc toCobolCase(_ text: String) -> String {\n    let words = text.split(separator: \" \").map { $0.lowercased() }\n    guard let first = words.first else { return \"\" }\n    return [first] + words.dropFirst().map { $0.capitalized }.joined(separator: \" \")\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ charactersToRemove, —É–¥–∞–ª–µ–Ω—ã.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - charactersToRemove: –°—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, –≥–¥–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ charactersToRemove, —É–¥–∞–ª–µ–Ω—ã.\nfunc removeCharactersFromString(_ text: String, charactersToRemove: String) -> String {\n    return text.filter { !charactersToRemove.contains($0) }\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º –±–µ–∑ –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–∏\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - —á–∏—Å–ª–æ –±–µ–∑ –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–∏\nfunc isWholeNumber(_ text: String) -> Bool {\n    return Int(text) != nil\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ substring –≤ —Ç–µ–∫—Å—Ç–µ.\n/// - Parameters:\n///   - substring: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n///   - text: –¢–µ–∫—Å—Ç.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞.\nfunc containsSubstring(_ substring: String, in text: String) -> Bool {\n    return text.contains(substring)\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã.\nfunc stringToCapitalizedWords(_ text: String) -> [String] {\n    return text.split(separator: \" \").map { $0.capitalized }\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∏ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ—Ç–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∏ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.\nfunc alternatingCase(_ text: String) -> String {\n    return String(text.enumerated().map { (index, character) in\n        index % 2 == 0 ? character.lowercased() : character.uppercased()\n    })\n}",
      "/// –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –∏–Ω–¥–µ–∫—Å –≤ —Ç–µ–∫—Å—Ç–µ, –∏–ª–∏ nil, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n/// - Parameters:\n///   - substring: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n///   - text: –¢–µ–∫—Å—Ç.\n/// - Returns: –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.\nfunc indexOfSubstring(_ substring: String, in text: String) -> Int? {\n    return text.range(of: substring)?.lowerBound.utf16Offset(in: text)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.\nfunc isAlphaOnlyPalindrome(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.\nfunc extractUppercaseLetters(from text: String) -> String {\n    return text.filter { $0.isUppercase }\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\nfunc isBinaryNumber(_ text: String) -> Bool {\n    return text.allSatisfy { $0 == \"0\" || $0 == \"1\" }\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å—Ç—Ä–æ–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.\n/// - Parameter text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.\nfunc capitalizeFirstLetter(_ text: String) -> String {\n    guard let first = text.first else { return text }\n    return first.uppercased() + text.dropFirst()\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤.\nfunc stringToCharArray(_ text: String) -> [Character] {\n    return Array(text)\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.\n/// - Parameters:\n///   - text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.\n///   - count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏.\nfunc repeatString(_ text: String, count: Int) -> String {\n    return String(repeating: text, count: count)\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã\".\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º.\nfunc isValidTime(_ text: String) -> Bool {\n    let pattern = \"^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$\"\n    return matchesRegex(text, pattern: pattern)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\nfunc extractDigitsAndDashes(from text: String) -> String {\n    return text.filter { $0.isNumber || $0 == \"-\" }\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\nfunc lowercaseLettersWithoutNumbers(from text: String) -> String {\n    return text.filter { $0.isLetter }.lowercased()\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É.\n/// - Parameter array: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\n/// - Returns: true, –µ—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É.\nfunc allStringsHaveEqualLength(_ array: [String]) -> Bool {\n    guard let firstLength = array.first?.count else { return true }\n    return array.allSatisfy { $0.count == firstLength }\n}",
      "/// –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\nfunc splitStringByCharacter(_ text: String, separator: Character) -> [String] {\n    return text.split(separator: separator).map { String($0) }\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º.\nfunc isHexadecimalNumber(_ text: String) -> Bool {\n    let pattern = \"^[0-9A-Fa-f]+$\"\n    return matchesRegex(text, pattern: pattern)\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É.\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"YYYY-MM-DD HH:MM:SS\".\n/// - Returns: –î–∞—Ç–∞ –∏–ª–∏ nil.\nfunc stringToDate(_ text: String) -> Date? {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n    return formatter.date(from: text)\n}",
      "/// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä.\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.\nfunc cleanString(_ text: String) -> String {\n    let charactersToRemove = CharacterSet.whitespacesAndNewlines.union(.punctuationCharacters)\n    return text.filter { !charactersToRemove.contains($0.unicodeScalars.first!) }\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - base: –ë–∞–∑–∞ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.\n/// - Returns: –ß–∏—Å–ª–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\nfunc stringToNumberWithBase(_ text: String, base: Int) -> Int? {\n    return Int(text, radix: base)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\nfunc countUniqueCharacters(in text: String) -> Int {\n    return Set(text).count\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.\nfunc uniqueCharactersOnly(in text: String) -> String {\n    let characterCount = text.reduce(into: [:]) { counts, char in counts[char, default: 0] += 1 }\n    return String(text.filter { characterCount[$0] == 1 })\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ email-–∞–¥—Ä–µ—Å–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–∏–º—è@–¥–æ–º–µ–Ω.–¥–æ–º–µ–Ω\".\n/// - Parameter text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è email-–∞–¥—Ä–µ—Å–æ–º.\nfunc isValidEmail(_ text: String) -> Bool {\n    let emailRegex = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\"\n    return matchesRegex(text, pattern: emailRegex)\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\nfunc extractNumbersFromString(_ text: String) -> String {\n    return text.filter { $0.isNumber }\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - precision: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\nfunc stringToPercentage(_ text: String, precision: Int) -> String? {\n    guard let number = Double(text) else { return nil }\n    let percentage = number * 100\n    return String(format: \"%.\\(precision)f%%\", percentage)\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –∑–∞–¥–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –∏–Ω–∞—á–µ.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.\nfunc alternatingUpperAndLowerCase(_ text: String) -> String {\n    return String(text.enumerated().map { (index, char) in\n        index % 2 == 0 ? char.lowercased() : char.uppercased()\n    })\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: `true`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.\nfunc isNumeric(_ text: String) -> Bool {\n    return Double(text) != nil\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É.\n/// - Parameter array: –ú–∞—Å—Å–∏–≤.\n/// - Returns: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Å—Å–∏–≤.\nfunc reverseArray<T>(_ array: [T]) -> [T] {\n    return array.reversed()\n}",
      "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è.\n/// - Parameters:\n///   - dictionary: –°–ª–æ–≤–∞—Ä—å.\n/// - Returns: –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ.\nfunc randomElementFromDictionary<Key, Value>(_ dictionary: [Key: Value]) -> (Key, Value)? where Key: Hashable {\n    return dictionary.randomElement()\n}",
      "/// –ù–∞—Ö–æ–¥–∏—Ç –∫–ª—é—á–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ.\n/// - Parameter dictionary: –°–ª–æ–≤–∞—Ä—å.\n/// - Returns: –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\nfunc keysWithMinValues<Key, Value>(_ dictionary: [Key: Value]) -> [Key] where Key: Hashable, Value: Comparable {\n    guard let minValue = dictionary.values.min() else { return [] }\n    return dictionary.filter { $0.value == minValue }.map { $0.key }\n}",
      "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –±—É–¥—É—â–µ–π.\n/// - Parameter date: –î–∞—Ç–∞.\n/// - Returns: `true`, –µ—Å–ª–∏ –¥–∞—Ç–∞ –±—É–¥—É—â–µ–π.\nfunc isFutureDate(_ date: Date) -> Bool {\n    return date > Date()\n}",
      "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.\n/// - Parameter str: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤.\nfunc stringToAlphabeticCharArray(_ str: String) -> [Character] {\n    return str.filter { $0.isLetter }\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏.\n/// - Parameters:\n///   - startDate: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞.\n///   - endDate: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\nfunc daysBetweenDates(startDate: Date, endDate: Date) -> Int {\n    return Calendar.current.dateComponents([.day], from: startDate, to: endDate).day ?? 0\n}",
      "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ.\n/// - Parameter str: –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞–º–∏.\n/// - Returns: –°—É–º–º–∞ —á–∏—Å–µ–ª.\nfunc sumOfNumbersInString(_ str: String) -> Int {\n    let numbers = str.split(separator: \" \").compactMap { Int($0) }\n    return numbers.reduce(0, +)\n}"
    ],
    "REFERENCES": [
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –≤ UserDefaults.\n/// - Returns: true, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç—ë–∫.\nfunc isUserLoggedIn() -> Bool {\n    guard let token = UserDefaults.standard.string(forKey: \"authToken\") else { return false }\n    // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞\n    return !token.isEmpty\n}"
      ],
      [
        "/// –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.\n/// - Parameter name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\nfunc generateGreetingMessage(for name: String) -> String {\n    let hour = Calendar.current.component(.hour, from: Date())\n    switch hour {\n    case 6..<12: return \"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, \\(name)\"\n    case 12..<18: return \"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, \\(name)\"\n    case 18..<23: return \"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, \\(name)\"\n    default: return \"–î–æ–±—Ä–æ–π –Ω–æ—á–∏, \\(name)\"\n    }\n}"
      ],
      [
        "/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –≤–∞–ª—é—Ç–æ–π.\n/// - Parameter amount: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–æ–º —Ä—É–±–ª—è.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    formatter.currencySymbol = \"‚ÇΩ\"\n    formatter.locale = Locale(identifier: \"ru_RU\")\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount) ‚ÇΩ\"\n}"
      ],
      [
        "/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n/// - Parameter message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\nfunc sendLocalPush(message: String) {\n    let content = UNMutableNotificationContent()\n    content.body = message\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    UNUserNotificationCenter.current().add(request)\n}"
      ],
      [
        "/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å onboarding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.\n/// - Returns: true, –µ—Å–ª–∏ onboarding –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.\nfunc shouldShowOnboarding() -> Bool {\n    return !UserDefaults.standard.bool(forKey: \"onboardingShown\")\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n/// - Parameter productId: ID —Ç–æ–≤–∞—Ä–∞.\nfunc saveLastViewedProduct(_ productId: String) {\n    UserDefaults.standard.set(productId, forKey: \"lastViewedProduct\")\n}"
      ],
      [
        "/// –û—Ü–µ–Ω–∏–≤–∞–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª –±–∞–Ω–Ω–µ—Ä –±–æ–ª–µ–µ —Å—É—Ç–æ–∫.\nfunc shouldShowPromoBanner() -> Bool {\n    let lastShown = UserDefaults.standard.object(forKey: \"lastPromoShown\") as? Date ?? .distantPast\n    return Date().timeIntervalSince(lastShown) > 86400\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ UI.\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞.\n///   - lon: –î–æ–ª–≥–æ—Ç–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\nfunc coordinatesToString(lat: Double, lon: Double) -> String {\n    return String(format: \"üìç %.4f, %.4f\", lat, lon)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter profile: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n/// - Returns: true, –µ—Å–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ.\nfunc isUserProfileComplete(profile: [String: String]) -> Bool {\n    let requiredKeys = [\"firstName\", \"lastName\", \"email\"]\n    return requiredKeys.allSatisfy { !(profile[$0]?.isEmpty ?? true) }\n}"
      ],
      [
        "/// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.\n/// - Parameter phone: –°—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä–∞.\n/// - Returns: true, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω.\nfunc isValidRussianPhoneNumber(_ phone: String) -> Bool {\n    let pattern = \"^\\\\+7\\\\d{10}$\"\n    return phone.range(of: pattern, options: .regularExpression) != nil\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 0 –¥–æ 5) –≤ —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏-–∑–≤–µ–∑–¥–∞–º–∏.\n/// - Parameter rating: –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –∏–∑ –∑–≤—ë–∑–¥.\nfunc starsForRating(_ rating: Double) -> String {\n    let filledStars = Int(rating)\n    let emptyStars = 5 - filledStars\n    return String(repeating: \"‚òÖ\", count: filledStars) + String(repeating: \"‚òÜ\", count: emptyStars)\n}"
      ],
      [
        "/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Å—Å–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\nfunc isInternetAvailable() -> Bool {\n    // –£–ø—Ä–æ—â—ë–Ω–Ω–æ, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç Reachability\n    return true\n}"
      ],
      [
        "/// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.\n/// - Parameter deliveryDate: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n/// - Returns: –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∫–∏: \"–°–µ–≥–æ–¥–Ω—è\", \"–ó–∞–≤—Ç—Ä–∞\", \"–ü–æ–∑–∂–µ\".\nfunc deliveryStatus(for deliveryDate: Date) -> String {\n    let calendar = Calendar.current\n    if calendar.isDateInToday(deliveryDate) {\n        return \"–°–µ–≥–æ–¥–Ω—è\"\n    } else if calendar.isDateInTomorrow(deliveryDate) {\n        return \"–ó–∞–≤—Ç—Ä–∞\"\n    } else {\n        return \"–ü–æ–∑–∂–µ\"\n    }\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏.\n/// - Parameter tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏.\nfunc hashtags(from tags: [String]) -> String {\n    return tags.map { \"#\\($0.lowercased())\" }.joined(separator: \" \")\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.\n/// - Parameter offset: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è.\nfunc saveScrollOffset(_ offset: Double) {\n    UserDefaults.standard.set(offset, forKey: \"productListScrollOffset\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º).\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞.\n///   - lon: –î–æ–ª–≥–æ—Ç–∞.\n/// - Returns: true, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ö–æ–¥—è—Ç –≤ —Ä–∞–¥–∏—É—Å.\nfunc isWithinDeliveryZone(lat: Double, lon: Double) -> Bool {\n    let center = (lat: 55.75, lon: 37.61) // –ú–æ—Å–∫–≤–∞\n    let radiusKm = 30.0\n    let distance = sqrt(pow(center.lat - lat, 2) + pow(center.lon - lon, 2)) * 111\n    return distance < radiusKm\n}"
      ],
      [
        "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è deeplink —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞.\n/// - Parameter productId: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.\n/// - Returns: URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.\nfunc generateProductDeeplink(productId: String) -> URL? {\n    return URL(string: \"myapp://product/\\(productId)\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n/// - Parameter lastViewedId: –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π ID.\n/// - Parameter newMessageId: ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\nfunc hasNewSupportMessage(lastViewedId: String, newMessageId: String) -> Bool {\n    return lastViewedId != newMessageId\n}"
      ],
      [
        "/// –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π).\n/// - Parameters:\n///   - current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n///   - target: –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞.\n/// - Returns: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100.\nfunc progressPercentage(current: Double, target: Double) -> Int {\n    guard target > 0 else { return 0 }\n    return min(Int((current / target) * 100), 100)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –≤ UserDefaults.\n/// - Returns: true, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç—ë–∫.\nfunc isUserLoggedIn() -> Bool {\n    guard let token = UserDefaults.standard.string(forKey: \"authToken\") else { return false }\n    // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞\n    return !token.isEmpty\n}"
      ],
      [
        "/// –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.\n/// - Parameter name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\nfunc generateGreetingMessage(for name: String) -> String {\n    let hour = Calendar.current.component(.hour, from: Date())\n    switch hour {\n    case 6..<12: return \"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, \\(name)\"\n    case 12..<18: return \"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, \\(name)\"\n    case 18..<23: return \"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, \\(name)\"\n    default: return \"–î–æ–±—Ä–æ–π –Ω–æ—á–∏, \\(name)\"\n    }\n}"
      ],
      [
        "/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –≤–∞–ª—é—Ç–æ–π.\n/// - Parameter amount: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–æ–º —Ä—É–±–ª—è.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    formatter.currencySymbol = \"‚ÇΩ\"\n    formatter.locale = Locale(identifier: \"ru_RU\")\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount) ‚ÇΩ\"\n}"
      ],
      [
        "/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n/// - Parameter message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\nfunc sendLocalPush(message: String) {\n    let content = UNMutableNotificationContent()\n    content.body = message\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    UNUserNotificationCenter.current().add(request)\n}"
      ],
      [
        "/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å onboarding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.\n/// - Returns: true, –µ—Å–ª–∏ onboarding –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.\nfunc shouldShowOnboarding() -> Bool {\n    return !UserDefaults.standard.bool(forKey: \"onboardingShown\")\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n/// - Parameter productId: ID —Ç–æ–≤–∞—Ä–∞.\nfunc saveLastViewedProduct(_ productId: String) {\n    UserDefaults.standard.set(productId, forKey: \"lastViewedProduct\")\n}"
      ],
      [
        "/// –û—Ü–µ–Ω–∏–≤–∞–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª –±–∞–Ω–Ω–µ—Ä –±–æ–ª–µ–µ —Å—É—Ç–æ–∫.\nfunc shouldShowPromoBanner() -> Bool {\n    let lastShown = UserDefaults.standard.object(forKey: \"lastPromoShown\") as? Date ?? .distantPast\n    return Date().timeIntervalSince(lastShown) > 86400\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ UI.\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞.\n///   - lon: –î–æ–ª–≥–æ—Ç–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\nfunc coordinatesToString(lat: Double, lon: Double) -> String {\n    return String(format: \"üìç %.4f, %.4f\", lat, lon)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter profile: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n/// - Returns: true, –µ—Å–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ.\nfunc isUserProfileComplete(profile: [String: String]) -> Bool {\n    let requiredKeys = [\"firstName\", \"lastName\", \"email\"]\n    return requiredKeys.allSatisfy { !(profile[$0]?.isEmpty ?? true) }\n}"
      ],
      [
        "/// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.\n/// - Parameter phone: –°—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä–∞.\n/// - Returns: true, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω.\nfunc isValidRussianPhoneNumber(_ phone: String) -> Bool {\n    let pattern = \"^\\\\+7\\\\d{10}$\"\n    return phone.range(of: pattern, options: .regularExpression) != nil\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 0 –¥–æ 5) –≤ —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏-–∑–≤–µ–∑–¥–∞–º–∏.\n/// - Parameter rating: –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –∏–∑ –∑–≤—ë–∑–¥.\nfunc starsForRating(_ rating: Double) -> String {\n    let filledStars = Int(rating)\n    let emptyStars = 5 - filledStars\n    return String(repeating: \"‚òÖ\", count: filledStars) + String(repeating: \"‚òÜ\", count: emptyStars)\n}"
      ],
      [
        "/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Å—Å–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\nfunc isInternetAvailable() -> Bool {\n    // –£–ø—Ä–æ—â—ë–Ω–Ω–æ, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç Reachability\n    return true\n}"
      ],
      [
        "/// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.\n/// - Parameter deliveryDate: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n/// - Returns: –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∫–∏: \"–°–µ–≥–æ–¥–Ω—è\", \"–ó–∞–≤—Ç—Ä–∞\", \"–ü–æ–∑–∂–µ\".\nfunc deliveryStatus(for deliveryDate: Date) -> String {\n    let calendar = Calendar.current\n    if calendar.isDateInToday(deliveryDate) {\n        return \"–°–µ–≥–æ–¥–Ω—è\"\n    } else if calendar.isDateInTomorrow(deliveryDate) {\n        return \"–ó–∞–≤—Ç—Ä–∞\"\n    } else {\n        return \"–ü–æ–∑–∂–µ\"\n    }\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏.\n/// - Parameter tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏.\nfunc hashtags(from tags: [String]) -> String {\n    return tags.map { \"#\\($0.lowercased())\" }.joined(separator: \" \")\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.\n/// - Parameter offset: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è.\nfunc saveScrollOffset(_ offset: Double) {\n    UserDefaults.standard.set(offset, forKey: \"productListScrollOffset\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º).\n/// - Parameters:\n///   - lat: –®–∏—Ä–æ—Ç–∞.\n///   - lon: –î–æ–ª–≥–æ—Ç–∞.\n/// - Returns: true, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ö–æ–¥—è—Ç –≤ —Ä–∞–¥–∏—É—Å.\nfunc isWithinDeliveryZone(lat: Double, lon: Double) -> Bool {\n    let center = (lat: 55.75, lon: 37.61) // –ú–æ—Å–∫–≤–∞\n    let radiusKm = 30.0\n    let distance = sqrt(pow(center.lat - lat, 2) + pow(center.lon - lon, 2)) * 111\n    return distance < radiusKm\n}"
      ],
      [
        "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è deeplink —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞.\n/// - Parameter productId: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.\n/// - Returns: URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.\nfunc generateProductDeeplink(productId: String) -> URL? {\n    return URL(string: \"myapp://product/\\(productId)\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n/// - Parameter lastViewedId: –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π ID.\n/// - Parameter newMessageId: ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\nfunc hasNewSupportMessage(lastViewedId: String, newMessageId: String) -> Bool {\n    return lastViewedId != newMessageId\n}"
      ],
      [
        "/// –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π).\n/// - Parameters:\n///   - current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n///   - target: –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞.\n/// - Returns: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100.\nfunc progressPercentage(current: Double, target: Double) -> Int {\n    guard target > 0 else { return 0 }\n    return min(Int((current / target) * 100), 100)\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Terms & Conditions –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞–ª–∏.\n/// - Returns: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\nfunc termsAndConditionsURL() -> URL? {\n    let locale = Locale.current.languageCode ?? \"en\"\n    return URL(string: \"https://example.com/terms_\\(locale).html\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n/// - Parameter date: –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å.\nfunc isEventStarted(at date: Date) -> Bool {\n    return Date() >= date\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n/// - Parameter theme: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\nfunc saveUserTheme(_ theme: String) {\n    UserDefaults.standard.set(theme, forKey: \"appTheme\")\n}"
      ],
      [
        "/// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n/// - Returns: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ nil.\nfunc getUserTheme() -> String? {\n    return UserDefaults.standard.string(forKey: \"appTheme\")\n}"
      ],
      [
        "/// –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\nfunc clearUserSession() {\n    let keys = [\"authToken\", \"userProfile\", \"lastViewedProduct\"]\n    keys.forEach { UserDefaults.standard.removeObject(forKey: $0) }\n}"
      ],
      [
        "/// –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n/// - Returns: –¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\nfunc generateFeedbackTemplate() -> String {\n    let systemVersion = UIDevice.current.systemVersion\n    let model = UIDevice.current.model\n    return \"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \\(model)\\n–í–µ—Ä—Å–∏—è iOS: \\(systemVersion)\\n–í–∞—à –æ—Ç–∑—ã–≤: \"\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n/// - Parameter count: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π.\n/// - Returns: true, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.\nfunc hasReachedFreeLimit(count: Int) -> Bool {\n    let limit = 5\n    return count >= limit\n}"
      ],
      [
        "/// –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.\n/// - Parameter date: –î–∞—Ç–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ \"dd MMM yyyy\".\nfunc formatOrderDate(_ date: Date) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd MMM yyyy\"\n    return formatter.string(from: date)\n}"
      ],
      [
        "/// –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏.\n/// - Parameters:\n///   - from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞.\n///   - to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\nfunc daysBetween(_ from: Date, _ to: Date) -> Int {\n    return Calendar.current.dateComponents([.day], from: from, to: to).day ?? 0\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞.\n/// - Parameter id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞–Ω–Ω–µ—Ä–∞.\nfunc saveLastSeenBannerId(_ id: String) {\n    UserDefaults.standard.set(id, forKey: \"lastSeenBannerId\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n/// - Parameter lastUpdate: –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n/// - Returns: true, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 6 —á–∞—Å–æ–≤.\nfunc shouldRefreshCache(since lastUpdate: Date) -> Bool {\n    return Date().timeIntervalSince(lastUpdate) > 6 * 3600\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –≤ UserDefaults.\n/// - Returns: true, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç—ë–∫.\nfunc isUserLoggedIn() -> Bool {\n    guard let token = UserDefaults.standard.string(forKey: \"authToken\") else { return false }\n    // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞\n    return !token.isEmpty\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).\n/// - Parameter registrationDate: –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥.\nfunc isNewUser(registrationDate: Date) -> Bool {\n    return Date().timeIntervalSince(registrationDate) < 7 * 86400\n}"
      ],
      [
        "/// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤.\nfunc getAppLaunchCount() -> Int {\n    return UserDefaults.standard.integer(forKey: \"launchCount\")\n}"
      ],
      [
        "/// –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\nfunc incrementAppLaunchCount() {\n    let count = getAppLaunchCount() + 1\n    UserDefaults.standard.set(count, forKey: \"launchCount\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Face ID –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n/// - Returns: true, –µ—Å–ª–∏ Face ID –¥–æ—Å—Ç—É–ø–µ–Ω.\nfunc isFaceIDAvailable() -> Bool {\n    let context = LAContext()\n    var error: NSError?\n    return context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) && context.biometryType == .faceID\n}"
      ],
      [
        "/// –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ –Ω–æ–º–µ—Ä—É.\n/// - Parameter month: –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –æ—Ç 1 –¥–æ 12.\n/// - Returns: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞.\nfunc monthName(for month: Int) -> String {\n    let formatter = DateFormatter()\n    formatter.locale = Locale(identifier: \"ru_RU\")\n    return formatter.monthSymbols[safe: month - 1] ?? \"\"\n}"
      ],
      [
        "/// –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter userId: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º userId.\nfunc ordersHistoryURL(for userId: String) -> URL? {\n    return URL(string: \"https://api.example.com/orders?user=\\(userId)\")\n}"
      ],
      [
        "/// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"darkMode\".\n/// - Returns: true, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞.\nfunc isDarkModeEnabled() -> Bool {\n    return UserDefaults.standard.bool(forKey: \"darkMode\")\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n/// - Returns: true, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.\nfunc isLocationAccessGranted() -> Bool {\n    return CLLocationManager.authorizationStatus() == .authorizedWhenInUse || CLLocationManager.authorizationStatus() == .authorizedAlways\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ \"–º–º:—Å—Å\".\n/// - Parameter seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.\n/// - Returns: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\nfunc formatTime(seconds: Int) -> String {\n    return String(format: \"%02d:%02d\", seconds / 60, seconds % 60)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ PIN-–∫–æ–¥–∞.\n/// - Parameter attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n/// - Returns: true, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω.\nfunc isPinAttemptsLimitExceeded(_ attempts: Int) -> Bool {\n    return attempts >= 3\n}"
      ],
      [
        "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —ç—Ç–∞–ø—É.\n/// - Parameter status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.\n/// - Returns: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\nfunc deliveryStatusText(for status: String) -> String {\n    switch status {\n    case \"pending\": return \"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\"\n    case \"shipped\": return \"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\"\n    case \"delivered\": return \"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\"\n    default: return \"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\"\n    }\n}"
      ],
      [
        "/// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã UserDefaults –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\nfunc resetAppData() {\n    if let appDomain = Bundle.main.bundleIdentifier {\n        UserDefaults.standard.removePersistentDomain(forName: appDomain)\n    }\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä API.\n/// - Parameter completion: –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.\nfunc pingServer(completion: @escaping (Bool) -> Void) {\n    let url = URL(string: \"https://api.example.com/ping\")!\n    URLSession.shared.dataTask(with: url) { _, response, error in\n        let httpResponse = response as? HTTPURLResponse\n        completion(httpResponse?.statusCode == 200 && error == nil)\n    }.resume()\n}"
      ],
      [
        "/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Parameter languageCode: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"ru\", \"en\").\nfunc savePreferredLanguage(_ languageCode: String) {\n    UserDefaults.standard.set(languageCode, forKey: \"preferredLanguage\")\n}"
      ],
      [
        "/// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/// - Returns: –ö–æ–¥ —è–∑—ã–∫–∞ –∏–ª–∏ \"ru\" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\nfunc getPreferredLanguage() -> String {\n    return UserDefaults.standard.string(forKey: \"preferredLanguage\") ?? \"ru\"\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, false ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ.\nfunc isNonIntegerNumber(_ text: String) -> Bool {\n    if let number = Double(text) {\n        return floor(number) != number\n    }\n    return false\n}"
      ],
      [
        "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.\n/// - Parameters:\n///   - character: –°–∏–º–≤–æ–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n///   - count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏.\nfunc repeatCharacter(_ character: Character, count: Int) -> String {\n    return String(repeating: String(character), count: count)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤ –º–∞—Å—Å–∏–≤–µ —Å—Ç—Ä–æ–∫.\n/// - Parameters:\n///   - text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n///   - array: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\nfunc isUniqueString(_ text: String, in array: [String]) -> Bool {\n    return array.filter { $0 == text }.count == 1\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n/// - Returns: –û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ.\nfunc roundedNumber(from text: String, decimals: Int) -> Double? {\n    guard let number = Double(text) else { return nil }\n    return round(number * pow(10, Double(decimals))) / pow(10, Double(decimals))\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\nfunc extractDigitsInOrder(from text: String) -> String {\n    return text.filter { $0.isNumber }\n}"
      ],
      [
        "/// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ \"–∫–æ–±–æ–ª—å–¥—Å–∫–∏–π\" —Ä–µ–≥–∏—Å—Ç—Ä (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ).\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –≤ \"–∫–æ–±–æ–ª—å–¥—Å–∫–æ–º\" —Ä–µ–≥–∏—Å—Ç—Ä–µ.\nfunc toCobolCase(_ text: String) -> String {\n    let words = text.split(separator: \" \").map { $0.lowercased() }\n    guard let first = words.first else { return \"\" }\n    return [first] + words.dropFirst().map { $0.capitalized }.joined(separator: \" \")\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–µ.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - charactersToRemove: –°—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\nfunc removeCharactersFromString(_ text: String, charactersToRemove: String) -> String {\n    return text.filter { !charactersToRemove.contains($0) }\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–Ω—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\nfunc isWholeNumber(_ text: String) -> Bool {\n    return Int(text) != nil\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–∏.\n/// - Parameters:\n///   - substring: –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n///   - text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ.\nfunc containsSubstring(_ substring: String, in text: String) -> Bool {\n    return text.contains(substring)\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å —É—á—ë—Ç–æ–º –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã).\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤ —Å —É—á—ë—Ç–æ–º –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤.\nfunc stringToCapitalizedWords(_ text: String) -> [String] {\n    return text.split(separator: \" \").map { $0.capitalized }\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫—É —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –±—É–∫–≤–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∏ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏.\nfunc alternatingCase(_ text: String) -> String {\n    return String(text.enumerated().map { (index, character) in\n        index % 2 == 0 ? character.lowercased() : character.uppercased()\n    })\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É.\n/// - Parameters:\n///   - substring: –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n///   - text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ nil, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\nfunc indexOfSubstring(_ substring: String, in text: String) -> Int? {\n    return text.range(of: substring)?.lowerBound.utf16Offset(in: text)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, —É—á–∏—Ç—ã–≤–∞—è —Ç–æ–ª—å–∫–æ –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.\nfunc isAlphaOnlyPalindrome(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.\nfunc extractUppercaseLetters(from text: String) -> String {\n    return text.filter { $0.isUppercase }\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –¥–≤–æ–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º.\nfunc isBinaryNumber(_ text: String) -> Bool {\n    return text.allSatisfy { $0 == \"0\" || $0 == \"1\" }\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º –≤ –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.\nfunc capitalizeFirstLetter(_ text: String) -> String {\n    guard let first = text.first else { return text }\n    return first.uppercased() + text.dropFirst()\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤, —Ä–∞–∑–±–∏–≤–∞—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤.\nfunc stringToCharArray(_ text: String) -> [Character] {\n    return Array(text)\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n/// - Returns: –ü–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\nfunc repeatString(_ text: String, count: Int) -> String {\n    return String(repeating: text, count: count)\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"HH:mm\".\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"HH:mm\".\nfunc isValidTime(_ text: String) -> Bool {\n    let pattern = \"^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$\"\n    return matchesRegex(text, pattern: pattern)\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–∏—Ä–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ç—Ä–æ–∫–µ.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ç–∏—Ä–µ.\nfunc extractDigitsAndDashes(from text: String) -> String {\n    return text.filter { $0.isNumber || $0 == \"-\" }\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –∫—Ä–æ–º–µ —á–∏—Å–µ–ª.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –±—É–∫–≤–∞–º–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.\nfunc lowercaseLettersWithoutNumbers(from text: String) -> String {\n    return text.filter { $0.isLetter }.lowercased()\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É.\n/// - Parameter array: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\n/// - Returns: true, –µ—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã.\nfunc allStringsHaveEqualLength(_ array: [String]) -> Bool {\n    guard let firstLength = array.first?.count else { return true }\n    return array.allSatisfy { $0.count == firstLength }\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - separator: –°–∏–º–≤–æ–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\nfunc splitStringByCharacter(_ text: String, separator: Character) -> [String] {\n    return text.split(separator: separator).map { String($0) }\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º.\nfunc isHexadecimalNumber(_ text: String) -> Bool {\n    let pattern = \"^[0-9A-Fa-f]+$\"\n    return matchesRegex(text, pattern: pattern)\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"yyyy-MM-dd HH:mm:ss\".\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –î–∞—Ç–∞, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.\nfunc stringToDate(_ text: String) -> Date? {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n    return formatter.date(from: text)\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.\nfunc cleanString(_ text: String) -> String {\n    let charactersToRemove = CharacterSet.whitespacesAndNewlines.union(.punctuationCharacters)\n    return text.filter { !charactersToRemove.contains($0.unicodeScalars.first!) }\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã).\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - base: –ë–∞–∑–∞ —á–∏—Å–ª–∞.\n/// - Returns: –ß–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è.\nfunc stringToNumberWithBase(_ text: String, base: Int) -> Int? {\n    return Int(text, radix: base)\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\nfunc countUniqueCharacters(in text: String) -> Int {\n    return Set(text).count\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.\nfunc uniqueCharactersOnly(in text: String) -> String {\n    let characterCount = text.reduce(into: [:]) { counts, char in counts[char, default: 0] += 1 }\n    return String(text.filter { characterCount[$0] == 1 })\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç—Ä–æ–∫–æ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email-–∞–¥—Ä–µ—Å.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.\nfunc isValidEmail(_ text: String) -> Bool {\n    let emailRegex = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\"\n    return matchesRegex(text, pattern: emailRegex)\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.\nfunc extractNumbersFromString(_ text: String) -> String {\n    return text.filter { $0.isNumber }\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.\n/// - Parameters:\n///   - text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n///   - precision: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.\nfunc stringToPercentage(_ text: String, precision: Int) -> String? {\n    guard let number = Double(text) else { return nil }\n    let percentage = number * 100\n    return String(format: \"%.\\(precision)f%%\", percentage)\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –≥–¥–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–¥—É—é—Ç—Å—è –º–µ–∂–¥—É –≤–µ—Ä—Ö–Ω–∏–º –∏ –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—Ç—Ä–æ–∫–∞ —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –±—É–∫–≤–∞–º–∏.\nfunc alternatingUpperAndLowerCase(_ text: String) -> String {\n    return String(text.enumerated().map { (index, char) in\n        index % 2 == 0 ? char.lowercased() : char.uppercased()\n    })\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –≤–∫–ª—é—á–∞—è –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Ç–æ—á–∫—É.\n/// - Parameter text: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.\nfunc isNumeric(_ text: String) -> Bool {\n    return Double(text) != nil\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n/// - Parameter array: –ú–∞—Å—Å–∏–≤.\n/// - Returns: –ú–∞—Å—Å–∏–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\nfunc reverseArray<T>(_ array: [T]) -> [T] {\n    return array.reversed()\n}"
      ],
      [
        "/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è–º.\n/// - Parameter dictionary: –°–ª–æ–≤–∞—Ä—å.\n/// - Returns: –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è.\nfunc randomElementFromDictionary<Key, Value>(_ dictionary: [Key: Value]) -> (Key, Value)? where Key: Hashable {\n    return dictionary.randomElement()\n}"
      ],
      [
        "/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\n/// - Parameter dictionary: –°–ª–æ–≤–∞—Ä—å.\n/// - Returns: –ö–ª—é—á–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\nfunc keysWithMinValues<Key, Value>(_ dictionary: [Key: Value]) -> [Key] where Key: Hashable, Value: Comparable {\n    guard let minValue = dictionary.values.min() else { return [] }\n    return dictionary.filter { $0.value == minValue }.map { $0.key }\n}"
      ],
      [
        "/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π.\n/// - Parameter date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n/// - Returns: `true`, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º.\nfunc isFutureDate(_ date: Date) -> Bool {\n    return date > Date()\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤, —Ñ–∏–ª—å—Ç—Ä—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.\n/// - Parameter str: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.\nfunc stringToAlphabeticCharArray(_ str: String) -> [Character] {\n    return str.filter { $0.isLetter }\n}"
      ],
      [
        "/// –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏ –≤ –¥–Ω—è—Ö.\n/// - Parameters:\n///   - startDate: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞.\n///   - endDate: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞.\n/// - Returns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.\nfunc daysBetweenDates(startDate: Date, endDate: Date) -> Int {\n    return Calendar.current.dateComponents([.day], from: startDate, to: endDate).day ?? 0\n}"
      ],
      [
        "/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É.\n/// - Parameter str: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.\n/// - Returns: –°—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ.\nfunc sumOfNumbersInString(_ str: String) -> Int {\n    let numbers = str.split(separator: \" \").compactMap { Int($0) }\n    return numbers.reduce(0, +)\n}"
      ]
    ]
  }
}