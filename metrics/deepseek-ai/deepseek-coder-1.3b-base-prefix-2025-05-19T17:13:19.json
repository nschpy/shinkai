{
  "title": "deepseek-ai/deepseek-coder-1.3b-base-prefix-tuning",
  "description": "Prefix дообучение модели deepseek-ai/deepseek-coder-1.3b-base с последующим инференсом и оценкой на тестовом наборе данных по метрикам BLEU и ROUGE.",
  "metrics": {
    "BLEU": {
      "bleu": 0.5067825831521238,
      "precisions": [
        0.7099236641221374,
        0.5762273901808785,
        0.5091863517060368,
        0.448
      ],
      "brevity_penalty": 0.9169203279430163,
      "length_ratio": 0.92018779342723,
      "translation_length": 392,
      "reference_length": 426
    },
    "ROUGE-L": {
      "rouge1": 0.637994257743227,
      "rouge2": 0.5055919889522624,
      "rougeL": 0.6198279002911552,
      "rougeLsum": 0.6303416821273964
    },
    "PREDICTIONS": [
      "/// Получает случайный элемент из массива строк.\n/// - Parameter array: Массив, содержит строки.\n/// - Returns: Случайный элемент из массива.\nfunc randomElementFromArray(_ array: [String]) -> String? {\n    return array.randomElement()\n}",
      "/// Calculate a square root of a number.\n/// - Returns: A Double of the square root of a number.\npubliation:\n/// - Returns: A Double of the square root of a number.\npubliation:\nfunc squareRoot(number: Double) -> Double {\n    return sqrt(number)\n}",
      "/// Проверяет, является ли массив палиндром (паралесли начинается на одинаковое значение)\n/// - Parameter:\n///   - Массив, который нужно проверять\n/// - Returns:\n///   - Returns:\n///   - Returns:",
      "Question:\n\n### Parse an email to an array of options.\nOutput:\n    let regex = try NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    let regex = regex?.firstMatch(in: email, options: range: NSRange(location: 0)) ?? {\n\n    return regex.firstMatch(in: email, options: NSRange(location: 0, length: email.utf1.count)) != nil\n}\n}",
      "/// Returns the sum of all digits of a number.\n/// - Parameter number: The number to sum.\n/// Returns: The sum of all digits of a number.\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}",
      "/// Упоминает количество уникальных элементов\n/// - Returns: Число уникальных элементов\n/// - Parameter array: Массив\n/// - Returns: Число уникальных элементов\nfunc countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}"
    ],
    "REFERENCES": [
      [
        "/// Генерирует случайный элемент из массива строк.\n/// - Parameter array: Массив строк.\n/// - Returns: Случайный элемент из массива.\nfunc randomElementFromStringArray(_ array: [String]) -> String? {\n    return array.randomElement()\n}"
      ],
      [
        "/// Возвращает число, которое является квадратным корнем из заданного числа.\n/// - Parameter number: Число.\n/// - Returns: Квадратный корень числа.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}"
      ],
      [
        "/// Проверяет, является ли массив палиндромом.\n/// - Parameter array: Массив элементов.\n/// - Returns: true, если массив читается одинаково в обе стороны.\nfunc isPalindrome<T: Equatable>(_ array: [T]) -> Bool {\n    return array == array.reversed()\n}"
      ],
      [
        "/// Проверяет, является ли строка допустимым email.\n/// - Parameter email: Строка для проверки.\n/// - Returns: true, если строка похожа на email.\nfunc isValidEmail(_ email: String) -> Bool {\n    let pattern = \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex?.firstMatch(in: email, options: [], range: NSRange(location: 0, length: email.utf16.count)) != nil\n}"
      ],
      [
        "/// Считает сумму цифр числа.\n/// - Parameter number: Число.\n/// - Returns: Сумма цифр.\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}"
      ],
      [
        "/// Возвращает количество уникальных элементов в массиве.\n/// - Parameter array: Входной массив.\n/// - Returns: Количество уникальных элементов.\nfunc countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}"
      ]
    ]
  }
}