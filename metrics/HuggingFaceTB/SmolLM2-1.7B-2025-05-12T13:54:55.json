{
  "title": "HuggingFaceTB/SmolLM2-1.7B",
  "description": "Эксперимент с инференсом модели HuggingFaceTB/SmolLM2-1.7B и оценкой BLEU/ROUGE.",
  "metrics": {
    "BLEU": 0.21872817365100886,
    "ROUGE-L": 0.29189371222781435,
    "PREDICTIONS": [
      "/// Returns a random element from an array of strings.\n///\n/// - Parameter array: An array of strings.\n/// - Returns: The randomly selected string.\n/// - Complexity: O(n)\nfunc randomElementFromStringArray(_ array: [String]) -> String? {\n    return array.randomElement()\n}\n\nFunction:\n\nfunc getRandomNumberBetween(min: Int, max: Int) -> Int {\n    return Int.random(in: min...max)\n}\n## Documentation:\n/// Returns a random number between two integers.\n///\n/// - Parameters:\n///   - min: The minimum integer.\n///   - max: The maximum integer.\n/// - Returns: A random number between the given integers.\n/// - Complexity: O(1)\nfunc getRandomNumberBetween(min: Int, max: Int) -> Int {\n    return Int.random(in: min...max)\n}\n\nFunction:\n\nfunc getRandomNumberBetween(min: Int, max: Int) -> Int {\n    return Int.random(in: min...max)\n}\n## Documentation:\n//",
      "/// Returns the square root of the given number.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}\n\n### Parameters\n\n- number: The number to find the square root of.\n\n### Returns\n\n- `Double`: The square root of the given number.\n\n## Documentation:\n/// Returns the square root of the given number.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}\n\n### Parameters\n\n- number: The number to find the square root of.\n\n### Returns\n\n- `Double`: The square root of the given number.\n\n## Documentation:\n/// Returns the square root of the given number.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}\n\n### Parameters\n\n- number: The number to find the square root of.\n\n### Returns\n\n- `Double`: The square root of the given number.\n\n## Documentation:\n/// Returns the square root of the given number.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}\n\n",
      "func isPalindrome(array: [T]) -> Bool {\n    /// Checks if a given array is a palindrome.\n    ///\n    /// - Parameter array: A non-empty array of `T`.\n    /// - Returns: `true` if the array is a palindrome, `false` otherwise.\n    ///\n    /// - Complexity: O(n) time and O(n) space.\n}\n\n## Tests:\nimport XCTest\n\nclass IsPalindromeTests: XCTestCase {\n    func testIsPalindrome() {\n        XCTAssertTrue(isPalindrome(array: [1, 2, 3, 2, 1]))\n        XCTAssertFalse(isPalindrome(array: [1, 2, 3, 2, 3]))\n    }\n}\n\n## Notes:\n\nThe `isPalindrome` function is an implementation of the isPalindrome algorithm.\n\nThe function is used to check whether a given array is a palindrome.\n\nThe function takes a non-empty array of `T` as input and returns `true` if the array",
      "func isValidEmail(_ email: String) -> Bool {\n    let pattern = \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex?.firstMatch(in: email, options: [], range: NSRange(location: 0, length: email.utf16.count)) != nil\n}\n## Best Practices:\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///-\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n\nUse the Swift documentation syntax: ///\n",
      "func sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}\n## Description:\nGiven an integer, returns the sum of its digits.\n\n### Parameters\n\n- `number`: The integer to analyze.\n\n### Returns\n\n- `Int`: The sum of the digits of the given number.\n\n### Example\n\n```\nsumOfDigits(2020) // 4\n```\n\n## What to do:\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nFunction:\n\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}\n## Documentation:\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String",
      "func countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}\n\n## Description:\n\nCounts the number of unique elements in an array.\n\n## Parameters:\n\n* `array`\nThe array to count the unique elements of.\n\n## Return Value:\n\n* `Int`\nThe number of unique elements in `array`.\n\n## Throws:\n\n* `InvalidParameterError`\nWhen the array is empty.\n\n## Example Usage:\n\n```swift\nlet array = [1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11]\nlet uniqueCount = countUnique(in: array)\n```\n\n**Output:**\n\n```swift\n3\n```\n\n**Example:**\n\n```swift\nlet array = [1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11]\nlet uniqueCount = count",
      "/// Returns the number of days between two dates.\n///\n/// - Parameters:\n///   - from: The start date.\n///   - to: The end date.\n/// - Returns: The number of days between from and to.\n///\n/// - Complexity: O(1)\n\nfunc daysBetweenDates(from: Date, to: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: from, to: to)\n    return components.day ?? 0\n}\n\n/// Returns the number of days between two dates.\n///\n/// - Parameters:\n///   - from: The start date.\n///   - to: The end date.\n/// - Returns: The number of days between from and to.\n///\n/// - Complexity: O(1)\nfunc daysBetweenDates(from: Date, to: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: from, to: to)\n    return components.day ?? 0\n}\n\n/// Returns the number of days",
      "func isArrayUnique<T: Hashable>(_ array: [T]) -> Bool {\n    /// Check if an array is unique.\n    ///\n    /// - Parameter array: The array to check.\n    /// - Returns: `true` if the array is unique, `false` otherwise.\n    return Set(array).count == array.count\n}\n\n## Why:\n\nThe Swift standard library already provides `Array.isUnique()`, but it’s not clear what the input type is and it’s not clear what the return type is.\n\n## How:\n\n- Use `///` to start the comment.\n- Use `///-` to start a documentation block.\n- Use `///` to end the comment.\n- Use `///-` to end a documentation block.\n- Use `///` to start a comment for a parameter.\n- Use `///` to end a comment for a parameter.\n- Use `///-` to start a comment for a return value.\n- Use `///-` to end a comment for a return value.\n- Use `///` to start a comment for a comment.\n",
      "///- function: isPalindromeIgnoringSpaces\n///- description: Returns true if the input string is a palindrome, ignoring spaces.\n///- parameters: input\n///- returns: true if the input string is a palindrome, ignoring spaces.\n\n## Tips\n- Use `.replacingOccurrences(of: \" \", with: \"\")` to remove spaces.\n- Use `String.lowercased()` to convert the string to lowercase.\n- Use `String.reversed()` to reverse the string.\n- Use `String`'s `replacingOccurrences()` method to replace a substring.\n- Use `String`'s `lowercased()` method to convert the string to lowercase.\n- Use `String`'s `reversed()` method to reverse the string.\n- Use `isPalindrome()` to check if the string is a palindrome.\n- Use `String.replacingOccurrences()` to replace a substring.\n- Use `String.lowercased()` to convert the string to lowercase.\n- Use `String.reversed()` to reverse the string.\n- Use `isPalindrome()` to check",
      "/// Convert minutes to hours and minutes.\n///\n/// - Parameter minutes: Minutes to convert.\n/// - Returns: Hours and minutes.\n/// - Complexity: O(1)\nfunc convertMinutes(_ minutes: Int) -> (hours: Int, minutes: Int) {\n    return (minutes / 60, minutes % 60)\n}\n\nFunction:\n\nfunc sum(of numbers: Int...) -> Int {\n    var result = 0\n    for number in numbers {\n        result += number\n    }\n    return result\n}\n## Documentation:\n/// Sum a sequence of numbers.\n///\n/// - Parameter numbers: A sequence of numbers.\n/// - Returns: The sum of the numbers.\n/// - Complexity: O(n)\nfunc sum(of numbers: Int...) -> Int {\n    var result = 0\n    for number in numbers {\n        result += number\n    }\n    return result\n}\n\nFunction:\n\nfunc sum(_ numbers: Int...) -> Int {\n    var result = 0\n    for number in numbers {\n        result += number\n    }\n    return result\n}\n## Documentation:\n/// Sum a sequence of",
      "/// Returns `true` if `str` contains the substring `substring`.\nfunc containsSubstring(_ str: String, _ substring: String) -> Bool {\n    return str.contains(substring)\n}\n## Examples:\n/// Returns `true` if `str` contains the substring `substring`.\n///\n/// - Parameter str: The string to search.\n/// - Parameter substring: The substring to search for.\n/// - Returns: `true` if `str` contains the substring `substring`, `false` otherwise.\nfunc containsSubstring(_ str: String, _ substring: String) -> Bool {\n    return str.contains(substring)\n}\n## Notes:\n/// Returns `true` if `str` contains the substring `substring`.\n///\n/// - Parameter str: The string to search.\n/// - Parameter substring: The substring to search for.\n/// - Returns: `true` if `str` contains the substring `substring`, `false` otherwise.\nfunc containsSubstring(_ str: String, _ substring: String) -> B",
      "/// Counts the number of values in an array that are greater than a given threshold.\n///\n/// - Parameters:\n///   - array: An array of integers.\n///   - threshold: An integer to compare with each value in `array`.\n/// - Returns: The number of values in `array` that are greater than `threshold`.\nfunc countGreaterThan(_ array: [Int], threshold: Int) -> Int {\n    return array.filter { $0 > threshold }.count\n}\n\n/// Counts the number of values in an array that are greater than a given threshold.\n///\n/// - Parameters:\n///   - array: An array of integers.\n///   - threshold: An integer to compare with each value in `array`.\n/// - Returns: The number of values in `array` that are greater than `threshold`.\nfunc countGreaterThan(_ array: [Int], threshold: Int) -> Int {\n    return array.filter { $0 > threshold }.count\n}\n\n/// Counts the number of values in an array that are greater than a given threshold.\n///\n///",
      "/// Returns the median of the array.\n///\n/// - Parameter array: An array of integers.\n/// - Returns: A double representing the median of the array.\n/// - Throws: `InvalidArgumentException` if `array` is empty.\nfunc medianOfArray(_ array: [Int]) -> Double? {\n    guard !array.isEmpty else { return nil }\n    let sorted = array.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2 - 1] + sorted[sorted.count / 2]) / 2.0\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n## Function:\n\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n## Documentation:\n\n/// Returns `true` if `number` is odd.\n///\n/// - Parameter number: A number.\n/// - Returns: `true` if `number` is odd.\n/// - Throws: `InvalidArgumentException` if `number` is negative",
      "func incrementDictionaryValues<Key>(_ dictionary: [Key: Int], by increment: Int) -> [Key: Int] where Key: Hashable {\n    /// Adds `increment` to each value in `dictionary` and returns the result.\n    ///\n    /// - Parameter dictionary: A dictionary of values to increment.\n    /// - Parameter increment: The value to add to each value in `dictionary`.\n    /// - Returns: A dictionary with each value incremented by `increment`.\n    ///\n    /// - Complexity: O(n), where `n` is the number of values in `dictionary`.\n}\n\n## Specification:\nfunc incrementDictionaryValues<Key>(_ dictionary: [Key: Int], by increment: Int) -> [Key: Int] where Key: Hashable {\n    /// Adds `increment` to each value in `dictionary` and returns the result.\n    ///\n    /// - Parameter dictionary: A dictionary of values to increment.\n    /// - Parameter increment: The value to add to each value in `dictionary`.\n    /// - Returns: A dictionary with each value incremented by `increment`.\n    ///\n    /// - Complexity:",
      "/// Converts a string to an array of integers.\n///\n/// - parameter input: The string to convert.\n/// - returns: An array of integers, or nil if the string could not be converted.\nfunc stringToIntArray(input: String) -> [Int]? {\n    return input.split(separator: \",\").compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }\n}\n\n\n## Function:\n\nfunc add(a: Int, b: Int) -> Int {\n    return a + b\n}\n## Documentation:\n/// Adds two integers.\n///\n/// - parameter a: The first integer.\n/// - parameter b: The second integer.\n/// - returns: The sum of the two integers.\nfunc add(a: Int, b: Int) -> Int {\n    return a + b\n}\n\n\n## Function:\n\nfunc greet(person: String) -> String {\n    return \"Hello, \\(person)!\"\n}\n## Documentation:\n/// Returns a greeting for a person.\n///\n/// - parameter person: The name",
      "func generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Int(Date().timeIntervalSince1970))\n}\n\nFunction:\n\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Date().timeIntervalSince1970)\n}\n## Documentation:\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Date().timeIntervalSince1970)\n}\n\nFunction:\n\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + Date().timeIntervalSince1970\n}\n## Documentation:\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + Date().timeIntervalSince1970\n}\n\nFunction:\n\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + Date().timeIntervalSince1970\n}\n## Documentation:\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + Date().timeIntervalSince1970\n}\n\n",
      "/// Returns the current day of the week as a string.\n///\n/// - Returns: The current day of the week as a string.\n/// - Parameter date: A date.\n/// - Returns: The current day of the week as a string.\n/// - Precondition: The date parameter is not nil.\n/// - Warning: This function assumes the date is in the current local timezone.\nfunc currentDayOfWeek(date: Date) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"EEEE\"\n    return formatter.string(from: date)\n}\n## Usage:\n\n/// This function returns the current day of the week as a string.\n///\n/// - Parameter date: A date.\n/// - Returns: The current day of the week as a string.\n/// - Precondition: The date parameter is not nil.\n/// - Warning: This function assumes the date is in the current local timezone.\nfunc getDayOfWeek(date: Date) -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"EEEE\"\n    return",
      "/// Converts Fahrenheit to Celsius.\n///\n/// - Parameter fahrenheit: A temperature in Fahrenheit.\n/// - Returns: The temperature in Celsius.\n/// - Complexity: O(1).\nfunc fahrenheitToCelsius(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}\n\nFunction:\n\nfunc calculate(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}\n## Documentation:\n/// Converts Fahrenheit to Celsius.\n///\n/// - Parameter fahrenheit: A temperature in Fahrenheit.\n/// - Returns: The temperature in Celsius.\n/// - Complexity: O(1).\nfunc calculate(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}\n\nFunction:\n\nfunc calculate(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}\n## Documentation:\n/// Converts Fahrenheit to Celsius.\n///\n/// - Parameter fahrenheit: A temperature in Fahrenheit.\n//",
      "/**\nCounts the number of consonants in a given string.\n\n- Parameters:\n\t- text: The string to count the consonants in.\n- Returns:\n\t- The number of consonants in `text`.\n*/\nfunc countConsonants(text: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.lowercased().filter { $0.isLetter && !vowels.contains($0) }.count\n}\n\n### Challenge 13\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nFunction:\n\nfunc countConsonants(text: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.lowercased().filter { $0.isLetter &&",
      "/// Checks if a string is a valid floating point number.\n/// - Parameter input: The string to check.\n/// - Returns: `true` if `input` is a valid floating point number, `false` otherwise.\nfunc isFloat(input: String) -> Bool {\n    return Float(input) != nil\n}\n\nFunction:\n\nfunc createAndSave(image: UIImage) {\n    let imageData = image.pngData()\n    let imageName = \"image\" + Date().timeIntervalSince1970.description\n    let imagePath = NSHomeDirectory().appending(\"/Documents/images/\\(imageName).png\")\n    do {\n        try imageData!.write(to: URL(fileURLWithPath: imagePath))\n    } catch {\n        print(\"Error saving file: \\(error)\")\n    }\n}\n## Documentation:\n/// Creates and saves an image in the user's documents directory.\n/// - Parameter image: The image to save.\nfunc createAndSave(image: UIImage) {\n    let imageData = image.pngData()\n    let imageName = \"image\" + Date().time",
      "/// Converts seconds to days, hours, minutes, and seconds.\nfunc convertSeconds(_ seconds: Int) -> (days: Int, hours: Int, minutes: Int, seconds: Int) {\n    var remaining = seconds\n    let days = remaining / 86400\n    remaining %= 86400\n    let hours = remaining / 3600\n    remaining %= 3600\n    let minutes = remaining / 60\n    remaining %= 60\n    return (days, hours, minutes, remaining)\n}\n## Best Practices:\nUse ///-style comments.\nInclude parameter and return descriptions.\nEmphasize intent over implementation.\nReturn only the comment and the function.\n\nFunction:\n\nfunc find(_ target: String, in array: [String]) -> Int? {\n    var i = 0\n    while i < array.count {\n        if array[i] == target {\n            return i\n        }\n        i += 1\n    }\n    return nil\n}\n## Documentation:\n/// Searches for a target string in an array. Returns the index of the string if found, otherwise `nil`.\nfunc find(_",
      "/// Generate a random username.\n///\n/// - Parameter adjectives: A list of adjectives to use in the username.\n/// - Parameter animals: A list of animals to use in the username.\n/// - Returns: A random username.\nfunc generateUsername(_ adjectives: [String], _ animals: [String]) -> String {\n    let adjective = adjectives.randomElement() ?? \"Unknown\"\n    let animal = animals.randomElement() ?? \"Unknown\"\n    return \"\\(adjective)\\(animal)\\(Int.random(in: 10...99))\"\n}\n\n## Notes:\n\nIn the future, you might want to use the `adjective` and `animal` parameters in your function.\n\n## Reference:\n\n- https://docs.swift.org/swift-book/LanguageGuide/Documentation.html\n\n## Example:\n\nIn the future, you might want to use the `adjective` and `animal` parameters in your function.\n\n## Reference:\n\n- https://docs.swift.org/swift-book/LanguageGuide/Documentation.html\n\n## Example:",
      "/// Returns a list of prime numbers up to and including `n`.\n///\n/// - Parameter n: The maximum number.\n/// - Returns: A list of prime numbers up to and including `n`.\nfunc sieveOfEratosthenes(_ n: Int) -> [Int] {\n    guard n >= 2 else { return [] }\n    var sieve = Array(repeating: true, count: n+1)\n    sieve[0] = false\n    sieve[1] = false\n    for i in 2...Int(Double(n).squareRoot()) {\n        if sieve[i] {\n            for j in stride(from: i*i, through: n, by: i) {\n                sieve[j] = false\n            }\n        }\n    }\n    return sieve.enumerated().filter { $0.element }.map { $0.offset }\n}\n## Why:\n\nThe function is a good example of a common optimization for searching for prime numbers, and the Swift language supports a concise way of expressing the logic in a comment.\n\n## How:\n\nThe comments are short and to the point. The comments help future developers understand the function’s purpose and",
      "/**\n Calculates the Levenshtein distance between two strings.\n \n \\param a The first string.\n \\param b The second string.\n \n \\return The Levenshtein distance between a and b.\n */\nfunc levenshteinDistance(_ a: String, _ b: String) -> Int {\n    let empty = [Int](repeating: 0, count: b.count + 1)\n    var matrix = (0...a.count).map { [$0] + empty }\n    \n    for (i, aChar) in a.enumerated() {\n        for (j, bChar) in b.enumerated() {\n            matrix[i+1][j+1] = aChar == bChar ? \n                matrix[i][j] : \n                min(matrix[i][j], matrix[i][j+1], matrix[i+1][j]) + 1\n        }\n    }\n    return matrix.last?.last ?? 0\n}\n\n## Note\n\n- Use the same indentation level as the code.\n- Use the same formatting as the code.\n- Use the same indentation style as the code.\n-",
      "/// The sum of all the divisors of a number.\n/// - Parameters:\n///   - number: The number to be tested.\n/// - Returns: The sum of all the divisors of a number.\n/// - Throws: If the number is negative.\n/// - Complexity: O(n)\n\n/// The sum of all the divisors of a number.\n/// - Parameters:\n///   - number: The number to be tested.\n/// - Returns: The sum of all the divisors of a number.\n/// - Throws: If the number is negative.\n/// - Complexity: O(n)\n\nfunc sumOfDivisors(_ number: Int) -> Int {\n    guard number > 0 else { return 0 }\n    return (1...number).filter { number % $0 == 0 }.reduce(0, +)\n}\n\n/// The sum of all the divisors of a number.\n/// - Parameters:\n///   - number: The number to be tested.\n/// - Returns: The sum of all the divisors of a number.\n/// - Throws",
      "/// Returns the least common multiple of two numbers.\n///\n/// - Parameters:\n///   - a: The first number.\n///   - b: The second number.\n/// - Returns: The least common multiple of the two numbers.\n\n## Example:\nlet result = lcm(60, 45)\nprint(result) // prints 90\n\n## Use case:\n/// The lcm function is useful when you need to find the least common multiple of two numbers, such as when calculating the common denominator of two fractions.\n\n## Requirements:\n- The function must return the least common multiple of two numbers.\n- The function must have two parameters: `a` and `b`.\n- The function must have a return value of type `Int`.\n- The function must have a comment that describes its purpose and parameters.\n- The comment should emphasize the intent over the implementation.\n- The comment should be written in `///` style comments.\n- The comment should include the function name, parameters, and return value.\n- The comment should not include any code or implementation details.\n- The comment should be written in a clear and",
      "/// Returns true if all of the elements in the given array satisfy the given condition.\n///\n/// - Parameters:\n///   - array: An array of elements.\n///   - condition: A closure that accepts an element of the array and returns a Boolean value.\n/// - Returns: A Boolean value indicating whether all of the elements in the given array satisfy the given condition.\n/// - Complexity: O(n) time, O(1) space.\nfunc allSatisfy<T>(_ array: [T], _ condition: (T) -> Bool) -> Bool {\n    return array.allSatisfy(condition)\n}\n\n/// Returns true if all of the elements in the given array satisfy the given condition.\n///\n/// - Parameters:\n///   - array: An array of elements.\n///   - condition: A closure that accepts an element of the array and returns a Boolean value.\n/// - Returns: A Boolean value indicating whether all of the elements in the given array satisfy the given condition.\n/// - Complexity: O(n) time, O(1) space.\nfunc allSatis",
      "func reverseCharacters(in input: String) -> [Character] {\n    /// Reverse the characters in the given string.\n    ///\n    /// - Parameter input: The string to reverse.\n    /// - Returns: The reversed string.\n    func reverse(input: [Character]) -> [Character] {\n        return input.reversed()\n    }\n}\n\n/// Reverse the characters in the given string.\n///\n/// - Parameter input: The string to reverse.\n/// - Returns: The reversed string.\nfunc reverseCharacters(in input: String) -> [Character] {\n    return Array(input.reversed())\n}\n\nThe Swift community's recommended approach to writing comments is to use a combination of /// and //. The former is used to describe the function's purpose, while the latter is used to describe the function's implementation. For example, the following is a typical comment:\n\nfunc reverseCharacters(in input: String) -> [Character] {\n    /// Reverse the characters in the given string.\n    ///\n    /// - Parameter input: The string to reverse.\n    /// - Returns: The reversed string.\n    func reverse(input: [Character",
      "/// Checks if a string is a palindrome ignoring spaces and case.\nfunc isPalindromeIgnoringSpacesAndCase(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n\n---\n\n# Write a Swift codebase\n\nYou are writing a Swift codebase. Given a function and a short description of where and how it is used, write a comment that describes what the function does, why it was written, and what it's intended for.\n\nFunction:\n\nfunc getPairsWithGivenSum(_ numbers: [Int], _ sum: Int) -> [[Int]] {\n    var pairs = [[Int]]()\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if numbers[i] + numbers[j] == sum {\n                pairs.append([numbers[i], numbers[j]])\n            }\n        }\n    }\n    return pairs\n}\n## Documentation:\n\n/// Returns the pairs of numbers that sum to a given sum in a given list of numbers.\nfunc",
      "/// Returns the current date in a readable format.\n///\n/// - Returns: The current date in a readable format.\nfunc currentDateString() -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd.MM.yyyy\"\n    return formatter.string(from: Date())\n}\n\nFunction:\n\nfunc calculateTax(price: Double, taxRate: Double) -> Double {\n    return price * taxRate\n}\n## Documentation:\n/// Calculates the tax on a price.\n///\n/// - Parameters:\n///   - price: The price to calculate the tax on.\n///   - taxRate: The tax rate to apply.\n/// - Returns: The tax amount on the price.\nfunc calculateTax(price: Double, taxRate: Double) -> Double {\n    return price * taxRate\n}\n\nFunction:\n\nfunc calculateTax(price: Double, taxRate: Double) -> Double {\n    return price * taxRate\n}\n## Documentation:\n/// Calculates the tax on a price.\n///\n/// - Parameters:\n///   - price: The",
      "/// Возвращает короткое название решения (без привязки к размеру клетки)\n///\n/// - Parameters:\n///   - grid: Матрица с клетками\n///   - start: Координаты начала\n///   - end: Координаты конца\n/// - Returns: Минимальное расстояние между началом и концом\nfunc bfsShortestPath(grid: [[Int]], start: (Int, Int), end: (Int, Int)) -> Int? {\n    return nil\n}\n\n/// Возвращает короткое название решения (без привязки к размеру клетки)\n///\n//",
      "/// Returns whether a number is odd.\n///\n/// - Parameter number: The number to check.\n/// - Returns: `true` if `number` is odd, `false` otherwise.\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n\nFunction:\n\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n## Documentation:\n/// Returns whether a number is odd.\n///\n/// - Parameter number: The number to check.\n/// - Returns: `true` if `number` is odd, `false` otherwise.\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n\nFunction:\n\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}\n## Documentation:\n/// Returns whether a number is odd.\n///\n/// - Parameter number: The number to check.\n/// - Returns: `true` if `number` is odd, `false` otherwise.\n",
      "func isSquare(a: Int, of b: Int) -> Bool {\n    return a * a == b\n}\n\n## Description:\nGiven an integer, check whether it is a perfect square.\n\n## Parameters:\n* a: An integer.\n* b: An integer.\n\n## Returns:\n`true` if `a` is a perfect square; otherwise, `false`.\n\n## Example:\n```swift\nisSquare(a: 25, of: 5) // true\nisSquare(a: 16, of: 4) // true\n```\n\n## Notes:\n* The square of a number is the product of the number multiplied by itself.\n* A perfect square is an integer that is the square of an integer.\n* A perfect square is an integer that has a perfect square root.\n\n## Reference:\nhttps://en.wikipedia.org/wiki/Square_number\n\n```\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n///-\n",
      "/// Finds the minimum value in an array of integers.\n///\n/// - Parameter numbers: An array of integers.\n/// - Returns: The minimum value in the array, or `nil` if the array is empty.\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nFunction:\n\nfunc createNewItem(in store: Store, with name: String) -> Item {\n    let item = Item(name: name, store: store)\n    item.store.addItem(item)\n    return item\n}\n## Documentation:\n/// Creates a new item with the given name and stores it in the given store.\n///\n/// - Parameters:\n///   - store: The store to add the item to.\n///   - name: The name of the item.\n/// - Returns: The newly created item.\nfunc createNewItem(in store: Store, with name: String) -> Item {\n    let item = Item(name: name, store: store)\n    item.store.addItem(item)\n    return item\n}\n\nFunction:\n\nfunc incrementCounter",
      "/// Converts a string to lower case.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: The converted string.\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}\n\n##\n/// Converts a string to lower case.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: The converted string.\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}\n\n##\n/// Converts a string to lower case.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: The converted string.\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}\n\n##\n/// Converts a string to lower case.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: The converted string.\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}\n\n##\n/// Converts a string to lower",
      "/// Returns `true` if the given number is positive integer, `false` otherwise.\n///\n/// - Parameter number: The number to check.\n/// - Returns: `true` if the given number is positive integer, `false` otherwise.\n/// - Complexity: O(1)\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}\n\nFunction:\n\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}\n## Documentation:\n/// Returns `true` if the given number is positive integer, `false` otherwise.\n///\n/// - Parameter number: The number to check.\n/// - Returns: `true` if the given number is positive integer, `false` otherwise.\n/// - Complexity: O(1)\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}\n\nFunction:\n\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}\n## Documentation:\n/// Returns `true` if the given number is positive integer, `false",
      "/// Sums the elements of an array using the `+` operator.\nfunc sum(array: [Int]) -> Int {\n    return array.reduce(0, +)\n}\n\n## Documentation:\n/// Converts a value from one type to another.\n///\n/// - Parameter value: The value to convert.\n/// - Returns: The converted value.\nfunc convert(from: Int, to: String.Type) -> String {\n    return String(from)\n}\n\n## Documentation:\n/// Converts a value from one type to another.\n///\n/// - Parameter value: The value to convert.\n/// - Returns: The converted value.\nfunc convert(from: String, to: Int.Type) -> Int {\n    return Int(from) ?? 0\n}\n\n## Documentation:\n/// Returns the largest number of the given numbers.\n///\n/// - Parameter numbers: An array of numbers.\n/// - Returns: The largest number in the array.\nfunc max(numbers: [Int]) -> Int {\n    var largest = numbers[0]\n    for number in numbers {\n        if number > largest",
      "/// Returns all keys in the first dictionary that are not in the second.\nfunc keysInFirstNotInSecond<Key, Value>(_ dict1: [Key: Value], dict2: [Key: Value]) -> [Key] where Key: Hashable {\n    return Array(dict1.keys.filter { !dict2.keys.contains($0) })\n}\n\nFunction:\n\nfunc getItem(_ dictionary: [String: Int], forKey key: String) -> Int? {\n    return dictionary[key]\n}\n## Documentation:\n\n/// Returns the value for the given key, or nil if the key does not exist.\nfunc getItem(_ dictionary: [String: Int], forKey key: String) -> Int? {\n    return dictionary[key]\n}\n\nFunction:\n\nfunc getItem(_ dictionary: [String: Int], forKey key: String) -> Int? {\n    return dictionary[key]\n}\n## Documentation:\n\n/// Returns the value for the given key, or nil if the key does not exist.\nfunc getItem(_ dictionary: [String: Int], forKey key: String) -> Int? {",
      "/// Finds the maximum number in a list of numbers.\n///\n/// - Parameter numbers: A list of numbers to find the maximum of.\n/// - Returns: The maximum number in the list, or nil if the list is empty.\n/// - Complexity: O(n)\nfunc maxNumber(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}\n\nFunction:\n\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n## Documentation:\n/// Finds the minimum number in a list of numbers.\n///\n/// - Parameter numbers: A list of numbers to find the minimum of.\n/// - Returns: The minimum number in the list, or nil if the list is empty.\n/// - Complexity: O(n)\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}\n\nFunction:\n\nfunc sumNumbers(in numbers: [Int]) -> Int? {\n    return numbers.reduce(0, +)\n}\n## Documentation:\n/// Finds the sum of a list of",
      "/// Checks if a string contains a single letter.\nfunc isLetter(_ input: String) -> Bool {\n    return input.count == 1 && input.rangeOfCharacter(from: .letters) != nil\n}\n\nFunction:\n\nfunc getAllLetters(input: String) -> [String] {\n    return input.split(separator: \" \").map { String($0) }\n}\n## Documentation:\n/// Returns all the letters in a string.\nfunc getAllLetters(_ input: String) -> [String] {\n    return input.split(separator: \" \").map { String($0) }\n}\n\nFunction:\n\nfunc countLetters(input: String) -> Int {\n    return input.count\n}\n## Documentation:\n/// Counts the number of letters in a string.\nfunc countLetters(_ input: String) -> Int {\n    return input.count\n}\n\nFunction:\n\nfunc isPalindrome(input: String) -> Bool {\n    return input == String(input.reversed())\n}\n## Documentation:\n/// Checks if a string is a",
      "/// Converts a dictionary of key-value pairs to a string.\n///\n/// - Parameter dictionary: A dictionary of key-value pairs.\n/// - Returns: A string representation of the dictionary.\nfunc dictionaryToString<Key, Value>(_ dictionary: [Key: Value]) -> String where Key: Hashable {\n    return dictionary.map { \"\\($0.key): \\($0.value)\" }.joined(separator: \", \")\n}\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nFunction:\n\nfunc dictionaryToString<Key, Value>(_ dictionary: [Key: Value]) -> String where Key: Hashable {\n    return dictionary.map { \"\\($0.key): \\($0.value)\" }.joined(separator: \", \")\n}\n## Documentation:\n/// Converts a dictionary of key-value pairs to a string.\n///",
      "/// Sort strings alphabetically.\n///\n/// - Parameter strings: The strings to sort.\n/// - Returns: The sorted strings.\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}\n\nFunction:\n\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}\n## Documentation:\n/// Sort strings alphabetically.\n///\n/// - Parameter strings: The strings to sort.\n/// - Returns: The sorted strings.\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}\n\nFunction:\n\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}\n## Documentation:\n/// Sort strings alphabetically.\n///\n/// - Parameter strings: The strings to sort.\n/// - Returns: The sorted strings.\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}\n\nFunction:\n",
      "///-\n///-\n///-\n///-\n///-\n///-\n///-\nfunc stringToIntegerArrayByColon(_ str: String) -> [Int] {\n    return str.split(separator: \":\").compactMap { Int($0) }\n}\n\n/// Split a string into an array of integers by the colon character.\n///\n/// - Parameter str: The string to split.\n/// - Returns: An array of integers.\nfunc stringToIntegerArrayByColon(_ str: String) -> [Int] {\n    return str.split(separator: \":\").compactMap { Int($0) }\n}\n\n/// Split a string into an array of integers by the colon character.\n///\n/// - Parameter str: The string to split.\n/// - Returns: An array of integers.\nfunc stringToIntegerArrayByColon(_ str: String) -> [Int] {\n    return str.split(separator: \":\").compactMap { Int($0) }\n}\n\n/// Split a string into an array of integers by the colon character.\n///\n/// - Parameter str",
      "/// Remove a prefix from a string.\n///\n/// - Parameters:\n///   - string: The string to remove the prefix from.\n///   - prefix: The prefix to remove.\n/// - Returns: The string with the prefix removed.\nfunc removePrefix(_ string: String, prefix: String) -> String {\n    return string.hasPrefix(prefix) ? String(string.dropFirst(prefix.count)) : string\n}\n\n## Notes:\nThis function removes a prefix from a string. It does not perform any validation, so it is up to the caller to ensure that the string is valid.\n\n## Example:\nprint(removePrefix(\"Hello, World!\", prefix: \"Hello\")) // prints \"World!\"\nprint(removePrefix(\"Hello, World!\", prefix: \"World\")) // prints \"Hello\"\n\n## Prerequisites:\n- Understanding of Swift functions.\n- Familiarity with Swift syntax and comments.\n- Knowledge of the intended use of the function.\n\n## Challenges:\n- Write a function that takes two strings as parameters and returns the concatenation of the two strings.\n- Write a function that takes a string as a parameter and returns",
      "/// Inverts a dictionary, returning a new dictionary with the keys and values swapped.\n///\n/// - Parameter dictionary: A dictionary to invert.\n/// - Returns: A new dictionary with the keys and values swapped.\nfunc invertDictionary<K, V>(_ dictionary: [K: V]) -> [V: K] where K: Hashable, V: Hashable {\n    var result: [V: K] = [:]\n    for (key, value) in dictionary {\n        result[value] = key\n    }\n    return result\n}\n\n### Invert a Dictionary\n\nInvert a dictionary, returning a new dictionary with the keys and values swapped.\n\n- Parameter dictionary: A dictionary to invert.\n- Returns: A new dictionary with the keys and values swapped.\n\n#### Parameters\n\n* dictionary: A dictionary to invert.\n\n#### Returns\n\nA new dictionary with the keys and values swapped.\n\n### Invert a Dictionary\n\nInvert a dictionary, returning a new dictionary with the keys and values swapped.\n\n- Parameter dictionary: A dictionary to invert.\n- Returns: A new dictionary with the keys and values swapped",
      "/// Returns the sum of a set of integers.\n///\n/// - Parameter set: A set of integers.\n/// - Returns: The sum of the set.\n/// - Complexity: O(n)\nfunc sumOfSet(_ set: Set<Int>) -> Int {\n    return set.reduce(0, +)\n}\n\n## Notes:\n\nIn Swift, the function signature is documented by the /// comment.\nThe parameter description is in the function comment, and the return value description is in the function comment.\n\n## Related:\n\n* [Swift Documentation](https://developer.apple.com/documentation/swift/swift_documentation)\n* [Swift Documentation Style Guide](https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/StyleGuide.html)\n* [Swift Documentation Guidelines](https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/SwiftDocumentationGuidelines.html)\n* [Swift Documentation Style Guide](https://developer.apple.",
      "/// Converts a string to an array of characters.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: An array of characters.\nfunc stringToCharacterArray(_ str: String) -> [Character] {\n    return Array(str)\n}\n\n## Function:\n\nfunc multiplyByThree(_ number: Int) -> Int {\n    return number * 3\n}\n## Documentation:\n/// Multiplies a number by three.\n///\n/// - Parameter number: The number to multiply by three.\n/// - Returns: The product of the number and three.\nfunc multiplyByThree(_ number: Int) -> Int {\n    return number * 3\n}\n\n## Function:\n\nfunc multiplyByThree(_ number: Int) -> Int {\n    return number * 3\n}\n## Documentation:\n/// Multiplies a number by three.\n///\n/// - Parameter number: The number to multiply by three.\n/// - Returns: The product of the number and three.\nfunc multiplyByThree(_ number: Int) -> Int {\n    return number * 3\n}\n\n## Function:\n",
      "/// Returns a dictionary of character frequencies for a given string.\nfunc characterFrequencies(in text: String) -> [Character: Int] {\n    var result: [Character: Int] = [:]\n    for char in text {\n        result[char, default: 0] += 1\n    }\n    return result\n}\n\nFunction:\n\nfunc areaOfRectangle(length: Int, width: Int) -> Int {\n    return length * width\n}\n## Documentation:\n/// Returns the area of a rectangle with given length and width.\nfunc areaOfRectangle(length: Int, width: Int) -> Int {\n    return length * width\n}\n\nFunction:\n\nfunc isPalindrome(input: String) -> Bool {\n    return input == String(input.reversed())\n}\n## Documentation:\n/// Returns `true` if the input string is a palindrome.\nfunc isPalindrome(input: String) -> Bool {\n    return input == String(input.reversed())\n}\n\nFunction:\n\nfunc calculateTip(amount: Double, tipPercentage: Int) -> Double {\n    return amount * (Double(",
      "/// Merges a set of unique elements into a single array.\n/// - Parameters:\n///   - a: An array of elements to merge.\n///   - b: An array of elements to merge.\n/// - Returns: A new array containing all the elements from a and b.\n/// - Complexity: O(a.count + b.count) time.\nfunc mergeUnique<T: Hashable>(_ a: [T], _ b: [T]) -> [T] {\n    return Array(Set(a).union(b))\n}\n## Explanation:\n\nThis function merges a set of unique elements into a single array.\n\nThe function takes two arrays, a and b, as parameters, and returns a new array containing all the elements from a and b.\n\nThe function first uses the Set type to merge the two arrays into a single set.\n\nIt then uses the union method to merge the set with itself, which returns all the elements from the original set.\n\nThe function returns a new array containing all the elements from the set, which are unique elements from a and b.\n\n## Example:\n\nlet a = [1",
      "/// Returns true if the given string is a binary string, i.e., only contains 0s and 1s.\nfunc isBinary(_ input: String) -> Bool {\n    let binaryRegex = \"^[01]+$\"\n    let binaryTest = NSPredicate(format: \"SELF MATCHES %@\", binaryRegex)\n    return binaryTest.evaluate(with: input)\n}\n\n## Explanation:\n\n/// Returns true if the given string is a binary string, i.e., only contains 0s and 1s.\nfunc isBinary(_ input: String) -> Bool {\n    let binaryRegex = \"^[01]+$\"\n    let binaryTest = NSPredicate(format: \"SELF MATCHES %@\", binaryRegex)\n    return binaryTest.evaluate(with: input)\n}\n\n## Test:\n\nimport XCTest\n\nclass Tests: XCTestCase {\n    func testIsBinary() {\n        XCTAssertTrue(isBinary(\"1100100000110000011101000",
      "```swift\n/// Returns whether the given string ends with the given suffix.\nfunc endsWith(_ str: String, _ suffix: String) -> Bool {\n    return str.hasSuffix(suffix)\n}\n```\n\nUse /// style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\n## Function:\n\nfunc add(a: Int, b: Int) -> Int {\n    return a + b\n}\n## Documentation:\n\n```swift\n/// Adds two integers.\nfunc add(a: Int, b: Int) -> Int {\n    return a + b\n}\n```\n\nUse /// style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\n## Function:\n\nfunc add(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\n## Documentation:\n\n```swift\n/// Adds two integers.\nfunc add(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\n```\n",
      "/// Returns `true` if `str` is a palindrome, `false` otherwise.\n///\n/// - Parameter str: The string to be tested.\n/// - Returns: `true` if `str` is a palindrome, `false` otherwise.\nfunc isPalindrome(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n\n//: [Next](@next)\n",
      "/// Calculates the area of a polygon given the coordinates of its vertices.\nfunc polygonArea(_ points: [(x: Double, y: Double)]) -> Double {\n    let n = points.count\n    var area = 0.0\n    for i in 0..<n {\n        let j = (i + 1) % n\n        area += points[i].x * points[j].y\n        area -= points[j].x * points[i].y\n    }\n    return abs(area) / 2.0\n}\n\n## Tips:\n\n* When documenting a function, include the parameters and return type.\n* Use /// to mark the beginning of the comment.\n* Use /// to document parameters, and use /// to document the return type.\n* Use /// to document the return value.\n* Use /// to document the purpose of the function.\n* Use /// to document the purpose of the function, and document the parameters.\n* Use /// to document the purpose of the function, and document the parameters.\n* Use /// to document the purpose of the function, and document the parameters.\n* Use /// to document the purpose of",
      "/// Increments a given integer by one.\n///\n/// - Parameter number: The integer to increment.\n/// - Returns: The incremented number.\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}\n\n\nFunction:\n\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}\n## Documentation:\n/// Increments a given integer by one.\n///\n/// - Parameter number: The integer to increment.\n/// - Returns: The incremented number.\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}\n\n\nFunction:\n\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}\n## Documentation:\n/// Increments a given integer by one.\n///\n/// - Parameter number: The integer to increment.\n/// - Returns: The incremented number.\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}\n\n\nFunction:\n\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}\n## Documentation:\n/// Increments",
      "func findPeakElement(_ array: [Int]) -> Int? {\n    guard !array.isEmpty else { return nil }\n    for i in 0..<array.count {\n        let prev = i > 0 ? array[i-1] : Int.min\n        let next = i < array.count-1 ? array[i+1] : Int.min\n        if array[i] >= prev && array[i] >= next { return i }\n    }\n    return nil\n}\n\n## Swift:\n\nfunc findPeakElement(_ array: [Int]) -> Int? {\n    guard !array.isEmpty else { return nil }\n    for i in 0..<array.count {\n        let prev = i > 0 ? array[i-1] : Int.min\n        let next = i < array.count-1 ? array[i+1] : Int.min\n        if array[i] >= prev && array[i] >= next { return i }\n    }\n    return nil\n}\n\n## Swift:\n\nfunc findPeakElement(_ array: [Int]) -> Int? {\n    guard !array.isEmpty else { return n",
      "/// Checks if a string is a float number.\n///\n/// - Parameters:\n///   - str: The string to check.\n///   - Returns: Whether the string is a float number.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n## What's wrong with this code?\n\nThe following code is missing documentation.\n\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n## Corrected code\n\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n## What's wrong with this code?\n\nThe following code is missing documentation.\n\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n## Corrected code\n\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}\n\n## What's wrong with this code?\n\nThe following code is missing documentation.\n\nfunc isFloatNumber(_ str: String",
      "///-secondsToTime(_:)\n///-\n///- Parameters:\n///- totalSeconds: An integer representing the number of seconds to convert.\n///-\n///- Returns:\n///- A tuple containing the hours, minutes, and seconds of the passed total seconds.\nfunc secondsToTime(_ totalSeconds: Int) -> (hours: Int, minutes: Int, seconds: Int) {\n    return (totalSeconds / 3600, (totalSeconds % 3600) / 60, totalSeconds % 60)\n}\n\n/// `secondsToTime(_:)` converts an integer representing the number of seconds to return a tuple containing the hours, minutes, and seconds of the passed total seconds.\nfunc secondsToTime(_ totalSeconds: Int) -> (hours: Int, minutes: Int, seconds: Int) {\n    return (totalSeconds / 3600, (totalSeconds % 3600) / 60, totalSeconds % 60)\n}\n\n/// `secondsToTime(_:)` converts an integer representing the number of seconds to return a tuple containing the hours",
      "/// Returns true if the input string is a palindrome, ignoring spaces and\n/// case.\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n/// Returns true if the input string is a palindrome, ignoring spaces and\n/// case.\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}\n\n## Markdown:\n\n# Documentation:\n\n- Returns true if the input string is a palindrome, ignoring spaces and\n  case.\n\n- Returns true if the input string is a palindrome, ignoring spaces and\n  case.\n\n- Returns true if the input string is a palindrome, ignoring spaces and\n  case.\n\n## Markdown:\n\n# Documentation:\n\n- Returns true if the input string is a palindrome, ignoring spaces and\n  case",
      "/// Splits a string into a list of floats by whitespace and period characters.\nfunc stringToFloatArrayBySpaceAndPeriod(_ str: String) -> [Float] {\n    return str.split { $0 == \" \" || $0 == \".\" }.compactMap { Float($0) }\n}\n\n\n### Function:\n\nfunc getRandomInt(min: Int, max: Int) -> Int {\n    return Int(arc4random_uniform(UInt32(max - min + 1))) + min\n}\n## Documentation:\n/// Returns a random integer between min and max.\nfunc getRandomInt(min: Int, max: Int) -> Int {\n    return Int(arc4random_uniform(UInt32(max - min + 1))) + min\n}\n\n\n### Function:\n\nfunc printNumbers(from: Int, to: Int) {\n    for number in from...to {\n        print(number, terminator: \" \")\n    }\n}\n## Documentation:\n/// Prints all numbers between `from` and `to` (inclusive).\nfunc printNumbers(from: Int, to: Int) {\n   ",
      "/// Returns the sum of the squares of the elements of the given array.\n///\n/// - Parameter array: The array whose elements should be squared and added.\n/// - Returns: The sum of the squares of the elements of the given array.\nfunc sumOfSquares(_ array: [Int]) -> Int {\n    return array.reduce(0) { $0 + $1 * $1 }\n}\n\nFunction:\n\nfunc factorial(_ n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(n - 1)\n}\n## Documentation:\n/// Returns the factorial of the given non-negative integer.\n///\n/// - Parameter n: The non-negative integer whose factorial should be returned.\n/// - Returns: The factorial of the given non-negative integer.\nfunc factorial(_ n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(n - 1)\n}\n\nFunction:\n\nfunc fibonacci(_ n: Int) -> Int {\n    if n == 0 || n == 1 {\n        return n\n    }\n   ",
      "/// Converts a number to a percentage string.\n///\n/// - Parameter number: The number to convert to a percentage string.\n/// - Returns: The percentage string.\n/// - Example:\n/// ```\n/// toPercentage(100.0)\n/// // returns \"100.00%\"\n/// ```\n\n/// Converts a number to a percentage string.\n///\n/// - Parameter number: The number to convert to a percentage string.\n/// - Returns: The percentage string.\n/// - Example:\n/// ```\n/// toPercentage(100.0)\n/// // returns \"100.00%\"\n/// ```\n\n/// Converts a number to a percentage string.\n///\n/// - Parameter number: The number to convert to a percentage string.\n/// - Returns: The percentage string.\n/// - Example:\n/// ```\n/// toPercentage(100.0)\n/// // returns \"100.00%\"\n/// ```\nfunc toPercentage(_ number: Double",
      "/// Returns the product of numbers in a string.\nfunc productOfNumbersInString(_ str: String) -> Double {\n    let numbers = str.split(separator: \" \").compactMap { Double($0) }\n    return numbers.reduce(1, *)\n}\n\nFunction:\n\nfunc fibonacci(_ n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}\n## Documentation:\n/// Calculates the nth number in the Fibonacci sequence.\nfunc fibonacci(_ n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nFunction:\n\nfunc reverse(_ str: String) -> String {\n    return String(str.reversed())\n}\n## Documentation:\n/// Reverses a string.\nfunc reverse(_ str: String) -> String {\n    return String(str.reversed())\n}\n\nFunction:\n\nfunc find(_ str: String, _ pattern: String)",
      "/// Returns `true` if the two strings are anagrams of each other.\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.lowercased().sorted() == str2.lowercased().sorted()\n}\n\n## What it should look like:\n\n/// Returns `true` if the two strings are anagrams of each other.\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.lowercased().sorted() == str2.lowercased().sorted()\n}\n\n## Why it is good:\n\n- Better understanding of the function's purpose.\n- More concise than traditional documentation.\n\n## Why it is not good:\n\n- It is not very descriptive.\n- Does not include all of the parameters.\n- The comment is not reusable.\n\n## What you should do:\n\n- Use ///-style Swift comments.\n- Include parameter and return descriptions, and emphasize intent over implementation.\n- Return only the comment and the function.\n",
      "/// Return the hour hand's position in degrees from 0 to 360.\n///\n/// - Parameter hour: The hour.\n/// - Parameter minutes: The minutes.\n/// - Returns: The hour hand's position in degrees from 0 to 360.\nfunc hourHandAngle(hour: Int, minutes: Int) -> Double {\n    let hourPosition = Double(hour % 12) * 30 + Double(minutes) * 0.5\n    return hourPosition\n}\n\nFunction:\n\nfunc minuteHandAngle(hour: Int, minutes: Int) -> Double {\n    let hourPosition = Double(hour % 12) * 30 + Double(minutes) * 0.5\n    return hourPosition\n}\n## Documentation:\n/// Return the minute hand's position in degrees from 0 to 360.\n///\n/// - Parameter hour: The hour.\n/// - Parameter minutes: The minutes.\n/// - Returns: The minute hand's position in degrees from 0 to 360.\nfunc minuteHandAngle(hour: Int, minutes: Int) -> Double {\n   ",
      "/// Converts a Double array to a String array with the specified precision.\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}\n\nFunction:\n\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}\n## Documentation:\n/// Converts a Double array to a String array with the specified precision.\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}\n\nFunction:\n\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}\n## Documentation:\n/// Converts a Double array to a String array with the specified precision.\nfunc numberArray",
      "func keysWithValuesGreaterThanThreshold(\n    _ dictionary: [Key: Value],\n    threshold: Value\n) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold }.map { $0.key }\n}\n## Documentation:\n\nfunc keysWithValuesGreaterThanThreshold(_ dictionary: [Key: Value], threshold: Value) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold }.map { $0.key }\n}\n## Documentation:\n\nfunc keysWithValuesGreaterThanThreshold(\n    _ dictionary: [Key: Value],\n    threshold: Value\n) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold }.map { $0.key }\n}\n## Documentation:\n\nfunc keysWithValuesGreaterThanThreshold(\n    _ dictionary: [Key: Value],\n    threshold: Value\n) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold",
      "/// Combines two arrays by zipping them together into a single array of tuples.\nfunc zipArrays<A, B>(_ a: [A], _ b: [B]) -> [(A, B)] {\n    return Array(zip(a, b))\n}\n\nFunction:\n\nfunc reverse(_ array: [Int]) -> [Int] {\n    return array.reversed()\n}\n## Documentation:\n/// Returns a reversed version of the given array.\nfunc reverse(_ array: [Int]) -> [Int] {\n    return array.reversed()\n}\n\nFunction:\n\nfunc swapValues<T>(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n## Documentation:\n/// Swaps the values of two variables.\nfunc swapValues<T>(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n\nFunction:\n\nfunc removeDuplicates<T: Equatable>(_ array: [T]) -> [T] {\n    var result = [T]()\n   ",
      "/// Returns an array of keys for a given value in a dictionary.\n///\n/// - Parameters:\n///   - dictionary: A dictionary to search.\n///   - value: A value to search for.\n/// - Returns: An array of keys that match the value.\n/// - Throws: A `KeyNotFound` error if the value isn't in the dictionary.\nfunc keysForValue<K, V: Equatable>(_ dictionary: [K: V], value: V) -> [K] {\n    return dictionary.filter { $0.value == value }.map { $0.key }\n}\n\nfunc keysForValue<K, V: Equatable>(_ dictionary: [K: V], value: V) -> [K] {\n    return dictionary.filter { $0.value == value }.map { $0.key }\n}\n\n## How to Write Good Documentation\n\nDocumentation should be written in a way that is clear, concise, and easy to understand. It should provide enough information to help developers understand the purpose and use of a function or class without overwhelming them with unnecessary details.\n\nWhen writing documentation, it is important",
      "/// Counts the number of vowels in a given text.\nfunc vowelCount(in text: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return text.filter { vowels.contains($0) }.count\n}\n## Examples:\n\n/// Counts the number of vowels in a given text.\n///\n/// - Parameter text: The text to count the vowels of.\n/// - Returns: The number of vowels in the text.\nfunc vowelCount(in text: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return text.filter { vowels.contains($0) }.count\n}\n\n## Notes:\n\n- This is a function that counts the number of vowels in a given text.\n- The function returns the number of vowels in the text.\n- The text is filtered to return only the vowels.\n- The vowels are then counted.\n- The function takes a single parameter, text, which is a String.\n- The function returns an Int.\n\n### Usage:\n\n/// Counts the number of vowels in a given text.\n///\n/// -",
      "/// Returns true if the string contains only alphabetic characters.\n///\n/// - Parameter input: A string.\n/// - Returns: `true` if the string contains only alphabetic characters; `false` otherwise.\n///\n/// - Complexity: O(n) where n is the length of `input`.\nfunc isAlphabetic(_ input: String) -> Bool {\n    return input.allSatisfy { $0.isLetter }\n}\n\n/// Returns true if the string contains only alphabetic characters.\n///\n/// - Parameter input: A string.\n/// - Returns: `true` if the string contains only alphabetic characters; `false` otherwise.\n///\n/// - Complexity: O(n) where n is the length of `input`.\nfunc isAlphabetic(_ input: String) -> Bool {\n    return input.allSatisfy { $0.isLetter }\n}\n\n/// Returns true if the string contains only alphabetic characters.\n///\n/// - Parameter input: A string.\n/// - Returns: `true` if the string contains only alphabetic characters; `false",
      "/**\nSorts an array of strings by their length in descending order.\n*/\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}\n\nFunction:\n\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}\n## Documentation:\n\n/**\nSorts an array of strings by their length in descending order.\n*/\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}\n\nFunction:\n\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}\n## Documentation:\n\n/**\nSorts an array of strings by their length in descending order.\n*/\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.",
      "/// Converts a string to uppercase characters.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: The uppercased string.\n///\n/// - Precondition: input.isEmpty\nfunc stringToUppercaseCharacters(input: String) -> [Character] {\n    return input.uppercased().map { $0 }\n}\n\n## Challenge\nWrite a function that takes a string of ASCII characters and returns the number of characters that are lowercase.\n\nfunc lowercaseCharacters(input: String) -> Int {\n    return input.lowercased().count\n}\n\n## Documentation:\n/// Counts the number of lowercase characters in a string.\n///\n/// - Parameter input: The string to count.\n/// - Returns: The count.\n///\n/// - Precondition: input.isEmpty\nfunc lowercaseCharacters(input: String) -> Int {\n    return input.lowercased().count\n}\n\n## Challenge\nWrite a function that takes a string of ASCII characters and returns the number of characters that are uppercase.\n\nfunc uppercaseCharacters(input: String) ->",
      "/// Returns `true` if the given string is a valid IPv4 address.\n///\n/// - Parameter ip: The string to check.\n/// - Returns: `true` if the string is a valid IPv4 address, `false` otherwise.\n/// - Complexity: O(n) where n is the length of `ip`.\nfunc isValidIPv4(_ ip: String) -> Bool {\n    let components = ip.split(separator: \".\")\n    guard components.count == 4 else { return false }\n    return components.allSatisfy { component in\n        if let num = Int(component), num >= 0, num <= 255 {\n            return true\n        }\n        return false\n    }\n}\n\nFunction:\n\nfunc isValidIPv6(_ ip: String) -> Bool {\n    let components = ip.split(separator: \":\")\n    guard components.count == 8 else { return false }\n    return components.allSatisfy { component in\n        if let num = Int(component, radix: 16) {\n            return true\n        }\n        return false\n    }\n}\n## Documentation:\n/// Returns",
      "/// Copies a file from one location to another.\n///\n/// - Parameters:\n///   - from: The path to the file to copy.\n///   - to: The path to the new location of the file.\n/// - Returns: True if the copy was successful.\nfunc copyFile(from: String, to: String) -> Bool {\n    do {\n        try FileManager.default.copyItem(atPath: from, toPath: to)\n        return true\n    } catch {\n        return false\n    }\n}\n\n## Discussion\n\nThe function copyFile() is used to copy a file from one location to another. It takes two parameters: the path to the file to copy and the path to the new location of the file. It returns a boolean indicating whether the copy was successful or not.\n\nThe function copyFile() is documented by including a comment that describes its purpose and parameters. It also includes a return description that emphasizes the function's intent over its implementation.\n\n## Challenge\n\nWrite documentation for the following function:\n\nfunc readFile(atPath: String) -> String? {\n    if let data = try? Data(contentsOf:",
      "/// Converts a string to an array of characters without punctuation.\n///\n/// - Parameter input: The string to convert.\n/// - Returns: The converted string.\n///\n/// - Complexity: O(n) where n is the length of the input string.\nfunc stringToCharacterArrayWithoutPunctuation(input: String) -> [Character] {\n    let punctuationSet = CharacterSet.punctuationCharacters\n    let cleanedInput = input.components(separatedBy: punctuationSet).joined()\n    return Array(cleanedInput)\n}\n\n## Code\n\nfunc stringToCharacterArrayWithoutPunctuation(input: String) -> [Character] {\n    let punctuationSet = CharacterSet.punctuationCharacters\n    let cleanedInput = input.components(separatedBy: punctuationSet).joined()\n    return Array(cleanedInput)\n}\n\n## Code\n\nfunc stringToCharacterArrayWithoutPunctuation(input: String) -> [Character] {\n    let punctuationSet = CharacterSet.punctuationCharacters\n    let cleanedInput = input.components(separatedBy: punctuationSet).joined()\n    return Array(cleanedInput)\n}\n\n## Code",
      "/// Counts the number of times a specific character appears in a string.\nfunc countCharacter(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}\n\nFunction:\n\nfunc countCharacters(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}\n## Documentation:\n/// Counts the number of times a specific character appears in a string.\nfunc countCharacters(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}\n\nFunction:\n\nfunc countCharacters(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}\n## Documentation:\n/// Counts the number of times a specific character appears in a string.\nfunc countCharacters(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}\n\nFunction:\n\nfunc countCharacters(_ str: String, _ char: Character) -> Int {\n   ",
      "/// Sorts a list of elements using the insertion sort algorithm.\n/// - Parameter array: The list of elements to sort.\n/// - Returns: The sorted list of elements.\nfunc insertionSort<T: Comparable>(_ array: [T]) -> [T] {\n    var arr = array\n    for i in 1..<arr.count {\n        var j = i\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swapAt(j, j-1)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n/// Sorts a list of elements using the insertion sort algorithm.\n/// - Parameter array: The list of elements to sort.\n/// - Returns: The sorted list of elements.\nfunc insertionSort<T: Comparable>(_ array: [T]) -> [T] {\n    var arr = array\n    for i in 1..<arr.count {\n        var j = i\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swapAt(j, j-1)\n            j -= 1\n        }\n    }",
      "/// Реализация метода Ланцоша для больших разреженных матриц\nfunc lanczosAlgorithm(matrix: [[Double]]) -> [Double] {\n    return []\n}\n\n/// Реализация метода Ланцоша для больших разреженных матриц\nfunc lanczosAlgorithm(matrix: [[Double]]) -> [Double] {\n    return []\n}\n\n/// Реализация метода Ланцоша для больших разреженных матриц\nfunc lanczosAlgorithm(matrix: [[Double]]) -> [Double] {\n    return []\n}\n\n## Вывод:\nВсе правила выполнены.\nДокументация устойчива к измен",
      "/// Returns the factorial of `n`.\n///\n/// - Parameter n: The number to find the factorial of.\n/// - Returns: The factorial of `n`.\nfunc factorial(_ n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(of: n - 1)\n}\n\nFunction:\n\nfunc calculateArea(for a: Area) -> Double {\n    switch a {\n    case .circle:\n        return Double.pi * pow(radius, 2)\n    case .square:\n        return pow(side, 2)\n    case .rectangle:\n        return width * height\n    }\n}\n## Documentation:\n\n/// Calculates the area of an `Area`.\n///\n/// - Parameter a: The area to calculate the area of.\n/// - Returns: The area.\nfunc calculateArea(for a: Area) -> Double {\n    switch a {\n    case .circle:\n        return Double.pi * pow(radius, 2)\n    case .square:\n        return pow(side, 2)\n    case .rectangle:\n        return width * height\n    }\n}",
      "func filterDictionaryByValue<Key, Value>(_ dictionary: [Key: Value], condition: (Value) -> Bool) -> [Key: Value] where Key: Hashable {\n    /// Filters a dictionary based on a condition applied to the dictionary's value\n    ///\n    /// - Parameters:\n    ///   - dictionary: A dictionary of key-value pairs\n    ///   - condition: A closure that returns a boolean value indicating if the key-value pair should be included in the result\n    ///\n    /// - Returns: A dictionary of key-value pairs that meet the given condition\n    func filterDictionaryByValue(\n        _ dictionary: [Key: Value],\n        condition: (Value) -> Bool) -> [Key: Value] where Key: Hashable {\n        return dictionary.filter { condition($0.value) }\n    }\n}\n\n## Example\n\nfunc testFilterDictionaryByValue() {\n    let testDictionary = [\"one\": 1, \"two\": 2, \"three\": 3]\n    let filtered = filterDictionaryByValue(testDictionary, condition: { $0 % 2 == 0 })\n    print(filtered)\n}\n\n## Discussion\n\n",
      "/// Finds the longest string in an array of strings.\nfunc longestString(inArray array: [String]) -> String? {\n    /// Returns the longest string in an array of strings.\n    ///\n    /// - Parameter array: An array of strings.\n    /// - Returns: The longest string in the array, or nil if the array is empty.\n    return array.max { $0.count < $1.count }\n}\n\n## Review:\n\n- 326 lines of code\n- 174 lines of documentation\n- 174 lines of code\n- 174 lines of documentation\n- 3 lines of code\n- 3 lines of documentation\n\n## Result:\n\n- 174 lines of code\n- 174 lines of documentation\n- 174 lines of code\n- 174 lines of documentation\n- 3 lines of code\n- 3 lines of documentation\n\n## Bonus:\n\n- 174 lines of code\n- 174 lines of documentation\n- 174 lines of code\n- 174 lines of documentation\n- ",
      "/// Returns the sum of an array of integers.\n///\n/// - Parameter numbers: An array of integers.\n/// - Returns: The sum of the array of integers.\nfunc sumOfArray(_ numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}\n\n\n## Question 5:\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nFunction:\n\nfunc sumOfArray(_ numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}\n## Documentation:\n\n/// Returns the sum of an array of integers.\n///\n/// - Parameter numbers: An array of integers.\n/// - Returns: The sum of the array of integers.\nfunc sumOfArray(_ numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}\n\n\n## Question 6:\n\nYou are",
      "/// Converts a decimal value to a hexadecimal string.\n///\n/// - Parameter decimal: The decimal value to convert.\n/// - Returns: A hexadecimal string representation of the value.\n///\n/// - Example:\n/// ```\n/// decimalToHex(10) // returns \"a\"\n/// ```\n///\n/// - Note:\n/// The return value is always a hexadecimal string, so this function can be used as a drop-in replacement for [Int.hexadecimalString](https://developer.apple.com/documentation/swift/int/hexadecimalstring) in Swift 5.2 or later.\nfunc decimalToHex(_ decimal: Int) -> String {\n    String(format: \"%02X\", decimal)\n}\n\n```\n\n## Solution\n\n```swift\n/// Converts a decimal value to a hexadecimal string.\n///\n/// - Parameter decimal: The decimal value to convert.\n/// - Returns: A hexadecimal string representation of the value.\n///\n/// - Example",
      "/// Computes the geometric mean of the given numbers.\n///\n/// - Parameter numbers: A list of numbers.\n/// - Returns: The geometric mean of the numbers.\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/Double(numbers.count))\n}\n\n## Explanation:\n/// Computes the geometric mean of the given numbers.\n///\n/// - Parameter numbers: A list of numbers.\n/// - Returns: The geometric mean of the numbers.\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/Double(numbers.count))\n}\n\n/// Computes the geometric mean of the given numbers.\n///\n/// - Parameter numbers: A list of numbers.\n/// - Returns: The geometric mean of the numbers.\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/Double(numbers.count))\n}\n\n",
      "func formatCurrency(_ amount: Double) -> String {\n    /// Returns the given amount formatted as currency.\n    ///\n    /// - Parameter amount: The amount to format.\n    /// - Returns: The formatted amount.\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount)\"\n}\n\n\n/// Returns the given amount formatted as currency.\n///\n/// - Parameter amount: The amount to format.\n/// - Returns: The formatted amount.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount)\"\n}\n\n/// Returns the given amount formatted as currency.\n///\n/// - Parameter amount: The amount to format.\n/// - Returns: The formatted amount.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    return formatter.string(from",
      "/// Converts a string to snake case.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The converted string.\nfunc toSnakeCase(_ str: String) -> String {\n    return str.lowercased().replacingOccurrences(of: \" \", with: \"_\")\n}\n\n## Documentation:\n\n/// Converts a string to snake case.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The converted string.\nfunc toSnakeCase(_ str: String) -> String {\n    return str.lowercased().replacingOccurrences(of: \" \", with: \"_\")\n}\n\n/// Converts a string to snake case.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The converted string.\nfunc toSnakeCase(_ str: String) -> String {\n    return str.lowercased().replacingOccurrences(of: \" \", with: \"_\")\n}\n\n/// Converts a string to snake case.\n///\n/// - Parameter str: The string to convert.",
      "/// Returns `true` if the given `text` string contains the given `substring`.\nfunc containsSubstring(_ text: String, substring: String) -> Bool {\n    return text.range(of: substring) != nil\n}\n## Discussion:\n\nThis function is used to check if a string contains another string. It is useful for finding strings in a larger string.\n\n## Challenge:\n\nWrite a function that returns the longest word in a string.\n\n## Solution:\n\nfunc longestWord(in string: String) -> String? {\n    let words = string.components(separatedBy: .whitespacesAndNewlines)\n    return words.sorted(by: { $0.count > $1.count }).first\n}\n## Discussion:\n\nThe function takes a string as an argument and returns the longest word in the string. It uses the `components(separatedBy:)` method to split the string into an array of words, and then sorts the words by length in descending order. The `first` method is used to return the first element in the array, which is the longest word.\n\n## Challenge:\n\nWrite a function",
      "/// Reads the contents of a file and returns it as a `String`.\n///\n/// - Parameters:\n///   - path: The path to the file to read.\n/// - Returns: The contents of the file as a `String`.\n/// - Throws: `Error` if the file cannot be read.\nfunc readFile(at path: String) -> String? {\n    do {\n        let fileData = try String(contentsOfFile: path, encoding: .utf8)\n        return fileData\n    } catch {\n        return nil\n    }\n}\n## Notes:\n- Reads the contents of a file and returns it as a `String`.\n- Parameters:\n  - path: The path to the file to read.\n- Returns: The contents of the file as a `String`.\n- Throws: `Error` if the file cannot be read.\n- Notes:\n- Reads the contents of a file and returns it as a `String`.\n- Parameters:\n- - path: The path to the file to read.\n- - Returns: The contents of the file as a `String`.\n- Throws: `Error` if the",
      "func firstIndex(of element: T, in array: [T]) -> Int? where T: Equatable {\n    /// Returns the index of the first occurrence of `element` in `array` if it is contained in `array`, otherwise returns `nil`.\n    return array.firstIndex(of: element)\n}\n\nFunction:\n\nfunc find<T: Equatable>(in array: [T], _ element: T) -> Int? {\n    return array.firstIndex(of: element)\n}\n## Documentation:\nfunc find(in array: [T], _ element: T) -> Int? {\n    /// Returns the index of the first occurrence of `element` in `array` if it is contained in `array`, otherwise returns `nil`.\n    return array.firstIndex(of: element)\n}\n\nFunction:\n\nfunc find<T: Equatable>(in array: [T], _ element: T) -> Int? {\n    return array.firstIndex(of: element)\n}\n## Documentation:\nfunc find(in array: [T], _ element: T) -> Int? {\n    /// Returns the index of the first occurrence",
      "/// Returns the maximum value in an array of doubles.\n///\n/// - Parameter values: The values to find the maximum of.\n/// - Returns: The maximum value in the array.\nfunc maxValue(in values: [Double]) -> Double? {\n    return values.max()\n}\n\nFunction:\n\nfunc isEven(number: Int) -> Bool {\n    return number % 2 == 0\n}\n## Documentation:\n/// Returns `true` if the given number is even, and `false` otherwise.\n///\n/// - Parameter number: The number to check.\n/// - Returns: `true` if the number is even, and `false` otherwise.\nfunc isEven(number: Int) -> Bool {\n    return number % 2 == 0\n}\n\nFunction:\n\nfunc isPrime(number: Int) -> Bool {\n    guard number > 1 else {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(number))) {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n## Documentation:\n/// Returns `",
      "///-countCharacters(_:)\n///-Counts the number of characters in a string.\n///-Parameters:\n///-str: A string to count the characters of.\n///-Returns:\n///-The number of characters in the string.\n\n## Explanation:\n///-Counts the number of characters in a string.\n///-Parameters:\n///-str: A string to count the characters of.\n///-Returns:\n///-The number of characters in the string.\n\n### Example:\n///-countCharacters(\"Hello\")\n///-Returns 5\n\n### Notes:\n///-If the string is empty, the function should return 0.\n///-If the string is not a string, the function should return 0.\n\n### Precondition:\n///-The string is not empty.\n///-The string is not nil.\n\n### Postcondition:\n///-Returns the number of characters in the string.\n\n### Edge case:\n///-Returns 0 if the string is empty.\n///-Returns 0 if the string is nil.\n\n## Use cases:\n///-Counts the number of characters in",
      "/// Generate a random alpha-numeric string of length `length`.\n///\n/// - Parameter length: The desired length of the string.\n/// - Returns: A random alpha-numeric string of length `length`.\nfunc generateRandomAlphaNumericString(length: Int) -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).compactMap { _ in characters.randomElement() })\n}\n## Documentation:\n/// Generate a random alpha-numeric string of length `length`.\n///\n/// - Parameter length: The desired length of the string.\n/// - Returns: A random alpha-numeric string of length `length`.\nfunc generateRandomAlphaNumericString(length: Int) -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).compactMap { _",
      "func isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}\n\nFunction:\n\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}\n## Documentation:\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}\n\nFunction:\n\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}\n## Documentation:\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex =",
      "/// Given a 2D array of integers, flatten the array and return it as a 1D array.\n///\n/// - Parameter matrix: A 2D array of integers.\n/// - Returns: A 1D array of integers.\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}\n\nFunction:\n\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}\n## Documentation:\n/// Given a 2D array of integers, flatten the array and return it as a 1D array.\n///\n/// - Parameter matrix: A 2D array of integers.\n/// - Returns: A 1D array of integers.\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}\n\nFunction:\n\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}\n## Documentation:\n/// Given a 2D array of integers, flatten the array and return",
      "/// Returns the sum of squares of numbers from 1 to n.\nfunc sumOfSquares(upTo n: Int) -> Int {\n    return (1...n).map { $0 * $0 }.reduce(0, +)\n}\n\n/// Returns the sum of squares of numbers from 1 to n.\n///\n/// - Parameter n: The upper bound of the sum.\n/// - Returns: The sum of squares of numbers from 1 to n.\nfunc sumOfSquares(upTo n: Int) -> Int {\n    return (1...n).map { $0 * $0 }.reduce(0, +)\n}\n\n/// Returns the sum of squares of numbers from 1 to n.\n///\n/// - Parameter n: The upper bound of the sum.\n/// - Returns: The sum of squares of numbers from 1 to n.\nfunc sumOfSquares(upTo n: Int) -> Int {\n    return (1...n).map { $0 * $0 }.reduce(0, +)\n}\n\n/// Returns the sum of squares of numbers from 1 to n.",
      "func isValidIPv4(_ text: String) -> Bool {\n    /// Checks if a string of four decimal numbers separated by periods is a valid IPv4 address.\n    ///\n    /// - Parameter text: A string containing four decimal numbers separated by periods.\n    /// - Returns: `true` if the string is a valid IPv4 address, `false` otherwise.\n    func isValidIPv4(text: String) -> Bool {\n        let components = text.split(separator: \".\")\n        guard components.count == 4 else { return false }\n        return components.allSatisfy {\n            guard let number = Int($0), (0...255).contains(number) else { return false }\n            return true\n        }\n    }\n}\n## Format:\nfunc isValidIPv4(_ text: String) -> Bool {\n    /// Checks if a string of four decimal numbers separated by periods is a valid IPv4 address.\n    ///\n    /// - Parameter text: A string containing four decimal numbers separated by periods.\n    /// - Returns: `true` if the string is a valid IPv4 address, `false` otherwise.\n    func is",
      "/// Returns whether a given number is a prime number.\n///\n/// - Parameters:\n///   - number: A number to check for primeness.\n/// - Returns: `true` if the number is a prime number, `false` otherwise.\n/// - Complexity:\n///   - `O(sqrt(number))` time complexity.\nfunc isPrimeNumber(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n## Documenting Swift Code\n\nYou are documenting a Swift codebase. Given a function and a short description of where and how it is used, write a documentation comment that helps future developers understand its purpose.\nUse ///-style Swift comments.\nInclude parameter and return descriptions, and emphasize intent over implementation.\nReturn only the comment and the function.\n\nFunction:\n\nfunc isPrimeNumber(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    for i in 2..<number {\n        if number % i",
      "func startsWithDigit(text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}\n\nFunction:\n\nfunc calculateArea(_ width: Int, _ height: Int) -> Int {\n    return width * height\n}\n## Documentation:\nfunc calculateArea(width: Int, height: Int) -> Int {\n    return width * height\n}\n\nFunction:\n\nfunc calculateArea(_ width: Int, _ height: Int) -> Int {\n    return width * height\n}\n## Documentation:\nfunc calculateArea(width: Int, height: Int) -> Int {\n    return width * height\n}\n\nFunction:\n\nfunc calculateArea(_ width: Int, _ height: Int) -> Int {\n    return width * height\n}\n## Documentation:\nfunc calculateArea(width: Int, height: Int) -> Int {\n    return width * height\n}\n\nFunction:\n\nfunc calculateArea(_ width: Int, _ height: Int) -> Int {\n    return width * height\n}\n## Documentation:\nfunc calculateArea(width: Int, height: Int) -> Int {\n    return width *",
      "/// Splits a string into a Float array by dot.\n///\n/// - Parameter str: The string to split.\n/// - Returns: The split array.\n/// - Complexity: O(n)\nfunc stringToFloatArrayByDots(_ str: String) -> [Float] {\n    return str.split(separator: \".\").compactMap { Float($0) }\n}\n\nFunction:\n\nfunc stringToFloatArrayByCommas(_ str: String) -> [Float] {\n    return str.split(separator: \",\").compactMap { Float($0) }\n}\n## Documentation:\n\n/// Splits a string into a Float array by comma.\n///\n/// - Parameter str: The string to split.\n/// - Returns: The split array.\n/// - Complexity: O(n)\nfunc stringToFloatArrayByCommas(_ str: String) -> [Float] {\n    return str.split(separator: \",\").compactMap { Float($0) }\n}\n\nFunction:\n\nfunc stringToFloatArrayByCommas(_ str: String) -> [",
      "/// The square difference between two numbers.\n///\n/// - Parameters:\n///   - a: The first number.\n///   - b: The second number.\n/// - Returns: The square difference between the two numbers.\nfunc squareDifference(a: Int, b: Int) -> Int {\n    return (a + b) * (a + b) - (a * a + b * b)\n}\n\n## Performance:\n\n/// The square difference between two numbers.\n///\n/// - Parameters:\n///   - a: The first number.\n///   - b: The second number.\n/// - Returns: The square difference between the two numbers.\nfunc squareDifference(a: Int, b: Int) -> Int {\n    return (a + b) * (a + b) - (a * a + b * b)\n}\n\n## Complexity:\n\n/// The square difference between two numbers.\n///\n/// - Parameters:\n///   - a: The first number.\n///   - b: The second number.\n/// - Returns: The square difference between the",
      "/// Convert an array of key-value tuples to a dictionary.\n///\n/// - Parameter pairs: A collection of key-value tuples.\n/// - Returns: A dictionary containing the key-value pairs.\nfunc dictionaryFromPairs<K, V>(_ pairs: [(K, V)]) -> [K: V] {\n    return Dictionary(uniqueKeysWithValues: pairs)\n}\n\n## Solution\n\n/// Convert an array of key-value tuples to a dictionary.\n///\n/// - Parameter pairs: A collection of key-value tuples.\n/// - Returns: A dictionary containing the key-value pairs.\nfunc dictionaryFromPairs<K, V>(_ pairs: [(K, V)]) -> [K: V] {\n    return Dictionary(uniqueKeysWithValues: pairs)\n}\n\n## Test\n\nimport XCTest\n\nclass SwiftCommentsTests: XCTestCase {\n\n    func testComments() {\n        let sut = SwiftCommentsTests()\n        let comment = sut.documentation(for: dictionaryFromPairs)\n        XCTAssertEqual(comment, \"\"\"\n/// Convert an array of key-value tuples to a dictionary.\n//",
      "/// Returns the average of the given numbers.\n/// - Parameter numbers: A list of numbers to average.\n/// - Returns: The average of the given numbers.\nfunc arrayAverage(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n\nFunction:\n\nfunc addToEnd(of array: [Int], with value: Int) -> [Int] {\n    return array + [value]\n}\n## Documentation:\n/// Adds the given value to the end of the given array.\n/// - Parameter array: The array to add the value to.\n/// - Parameter value: The value to add to the end of the array.\n/// - Returns: The array with the value added to the end.\nfunc addToEnd(of array: [Int], with value: Int) -> [Int] {\n    return array + [value]\n}\n\nFunction:\n\nfunc isPrime(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    for i in 2...number {\n        guard number % i == 0 else { continue }\n       ",
      "/// Converts a string into a character array.\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The converted array.\n\n/// ### Example\n/// ```swift\n/// stringToCharacterArray(\"Hello\")\n/// ```\n///\n/// - Parameter str: The string to convert.\n/// - Returns: The converted array.\nfunc stringToCharacterArray(str: String) -> [Character] {\n    return Array(str)\n}\n\nFunction:\n\nfunc append(to array: [String], strings: [String]) -> [String] {\n    var newArray = array\n    for string in strings {\n        newArray.append(string)\n    }\n    return newArray\n}\n## Documentation:\n/// Appends a string to an array of strings.\n///\n/// - Parameter array: The array to append to.\n/// - Parameter strings: The strings to append.\n/// - Returns: The appended array.\n\n/// ### Example\n/// ```swift\n/// append(to: [\"a\", \"b\"], strings: [\"c\", \"d\"])\n///",
      "/// Combinations of k items from n items.\n///\n/// - Parameter n: The number of items.\n/// - Parameter k: The number of items to return.\n/// - Returns: The number of combinations.\nfunc combinations(_ n: Int, _ k: Int) -> Int {\n    func factorial(_ num: Int) -> Int {\n        return (1...num).reduce(1, *)\n    }\n    return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\n## Performance\n\nWrite a function that finds the most frequent item in an array.\n\nUse `for` loops instead of `reduce` and `map`.\n\nUse `Int.max` or `Int.min` to handle the case where the most frequent element is the same as the least frequent element.\n\n## Performance:\n\nfunc mostFrequent(in array: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in array {\n        counts[num, default: 0] += 1\n    }\n    var maxCount = 0\n    var maxNum = 0\n    for (num,",
      "/// Computes the average of an array of doubles.\n///\n/// - Parameter numbers: A list of doubles.\n/// - Returns: The average of the numbers in the list.\n/// - Complexity: O(n)\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n\n## Solution\n```swift\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n/// Computes the average of an array of doubles.\n///\n/// - Parameter numbers: A list of doubles.\n/// - Returns: The average of the numbers in the list.\n/// - Complexity: O(n)\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}\n```\n",
      "/// Checks if a string is alpha-numeric.\n///\n/// - Parameter input: The string to check.\n/// - Returns: `true` if the string is alpha-numeric, `false` otherwise.\nfunc isAlphaNumeric(_ input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) != nil\n}\n\nFunction:\n\nfunc countCharacters(input: String) -> Int {\n    return input.count\n}\n## Documentation:\n\n/// Returns the number of characters in a string.\n///\n/// - Parameter input: The string to count.\n/// - Returns: The number of characters in the string.\nfunc countCharacters(_ input: String) -> Int {\n    return input.count\n}\n\nFunction:\n\nfunc isStringEmpty(input: String) -> Bool {\n    return input.isEmpty\n}\n## Documentation:\n\n/// Returns `true` if the string is empty, `false` otherwise.\n///\n/// - Parameter input: The string to check.\n/// - Returns: `true` if the string is empty",
      "/// Converts a string to an array of characters.\n///\n/// - parameter input: The string to convert.\n/// - returns: The array of characters.\nfunc stringToCharacterArray(input: String) -> [Character] {\n    return Array(input)\n}\n\nFunction:\n\nfunc isPrime(number: Int) -> Bool {\n    if number < 2 {\n        return false\n    }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n## Documentation:\n/// Determines whether a number is prime.\n///\n/// - parameter number: The number to check.\n/// - returns: `true` if the number is prime, `false` otherwise.\nfunc isPrime(number: Int) -> Bool {\n    if number < 2 {\n        return false\n    }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nFunction:\n\nfunc isPrime(number: Int) -> Bool {\n    if number < 2 {\n        return",
      "/// The perimeter of a rectangle is equal to the sum of the lengths of all four sides.\n/// The perimeter of a rectangle is equal to the sum of the lengths of all four sides.\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}\n## Review\nThe function has the same name as the function, but the parameters are renamed.\nThe parameter descriptions are redundant.\nThe return type is redundant.\nThe function name is not self-descriptive.\nThe function has a single return statement, so the return type should be omitted.\nThe function has a single parameter, so the parameter descriptions can be omitted.\nThe function has a single return value, so the return statement can be omitted.\nThe function has a single return value, so the return statement can be omitted.\nThe function has a single return value, so the return statement can be omitted.\nThe function has a single return value, so the return statement can be omitted.\nThe function has a single return value, so the return statement can be omitted.\nThe function has a single return value, so the return statement can be omitted.\nThe function has a single",
      "/// Converts a string array to an integer array.\n/// - Parameter array: The string array to convert.\n/// - Returns: An integer array containing the same values as the input array,\n///   with any non-numeric values removed.\nfunc stringArrayToIntArray(_ array: [String]) -> [Int]? {\n    return array.compactMap { Int($0) }\n}\n\nFunction:\n\nfunc arrayToStringArray(_ array: [Int]) -> [String]? {\n    return array.map { \"\\($0)\" }\n}\n## Documentation:\n/// Converts an integer array to a string array.\n/// - Parameter array: The integer array to convert.\n/// - Returns: A string array containing the same values as the input array,\n///   with any non-numeric values removed.\nfunc arrayToStringArray(_ array: [Int]) -> [String]? {\n    return array.map { \"\\($0)\" }\n}\n\nFunction:\n\nfunc stringArrayToIntArray(_ array: [String]) -> [Int]? {\n    return array.compactMap { Int($0)",
      "/// Removes all digits from a string.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}\n\n\n/// Removes all digits from a string.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}\n\n/// Removes all digits from a string.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}\n\n/// Removes all digits from a string.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}\n\n/// Removes all digits from a string.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}\n\n/// Removes all digits from a string.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}\n\n/// Removes all digits from a string."
    ],
    "REFERENCES": [
      [
        "/// Генерирует случайный элемент из массива строк.\n/// - Parameter array: Массив строк.\n/// - Returns: Случайный элемент из массива.\nfunc randomElementFromStringArray(_ array: [String]) -> String? {\n    return array.randomElement()\n}"
      ],
      [
        "/// Возвращает число, которое является квадратным корнем из заданного числа.\n/// - Parameter number: Число.\n/// - Returns: Квадратный корень числа.\nfunc squareRoot(of number: Double) -> Double {\n    return sqrt(number)\n}"
      ],
      [
        "/// Проверяет, является ли массив палиндромом.\n/// - Parameter array: Массив элементов.\n/// - Returns: true, если массив читается одинаково в обе стороны.\nfunc isPalindrome<T: Equatable>(_ array: [T]) -> Bool {\n    return array == array.reversed()\n}"
      ],
      [
        "/// Проверяет, является ли строка допустимым email.\n/// - Parameter email: Строка для проверки.\n/// - Returns: true, если строка похожа на email.\nfunc isValidEmail(_ email: String) -> Bool {\n    let pattern = \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}$\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex?.firstMatch(in: email, options: [], range: NSRange(location: 0, length: email.utf16.count)) != nil\n}"
      ],
      [
        "/// Считает сумму цифр числа.\n/// - Parameter number: Число.\n/// - Returns: Сумма цифр.\nfunc sumOfDigits(_ number: Int) -> Int {\n    return String(number).compactMap { Int(String($0)) }.reduce(0, +)\n}"
      ],
      [
        "/// Возвращает количество уникальных элементов в массиве.\n/// - Parameter array: Входной массив.\n/// - Returns: Количество уникальных элементов.\nfunc countUnique<T: Hashable>(in array: [T]) -> Int {\n    return Set(array).count\n}"
      ],
      [
        "/// Получает разницу между двумя датами в днях.\n/// - Parameters:\n///   - from: Начальная дата.\n///   - to: Конечная дата.\n/// - Returns: Разница в днях.\nfunc daysBetweenDates(from: Date, to: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: from, to: to)\n    return components.day ?? 0\n}"
      ],
      [
        "/// Проверяет, является ли массив уникальным (без повторов)\n/// - Parameter array: Массив элементов\n/// - Returns: true, если все элементы уникальны\nfunc isArrayUnique<T: Hashable>(_ array: [T]) -> Bool {\n    return Set(array).count == array.count\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом (игнорируя пробелы)\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является палиндромом\nfunc isPalindromeIgnoringSpaces(input: String) -> Bool {\n    let cleanedInput = input.replacingOccurrences(of: \" \", with: \"\").lowercased()\n    return cleanedInput == String(cleanedInput.reversed())\n}"
      ],
      [
        "/// Конвертирует минуты в часы и минуты.\n/// - Parameter minutes: Общее количество минут.\n/// - Returns: Кортеж (часы, минуты).\nfunc convertMinutes(_ minutes: Int) -> (hours: Int, minutes: Int) {\n    return (minutes / 60, minutes % 60)\n}"
      ],
      [
        "/// Проверяет, содержится ли подстрока в строке.\n/// - Parameters:\n///   - str: Строка.\n///   - substring: Подстрока.\n/// - Returns: `true`, если подстрока содержится в строке.\nfunc containsSubstring(_ str: String, _ substring: String) -> Bool {\n    return str.contains(substring)\n}"
      ],
      [
        "/// Подсчитывает количество элементов, превышающих заданное значение.\n/// - Parameters:\n///   - array: Массив чисел.\n///   - threshold: Порог.\n/// - Returns: Количество элементов.\nfunc countGreaterThan(_ array: [Int], threshold: Int) -> Int {\n    return array.filter { $0 > threshold }.count\n}"
      ],
      [
        "/// Находит медиану массива чисел.\n/// - Parameter array: Массив чисел.\n/// - Returns: Медиана массива.\nfunc medianOfArray(_ array: [Int]) -> Double? {\n    guard !array.isEmpty else { return nil }\n    let sorted = array.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2 - 1] + sorted[sorted.count / 2]) / 2.0\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}"
      ],
      [
        "/// Преобразует словарь в новый, где все значения инкрементируются на заданное число.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - increment: Число для инкрементации.\n/// - Returns: Новый словарь с инкрементированными значениями.\nfunc incrementDictionaryValues<Key>(_ dictionary: [Key: Int], by increment: Int) -> [Key: Int] where Key: Hashable {\n    return dictionary.mapValues { $0 + increment }\n}"
      ],
      [
        "/// Преобразует строку в массив целых чисел, используя запятую как разделитель\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив целых чисел\nfunc stringToIntArray(input: String) -> [Int]? {\n    return input.split(separator: \",\").compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }\n}"
      ],
      [
        "/// Генерирует уникальный идентификатор с помощью текущего времени.\n/// - Returns: Строка с уникальным идентификатором.\nfunc generateUniqueID() -> String {\n    return UUID().uuidString + \"-\" + String(Int(Date().timeIntervalSince1970))\n}"
      ],
      [
        "/// Получает текущий день недели в строковом виде.\n/// - Returns: Название дня недели.\nfunc currentDayOfWeek() -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"EEEE\"\n    return formatter.string(from: Date())\n}"
      ],
      [
        "/// Переводит температуру из Фаренгейтов в Цельсии.\n/// - Parameter fahrenheit: Температура в Фаренгейтах.\n/// - Returns: Температура в Цельсиях.\nfunc fahrenheitToCelsius(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5/9\n}"
      ],
      [
        "/// Считает количество согласных букв в строке\n/// - Parameter text: Входная строка\n/// - Returns: Количество согласных\nfunc countConsonants(text: String) -> Int {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.lowercased().filter { $0.isLetter && !vowels.contains($0) }.count\n}"
      ],
      [
        "/// Проверяет, является ли строка числом с плавающей запятой\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является числом с плавающей запятой, иначе `false`\nfunc isFloat(input: String) -> Bool {\n    return Float(input) != nil\n}"
      ],
      [
        "/// Конвертирует секунды в дни, часы, минуты и секунды\nfunc convertSeconds(_ seconds: Int) -> (days: Int, hours: Int, minutes: Int, seconds: Int) {\n    var remaining = seconds\n    let days = remaining / 86400\n    remaining %= 86400\n    let hours = remaining / 3600\n    remaining %= 3600\n    let minutes = remaining / 60\n    remaining %= 60\n    return (days, hours, minutes, remaining)\n}"
      ],
      [
        "/// Генерирует случайное имя пользователя\n/// - Returns: Строка с псевдослучайным именем\nfunc generateUsername() -> String {\n    let adjectives = [\"Fast\", \"Cool\", \"Silent\", \"Smart\"]\n    let animals = [\"Fox\", \"Wolf\", \"Bear\", \"Eagle\"]\n    return \"\\(adjectives.randomElement()!)\\(animals.randomElement()!)\\(Int.random(in: 10...99))\"\n}"
      ],
      [
        "/// Генерирует массив простых чисел до N (решето Эратосфена).\n/// - Parameter n: Верхняя граница.\n/// - Returns: Массив простых чисел.\nfunc sieveOfEratosthenes(_ n: Int) -> [Int] {\n    guard n >= 2 else { return [] }\n    var sieve = Array(repeating: true, count: n+1)\n    sieve[0] = false\n    sieve[1] = false\n    for i in 2...Int(Double(n).squareRoot()) {\n        if sieve[i] {\n            for j in stride(from: i*i, through: n, by: i) {\n                sieve[j] = false\n            }\n        }\n    }\n    return sieve.enumerated().filter { $0.element }.map { $0.offset }\n}"
      ],
      [
        "/// Вычисляет расстояние Левенштейна между двумя строками\nfunc levenshteinDistance(_ a: String, _ b: String) -> Int {\n    let empty = [Int](repeating: 0, count: b.count + 1)\n    var matrix = (0...a.count).map { [$0] + empty }\n    \n    for (i, aChar) in a.enumerated() {\n        for (j, bChar) in b.enumerated() {\n            matrix[i+1][j+1] = aChar == bChar ? \n                matrix[i][j] : \n                min(matrix[i][j], matrix[i][j+1], matrix[i+1][j]) + 1\n        }\n    }\n    return matrix.last?.last ?? 0\n}"
      ],
      [
        "/// Вычисляет сумму всех делителей числа\nfunc sumOfDivisors(_ number: Int) -> Int {\n    guard number > 0 else { return 0 }\n    return (1...number).filter { number % $0 == 0 }.reduce(0, +)\n}"
      ],
      [
        "/// Находит наименьший общий кратный двух чисел\n/// - Parameters:\n///   - a: Первое число\n///   - b: Второе число\n/// - Returns: НОК\nfunc lcm(_ a: Int, _ b: Int) -> Int {\n    return abs(a * b) / gcd(a, b)\n}"
      ],
      [
        "/// Проверяет условие для всех элементов массива.\n/// - Parameters:\n///   - array: Массив.\n///   - condition: Условие (замыкание).\n/// - Returns: `true`, если все элементы удовлетворяют условию.\nfunc allSatisfy<T>(_ array: [T], _ condition: (T) -> Bool) -> Bool {\n    return array.allSatisfy(condition)\n}"
      ],
      [
        "/// Преобразует строку в массив символов в обратном порядке\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов в обратном порядке\nfunc reverseCharacters(in input: String) -> [Character] {\n    return Array(input.reversed())\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом без учета регистра и пробелов.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка является палиндромом.\nfunc isPalindromeIgnoringSpacesAndCase(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// Возвращает строку с текущей датой в формате \"dd.MM.yyyy\"\n/// - Returns: Строка с датой\nfunc currentDateString() -> String {\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd.MM.yyyy\"\n    return formatter.string(from: Date())\n}"
      ],
      [
        "/// Реализует алгоритм BFS для поиска кратчайшего пути в матрице.\n/// - Parameters:\n///   - grid: Матрица (0 - пусто, 1 - препятствие).\n///   - start: Начальная точка (x, y).\n///   - end: Конечная точка (x, y).\n/// - Returns: Длина кратчайшего пути или nil.\nfunc bfsShortestPath(grid: [[Int]], start: (Int, Int), end: (Int, Int)) -> Int? {\n    // Реализация с использованием очереди и проверки соседних клеток\n}"
      ],
      [
        "/// Проверяет, является ли число нечётным.\n/// - Parameter number: Число.\n/// - Returns: true, если число нечётное.\nfunc isOdd(_ number: Int) -> Bool {\n    return number % 2 != 0\n}"
      ],
      [
        "/// Проверяет, является ли число квадратом другого.\n/// - Parameters:\n///   - a: Число.\n///   - b: Возможный квадрат.\n/// - Returns: `true`, если b = a².\nfunc isSquare(_ a: Int, of b: Int) -> Bool {\n    return a * a == b\n}"
      ],
      [
        "/// Находит минимальное число в массиве\n/// - Parameter numbers: Массив чисел\n/// - Returns: Минимальное число в массиве\nfunc minNumber(in numbers: [Int]) -> Int? {\n    return numbers.min()\n}"
      ],
      [
        "/// Преобразует строку в нижний регистр\n/// - Parameter input: Строка для преобразования\n/// - Returns: Строка в нижнем регистре\nfunc toLowerCase(input: String) -> String {\n    return input.lowercased()\n}"
      ],
      [
        "/// Проверяет, является ли переданное число целым и положительным.\n/// - Parameter number: Число для проверки.\n/// - Returns: `true`, если число положительное.\nfunc isPositiveInteger(_ number: Int) -> Bool {\n    return number > 0\n}"
      ],
      [
        "/// Преобразует строку в массив слов, разделённых дефисами\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив слов\nfunc stringToWordsUsingDash(input: String) -> [String] {\n    return input.split(separator: \"-\").map { String($0) }\n}"
      ],
      [
        "/// Возвращает ключи, которые не содержатся в другом словаре.\n/// - Parameters:\n///   - dict1: Первый словарь.\n///   - dict2: Второй словарь.\n/// - Returns: Массив ключей, которые присутствуют в первом, но отсутствуют во втором.\nfunc keysInFirstNotInSecond<Key, Value>(_ dict1: [Key: Value], dict2: [Key: Value]) -> [Key] where Key: Hashable {\n    return Array(dict1.keys.filter { !dict2.keys.contains($0) })\n}"
      ],
      [
        "/// Находит максимальное число в массиве\n/// - Parameter numbers: Массив чисел\n/// - Returns: Максимальное число\nfunc maxNumber(in numbers: [Int]) -> Int? {\n    return numbers.max()\n}"
      ],
      [
        "/// Проверяет, является ли строка буквой\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является буквой, иначе `false`\nfunc isLetter(input: String) -> Bool {\n    return input.count == 1 && input.rangeOfCharacter(from: .letters) != nil\n}"
      ],
      [
        "/// Преобразует словарь в строку с форматом \"ключ: значение\", разделенную запятыми.\n/// - Parameter dictionary: Словарь.\n/// - Returns: Строка в формате \"ключ: значение\".\nfunc dictionaryToString<Key, Value>(_ dictionary: [Key: Value]) -> String where Key: Hashable {\n    return dictionary.map { \"\\($0.key): \\($0.value)\" }.joined(separator: \", \")\n}"
      ],
      [
        "/// Сортирует массив строк по алфавиту.\n/// - Parameter strings: Массив строк.\n/// - Returns: Отсортированный массив.\nfunc sortStringsAlphabetically(_ strings: [String]) -> [String] {\n    return strings.sorted()\n}"
      ],
      [
        "/// Преобразует строку в массив целых чисел, разделённых двоеточиями.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив целых чисел.\nfunc stringToIntegerArrayByColon(_ str: String) -> [Int] {\n    return str.split(separator: \":\").compactMap { Int($0) }\n}"
      ],
      [
        "/// Удаляет указанный префикс из строки, если он есть.\n/// - Parameters:\n///   - string: Исходная строка.\n///   - prefix: Префикс для удаления.\n/// - Returns: Строка без префикса.\nfunc removePrefix(_ string: String, prefix: String) -> String {\n    return string.hasPrefix(prefix) ? String(string.dropFirst(prefix.count)) : string\n}"
      ],
      [
        "/// Разворачивает словарь (меняет местами ключи и значения).\n/// - Parameter dictionary: Словарь.\n/// - Returns: Новый словарь.\nfunc invertDictionary<K, V>(_ dictionary: [K: V]) -> [V: K] where K: Hashable, V: Hashable {\n    var result: [V: K] = [:]\n    for (key, value) in dictionary {\n        result[value] = key\n    }\n    return result\n}"
      ],
      [
        "/// Вычисляет сумму элементов множества.\n/// - Parameter set: Множество чисел.\n/// - Returns: Сумма элементов множества.\nfunc sumOfSet(_ set: Set<Int>) -> Int {\n    return set.reduce(0, +)\n}"
      ],
      [
        "/// Преобразует строку в массив символов.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив символов.\nfunc stringToCharacterArray(_ str: String) -> [Character] {\n    return Array(str)\n}"
      ],
      [
        "/// Создает словарь частот символов строки.\n/// - Parameter text: Входная строка.\n/// - Returns: Словарь [символ: частота].\nfunc characterFrequencies(in text: String) -> [Character: Int] {\n    var result: [Character: Int] = [:]\n    for char in text {\n        result[char, default: 0] += 1\n    }\n    return result\n}"
      ],
      [
        "/// Объединяет два массива без дубликатов.\n/// - Parameters:\n///   - a: Первый массив.\n///   - b: Второй массив.\n/// - Returns: Объединенный массив без повторов.\nfunc mergeUnique<T: Hashable>(_ a: [T], _ b: [T]) -> [T] {\n    return Array(Set(a).union(b))\n}"
      ],
      [
        "/// Проверяет, является ли строка числом в двоичной системе счисления\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка является числом в двоичной системе, иначе `false`\nfunc isBinary(input: String) -> Bool {\n    let binaryRegex = \"^[01]+$\"\n    let binaryTest = NSPredicate(format: \"SELF MATCHES %@\", binaryRegex)\n    return binaryTest.evaluate(with: input)\n}"
      ],
      [
        "/// Проверяет, заканчивается ли строка суффиксом.\n/// - Parameters:\n///   - str: Строка.\n///   - suffix: Суффикс.\n/// - Returns: `true`, если строка заканчивается суффиксом.\nfunc endsWith(_ str: String, _ suffix: String) -> Bool {\n    return str.hasSuffix(suffix)\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка палиндром.\nfunc isPalindrome(_ str: String) -> Bool {\n    let cleaned = str.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// Вычисляет площадь многоугольника по формуле шнуровки.\n/// - Parameter points: Массив точек (x, y).\n/// - Returns: Площадь многоугольника.\nfunc polygonArea(_ points: [(x: Double, y: Double)]) -> Double {\n    let n = points.count\n    var area = 0.0\n    for i in 0..<n {\n        let j = (i + 1) % n\n        area += points[i].x * points[j].y\n        area -= points[j].x * points[i].y\n    }\n    return abs(area) / 2.0\n}"
      ],
      [
        "/// Возвращает число, увеличенное на 1.\n/// - Parameter number: Входное число.\n/// - Returns: Число, увеличенное на 1.\nfunc increment(_ number: Int) -> Int {\n    return number + 1\n}"
      ],
      [
        "/// Находит индекс Пикового элемента в массиве.\n/// - Parameter array: Массив чисел.\n/// - Returns: Индекс элемента, который больше соседей.\nfunc findPeakElement(_ array: [Int]) -> Int? {\n    guard !array.isEmpty else { return nil }\n    for i in 0..<array.count {\n        let prev = i > 0 ? array[i-1] : Int.min\n        let next = i < array.count-1 ? array[i+1] : Int.min\n        if array[i] >= prev && array[i] >= next { return i }\n    }\n    return nil\n}"
      ],
      [
        "/// Проверяет, является ли строка числовым значением с плавающей точкой.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка представляет собой число с плавающей точкой.\nfunc isFloatNumber(_ str: String) -> Bool {\n    return Float(str) != nil\n}"
      ],
      [
        "/// Конвертирует секунды в часы, минуты и секунды.\n/// - Parameter totalSeconds: Общее количество секунд.\n/// - Returns: Кортеж (часы, минуты, секунды).\nfunc secondsToTime(_ totalSeconds: Int) -> (hours: Int, minutes: Int, seconds: Int) {\n    return (totalSeconds / 3600, (totalSeconds % 3600) / 60, totalSeconds % 60)\n}"
      ],
      [
        "/// Проверяет, является ли строка палиндромом, игнорируя пробелы и регистр.\n/// - Parameter text: Входная строка.\n/// - Returns: true, если строка палиндром.\nfunc isPalindromeIgnoringSpacesAndCase(_ text: String) -> Bool {\n    let cleaned = text.lowercased().filter { $0.isLetter }\n    return cleaned == String(cleaned.reversed())\n}"
      ],
      [
        "/// Преобразует строку в массив чисел с плавающей точкой, разделённых пробелами и точками.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив чисел с плавающей точкой.\nfunc stringToFloatArrayBySpaceAndPeriod(_ str: String) -> [Float] {\n    return str.split { $0 == \" \" || $0 == \".\" }.compactMap { Float($0) }\n}"
      ],
      [
        "/// Вычисляет сумму квадратов чисел в массиве.\n/// - Parameter array: Массив чисел.\n/// - Returns: Сумма квадратов чисел.\nfunc sumOfSquares(_ array: [Int]) -> Int {\n    return array.reduce(0) { $0 + $1 * $1 }\n}"
      ],
      [
        "/// Преобразует число в строку с процентами.\n/// - Parameter number: Число.\n/// - Returns: Строка с процентами.\nfunc toPercentage(_ number: Double) -> String {\n    return String(format: \"%.2f%%\", number * 100)\n}"
      ],
      [
        "/// Преобразует строку в массив чисел с плавающей точкой и возвращает их произведение.\n/// - Parameter str: Входная строка.\n/// - Returns: Произведение чисел в строке.\nfunc productOfNumbersInString(_ str: String) -> Double {\n    let numbers = str.split(separator: \" \").compactMap { Double($0) }\n    return numbers.reduce(1, *)\n}"
      ],
      [
        "/// Проверяет, является ли строка анаграммой другой строки.\n/// - Parameters:\n///   - str1: Первая строка.\n///   - str2: Вторая строка.\n/// - Returns: `true`, если строки являются анаграммами.\nfunc areAnagrams(_ str1: String, _ str2: String) -> Bool {\n    return str1.lowercased().sorted() == str2.lowercased().sorted()\n}"
      ],
      [
        "/// Вычисляет угол между часовой стрелкой и 12 часами\nfunc hourHandAngle(hour: Int, minutes: Int) -> Double {\n    let hourPosition = Double(hour % 12) * 30 + Double(minutes) * 0.5\n    return hourPosition\n}"
      ],
      [
        "/// Переводит массив чисел в массив строк, округляя до заданного количества знаков после запятой.\n/// - Parameters:\n///   - array: Массив чисел.\n///   - precision: Количество знаков после запятой.\n/// - Returns: Массив строк с округленными числами.\nfunc numberArrayToStringArray(_ array: [Double], precision: Int) -> [String] {\n    return array.map { String(format: \"%.\\(precision)f\", $0) }\n}"
      ],
      [
        "/// Извлекает ключи, для которых значения больше заданного порога.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - threshold: Пороговое значение.\n/// - Returns: Массив ключей, чьи значения больше порога.\nfunc keysWithValuesGreaterThanThreshold<Key, Value>(_ dictionary: [Key: Value], threshold: Value) -> [Key] where Key: Hashable, Value: Comparable {\n    return dictionary.filter { $0.value > threshold }.map { $0.key }\n}"
      ],
      [
        "/// Объединяет два массива в массив кортежей попарно.\n/// - Parameters:\n///   - a: Первый массив.\n///   - b: Второй массив.\n/// - Returns: Массив кортежей (элемент из a, элемент из b).\nfunc zipArrays<A, B>(_ a: [A], _ b: [B]) -> [(A, B)] {\n    return Array(zip(a, b))\n}"
      ],
      [
        "/// Возвращает все ключи словаря, соответствующие заданному значению.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - value: Значение для поиска.\n/// - Returns: Массив ключей.\nfunc keysForValue<K, V: Equatable>(_ dictionary: [K: V], value: V) -> [K] {\n    return dictionary.filter { $0.value == value }.map { $0.key }\n}"
      ],
      [
        "/// Подсчитывает количество гласных в строке.\n/// - Parameter text: Входная строка.\n/// - Returns: Количество гласных символов.\nfunc vowelCount(in text: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return text.filter { vowels.contains($0) }.count\n}"
      ],
      [
        "/// Проверяет, содержит ли строка только буквы\n/// - Parameter input: Входная строка\n/// - Returns: true, если только буквы\nfunc isAlphabetic(_ input: String) -> Bool {\n    return input.allSatisfy { $0.isLetter }\n}"
      ],
      [
        "/// Сортирует массив строк в порядке убывания длины.\n/// - Parameter strings: Массив строк.\n/// - Returns: Массив строк, отсортированных по убыванию длины.\nfunc sortStringsByLengthDescending(_ strings: [String]) -> [String] {\n    return strings.sorted { $0.count > $1.count }\n}"
      ],
      [
        "/// Преобразует строку в массив символов в верхнем регистре\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов в верхнем регистре\nfunc stringToUppercaseCharacters(input: String) -> [Character] {\n    return input.uppercased().map { $0 }\n}"
      ],
      [
        "/// Проверяет, является ли строка допустимым IP-адресом версии 4.\n/// - Parameter ip: Входная строка.\n/// - Returns: `true`, если строка является валидным IPv4-адресом.\nfunc isValidIPv4(_ ip: String) -> Bool {\n    let components = ip.split(separator: \".\")\n    guard components.count == 4 else { return false }\n    return components.allSatisfy { component in\n        if let num = Int(component), num >= 0, num <= 255 {\n            return true\n        }\n        return false\n    }\n}"
      ],
      [
        "/// Копирует файл из одного пути в другой.\n/// - Parameters:\n///   - from: Путь к исходному файлу.\n///   - to: Целевой путь.\n/// - Returns: true, если копирование прошло успешно.\nfunc copyFile(from: String, to: String) -> Bool {\n    do {\n        try FileManager.default.copyItem(atPath: from, toPath: to)\n        return true\n    } catch {\n        return false\n    }\n}"
      ],
      [
        "/// Преобразует строку в массив символов, исключая пробелы и знаки препинания\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов без пробелов и знаков препинания\nfunc stringToCharacterArrayWithoutPunctuation(input: String) -> [Character] {\n    let punctuationSet = CharacterSet.punctuationCharacters\n    let cleanedInput = input.components(separatedBy: punctuationSet).joined()\n    return Array(cleanedInput)\n}"
      ],
      [
        "/// Считает количество заданного символа в строке.\n/// - Parameters:\n///   - str: Строка.\n///   - char: Искомый символ.\n/// - Returns: Количество вхождений.\nfunc countCharacter(_ str: String, _ char: Character) -> Int {\n    return str.filter { $0 == char }.count\n}"
      ],
      [
        "/// Реализует алгоритм сортировки вставками.\n/// - Parameter array: Входной массив.\n/// - Returns: Отсортированный массив.\nfunc insertionSort<T: Comparable>(_ array: [T]) -> [T] {\n    var arr = array\n    for i in 1..<arr.count {\n        var j = i\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swapAt(j, j-1)\n            j -= 1\n        }\n    }\n    return arr\n}"
      ],
      [
        "/// Реализует алгоритм Ланцоша для приближенного вычисления собственных значений.\n/// - Parameter matrix: Квадратная матрица.\n/// - Returns: Приближенные собственные значения.\nfunc lanczosAlgorithm(matrix: [[Double]]) -> [Double] {\n    // Реализация метода Ланцоша для больших разреженных матриц\n    return []\n}"
      ],
      [
        "/// Находит факториал числа\n/// - Parameter n: Число для вычисления факториала\n/// - Returns: Факториал числа\nfunc factorial(of n: Int) -> Int {\n    return n == 0 ? 1 : n * factorial(of: n - 1)\n}"
      ],
      [
        "/// Возвращает только те элементы словаря, чьи значения удовлетворяют условию.\n/// - Parameters:\n///   - dictionary: Словарь.\n///   - condition: Условие для проверки значений.\n/// - Returns: Новый словарь с отфильтрованными элементами.\nfunc filterDictionaryByValue<Key, Value>(_ dictionary: [Key: Value], condition: (Value) -> Bool) -> [Key: Value] where Key: Hashable {\n    return dictionary.filter { condition($0.value) }\n}"
      ],
      [
        "/// Находит строку, которая является максимальной по количеству символов среди элементов массива\n/// - Parameter array: Массив строк\n/// - Returns: Строка с максимальной длиной\nfunc longestString(inArray array: [String]) -> String? {\n    return array.max { $0.count < $1.count }\n}"
      ],
      [
        "/// Возвращает сумму всех чисел в массиве.\n/// - Parameter numbers: Массив чисел.\n/// - Returns: Сумма чисел.\nfunc sumOfArray(_ numbers: [Int]) -> Int {\n    return numbers.reduce(0, +)\n}"
      ],
      [
        "/// Конвертирует десятичное число в шестнадцатеричное.\n/// - Parameter decimal: Десятичное число.\n/// - Returns: HEX-строка.\nfunc decimalToHex(_ decimal: Int) -> String {\n    String(format: \"%02X\", decimal)\n}"
      ],
      [
        "/// Вычисляет среднее геометрическое.\n/// - Parameter numbers: Массив чисел.\n/// - Returns: Среднее геометрическое.\nfunc geometricMean(_ numbers: [Double]) -> Double {\n    let product = numbers.reduce(1, *)\n    return pow(product, 1/Double(numbers.count))\n}"
      ],
      [
        "/// Форматирует число как валюту в текущей локали.\n/// - Parameter amount: Сумма.\n/// - Returns: Строка с валютой.\nfunc formatCurrency(_ amount: Double) -> String {\n    let formatter = NumberFormatter()\n    formatter.numberStyle = .currency\n    return formatter.string(from: NSNumber(value: amount)) ?? \"\\(amount)\"\n}"
      ],
      [
        "/// Преобразует строку в snake_case.\n/// - Parameter str: Входная строка.\n/// - Returns: Строка в snake_case.\nfunc toSnakeCase(_ str: String) -> String {\n    return str.lowercased().replacingOccurrences(of: \" \", with: \"_\")\n}"
      ],
      [
        "/// Проверяет, содержит ли строка заданную подстроку\n/// - Parameters:\n///   - text: Исходная строка\n///   - substring: Подстрока для поиска\n/// - Returns: `true`, если подстрока найдена\nfunc containsSubstring(text: String, substring: String) -> Bool {\n    return text.range(of: substring) != nil\n}"
      ],
      [
        "/// Считывает содержимое файла по указанному пути.\n/// - Parameter path: Путь к файлу.\n/// - Returns: Строка с содержимым файла или nil.\nfunc readFile(at path: String) -> String? {\n    return try? String(contentsOfFile: path, encoding: .utf8)\n}"
      ],
      [
        "/// Находит индекс первого вхождения элемента в массиве\n/// - Parameters:\n///   - array: Массив значений\n///   - element: Элемент для поиска\n/// - Returns: Индекс первого вхождения элемента или `nil`, если не найден\nfunc firstIndex<T>(of element: T, in array: [T]) -> Int? where T: Equatable {\n    return array.firstIndex(of: element)\n}"
      ],
      [
        "/// Находит наибольшее значение в массиве Double\n/// - Parameter values: Массив чисел\n/// - Returns: Максимальное значение или nil, если массив пуст\nfunc maxValue(in values: [Double]) -> Double? {\n    return values.max()\n}"
      ],
      [
        "/// Считает количество символов в строке.\n/// - Parameter str: Входная строка.\n/// - Returns: Количество символов.\nfunc countCharacters(_ str: String) -> Int {\n    return str.count\n}"
      ],
      [
        "/// Генерирует случайную строку заданной длины, состоящую из символов латинского алфавита и цифр.\n/// - Parameter length: Длина строки.\n/// - Returns: Случайная строка.\nfunc generateRandomAlphaNumericString(length: Int) -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).compactMap { _ in characters.randomElement() })\n}"
      ],
      [
        "/// Проверяет, является ли строка числом в двоичной системе с ведущими нулями.\n/// - Parameter str: Входная строка.\n/// - Returns: `true`, если строка является двоичным числом с ведущими нулями.\nfunc isBinaryStringWithLeadingZeros(_ str: String) -> Bool {\n    let regex = \"^0b[01]+$\"\n    return str.range(of: regex, options: .regularExpression) != nil\n}"
      ],
      [
        "/// Преобразует двухмерный массив чисел в одномерный массив.\n/// - Parameter matrix: Двухмерный массив чисел.\n/// - Returns: Одномерный массив.\nfunc flattenMatrix(_ matrix: [[Int]]) -> [Int] {\n    return matrix.flatMap { $0 }\n}"
      ],
      [
        "/// Вычисляет сумму квадратов первых N чисел\nfunc sumOfSquares(upTo n: Int) -> Int {\n    return (1...n).map { $0 * $0 }.reduce(0, +)\n}"
      ],
      [
        "/// Проверяет, является ли строка строкой с действительным IP-адресом (IPv4).\n/// - Parameter text: Входная строка.\n/// - Returns: true, если строка является действительным IPv4.\nfunc isValidIPv4(_ text: String) -> Bool {\n    let components = text.split(separator: \".\")\n    guard components.count == 4 else { return false }\n    return components.allSatisfy {\n        guard let number = Int($0), (0...255).contains(number) else { return false }\n        return true\n    }\n}"
      ],
      [
        "/// Проверяет, является ли переданное число простым.\n/// - Parameter number: Число для проверки.\n/// - Returns: `true`, если число простое.\nfunc isPrimeNumber(_ number: Int) -> Bool {\n    guard number > 1 else { return false }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}"
      ],
      [
        "/// Проверяет, начинается ли строка с цифры.\n/// - Parameter text: Входная строка.\n/// - Returns: true, если строка начинается с цифры.\nfunc startsWithDigit(_ text: String) -> Bool {\n    guard let first = text.first else { return false }\n    return first.isNumber\n}"
      ],
      [
        "/// Преобразует строку в массив чисел с плавающей точкой, разделённых точками.\n/// - Parameter str: Входная строка.\n/// - Returns: Массив чисел с плавающей точкой.\nfunc stringToFloatArrayByDots(_ str: String) -> [Float] {\n    return str.split(separator: \".\").compactMap { Float($0) }\n}"
      ],
      [
        "/// Вычисляет разницу между квадратом суммы и суммой квадратов двух чисел\n/// - Parameters:\n///   - a: Первое число\n///   - b: Второе число\n/// - Returns: (a + b)² - (a² + b²)\nfunc squareDifference(a: Int, b: Int) -> Int {\n    return (a + b) * (a + b) - (a * a + b * b)\n}"
      ],
      [
        "/// Преобразует массив кортежей (ключ, значение) в словарь.\n/// - Parameter pairs: Массив пар.\n/// - Returns: Словарь.\nfunc dictionaryFromPairs<K, V>(_ pairs: [(K, V)]) -> [K: V] {\n    return Dictionary(uniqueKeysWithValues: pairs)\n}"
      ],
      [
        "/// Вычисляет среднее значение массива.\n/// - Parameter numbers: Массив чисел.\n/// - Returns: Среднее значение.\nfunc arrayAverage(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}"
      ],
      [
        "/// Преобразует строку в массив символов\n/// - Parameter str: Строка для преобразования\n/// - Returns: Массив символов\nfunc stringToCharacterArray(str: String) -> [Character] {\n    return Array(str)\n}"
      ],
      [
        "/// Вычисляет количество комбинаций.\n/// - Parameters:\n///   - n: Общее количество элементов.\n///   - k: Размер комбинации.\n/// - Returns: Число комбинаций C(n, k).\nfunc combinations(n: Int, k: Int) -> Int {\n    func factorial(_ num: Int) -> Int {\n        return (1...num).reduce(1, *)\n    }\n    return factorial(n) / (factorial(k) * factorial(n - k))\n}"
      ],
      [
        "/// Вычисляет среднее значение чисел в массиве с плавающей точкой.\n/// - Parameter numbers: Массив чисел с плавающей точкой.\n/// - Returns: Среднее значение.\nfunc averageOfDoubleArray(_ numbers: [Double]) -> Double {\n    return numbers.reduce(0, +) / Double(numbers.count)\n}"
      ],
      [
        "/// Проверяет, является ли строка состоящей из цифр и символов\n/// - Parameter input: Строка для проверки\n/// - Returns: `true`, если строка состоит только из цифр и символов, иначе `false`\nfunc isAlphaNumeric(input: String) -> Bool {\n    return input.rangeOfCharacter(from: .alphanumerics) != nil\n}"
      ],
      [
        "/// Преобразует строку в массив символов\n/// - Parameter input: Строка для преобразования\n/// - Returns: Массив символов\nfunc stringToCharacterArray(input: String) -> [Character] {\n    return Array(input)\n}"
      ],
      [
        "/// Вычисляет периметр прямоугольника\n/// - Parameters:\n///   - length: Длина прямоугольника\n///   - width: Ширина прямоугольника\n/// - Returns: Периметр прямоугольника\nfunc rectanglePerimeter(length: Double, width: Double) -> Double {\n    return 2 * (length + width)\n}"
      ],
      [
        "/// Преобразует массив строк в массив чисел.\n/// - Parameter array: Массив строк, содержащих числа.\n/// - Returns: Массив чисел.\nfunc stringArrayToIntArray(_ array: [String]) -> [Int]? {\n    return array.compactMap { Int($0) }\n}"
      ],
      [
        "/// Возвращает строку с удалёнными все цифры из текста.\n/// - Parameter text: Входная строка.\n/// - Returns: Строка без цифр.\nfunc removeDigits(from text: String) -> String {\n    return text.filter { !$0.isNumber }\n}"
      ]
    ]
  }
}